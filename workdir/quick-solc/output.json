{"contracts":{"example/Address.sol":{"Address":{"evm":{"deployedBytecode":{"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122028ada879d68d5ae2e2e3dc87f62b1e271fc6c87856e5ba3325d03ceb4820474764736f6c634300081a0033","sourceMap":"98:1177:0:-:0;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"example/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":./=/example/\",\":@openzeppelin/=example/node_modules/@openzeppelin/\"]},\"sources\":{\"example/Address.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\r\\n     * execution of a contract's constructor, its address will be reported as\\r\\n     * not containing a contract.\\r\\n     *\\r\\n     * > It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` into `address payable`. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return payable(account);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x83c83dcfd93e1a04dbde42f40d7aff39a066c1f45e6125d07d6b7a6b47833657\"}},\"version\":1}"}},"example/BeerToken.sol":{"BeerToken":{"evm":{"deployedBytecode":{"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c806342966c681161007157806342966c681461015657806370a082311461017257806395d89b41146101a2578063a9059cbb146101c0578063be45fd62146101f0578063e486033914610220576100a9565b806306fdde03146100ae57806318160ddd146100cc5780632ddbd13a146100ea578063313ce5671461010857806340c10f1914610126575b600080fd5b6100b6610250565b6040516100c39190610add565b60405180910390f35b6100d461028d565b6040516100e19190610b18565b60405180910390f35b6100f2610297565b6040516100ff9190610b18565b60405180910390f35b61011061029d565b60405161011d9190610b4f565b60405180910390f35b610140600480360381019061013b9190610bfe565b6102a2565b60405161014d9190610c59565b60405180910390f35b610170600480360381019061016b9190610c74565b610410565b005b61018c60048036038101906101879190610ca1565b6104ce565b6040516101999190610b18565b60405180910390f35b6101aa610517565b6040516101b79190610add565b60405180910390f35b6101da60048036038101906101d59190610bfe565b610554565b6040516101e79190610c59565b60405180910390f35b61020a60048036038101906102059190610d33565b6107c7565b6040516102179190610c59565b60405180910390f35b61023a60048036038101906102359190610ca1565b610a22565b6040516102479190610b18565b60405180910390f35b60606040518060400160405280600581526020017f436f726e73000000000000000000000000000000000000000000000000000000815250905090565b6000600154905090565b60015481565b600090565b60003373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032990610df3565b60405180910390fd5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103819190610e42565b92505081905550816001600082825461039a9190610e42565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516103fe9190610b18565b60405180910390a36001905092915050565b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561045c57600080fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104ab9190610e76565b9250508190555080600160008282546104c49190610e76565b9250508190555050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606040518060400160405280600581526020017f436f726e73000000000000000000000000000000000000000000000000000000815250905090565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156105a257600080fd5b60006040518060400160405280600481526020016000815250905082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106089190610e76565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106969190610e42565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106e284610a3a565b15610757578373ffffffffffffffffffffffffffffffffffffffff16638943ec023385846040518463ffffffff1660e01b815260040161072493929190610f0e565b600060405180830381600087803b15801561073e57600080fd5b505af1158015610752573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516107b49190610b18565b60405180910390a3600191505092915050565b600083600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561081557600080fd5b83600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108609190610e76565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108ee9190610e42565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061093a85610a3a565b156109b1578473ffffffffffffffffffffffffffffffffffffffff16638943ec02338686866040518563ffffffff1660e01b815260040161097e9493929190610f88565b600060405180830381600087803b15801561099857600080fd5b505af11580156109ac573d6000803e3d6000fd5b505050505b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610a0e9190610b18565b60405180910390a360019050949350505050565b60026020528060005260406000206000915090505481565b600080823b905060008111915050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a87578082015181840152602081019050610a6c565b60008484015250505050565b6000601f19601f8301169050919050565b6000610aaf82610a4d565b610ab98185610a58565b9350610ac9818560208601610a69565b610ad281610a93565b840191505092915050565b60006020820190508181036000830152610af78184610aa4565b905092915050565b6000819050919050565b610b1281610aff565b82525050565b6000602082019050610b2d6000830184610b09565b92915050565b600060ff82169050919050565b610b4981610b33565b82525050565b6000602082019050610b646000830184610b40565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9f82610b74565b9050919050565b610baf81610b94565b8114610bba57600080fd5b50565b600081359050610bcc81610ba6565b92915050565b610bdb81610aff565b8114610be657600080fd5b50565b600081359050610bf881610bd2565b92915050565b60008060408385031215610c1557610c14610b6a565b5b6000610c2385828601610bbd565b9250506020610c3485828601610be9565b9150509250929050565b60008115159050919050565b610c5381610c3e565b82525050565b6000602082019050610c6e6000830184610c4a565b92915050565b600060208284031215610c8a57610c89610b6a565b5b6000610c9884828501610be9565b91505092915050565b600060208284031215610cb757610cb6610b6a565b5b6000610cc584828501610bbd565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610cf357610cf2610cce565b5b8235905067ffffffffffffffff811115610d1057610d0f610cd3565b5b602083019150836001820283011115610d2c57610d2b610cd8565b5b9250929050565b60008060008060608587031215610d4d57610d4c610b6a565b5b6000610d5b87828801610bbd565b9450506020610d6c87828801610be9565b935050604085013567ffffffffffffffff811115610d8d57610d8c610b6f565b5b610d9987828801610cdd565b925092505092959194509250565b7f4f6e6c79206f776e65722063616e206d696e7400000000000000000000000000600082015250565b6000610ddd601383610a58565b9150610de882610da7565b602082019050919050565b60006020820190508181036000830152610e0c81610dd0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e4d82610aff565b9150610e5883610aff565b9250828201905080821115610e7057610e6f610e13565b5b92915050565b6000610e8182610aff565b9150610e8c83610aff565b9250828203905081811115610ea457610ea3610e13565b5b92915050565b610eb381610b94565b82525050565b600081519050919050565b600082825260208201905092915050565b6000610ee082610eb9565b610eea8185610ec4565b9350610efa818560208601610a69565b610f0381610a93565b840191505092915050565b6000606082019050610f236000830186610eaa565b610f306020830185610b09565b8181036040830152610f428184610ed5565b9050949350505050565b82818337600083830152505050565b6000610f678385610ec4565b9350610f74838584610f4c565b610f7d83610a93565b840190509392505050565b6000606082019050610f9d6000830187610eaa565b610faa6020830186610b09565b8181036040830152610fbd818486610f5b565b90509594505050505056fea26469706673582212207f001af49d10bdfd4ba722e550428523244b6a8cbf7615173ad311ba4b251cb664736f6c634300081a0033","sourceMap":"149:2633:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;390:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;744:84;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;219:17;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;619:75;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2291:271;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2627:150;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;884:99;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;483:87;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1257:489;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1754:463;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;243:38;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;390:85;429:13;453:14;;;;;;;;;;;;;;;;;;;390:85;:::o;744:84::-;790:7;815:5;;808:12;;744:84;:::o;219:17::-;;;;:::o;619:75::-;662:5;619:75;:::o;2291:271::-;2355:12;2395:10;2386:19;;:5;;;;;;;;;;:19;;;2378:50;;;;;;;;;;;;:::i;:::-;;;;;;;;;2456:5;2437:6;:15;2444:7;2437:15;;;;;;;;;;;;;;;;:24;;;;;;;:::i;:::-;;;;;;;;2479:5;2470;;:14;;;;;;;:::i;:::-;;;;;;;;2519:7;2498:36;;2507:10;2498:36;;;2528:5;2498:36;;;;;;:::i;:::-;;;;;;;;2550:4;2543:11;;2291:271;;;;:::o;2627:150::-;2704:5;2682:6;:18;2689:10;2682:18;;;;;;;;;;;;;;;;:27;;2674:36;;;;;;2741:5;2719:6;:18;2726:10;2719:18;;;;;;;;;;;;;;;;:27;;;;;;;:::i;:::-;;;;;;;;2764:5;2755;;:14;;;;;;;:::i;:::-;;;;;;;;2627:150;:::o;884:99::-;939:7;964:6;:11;971:3;964:11;;;;;;;;;;;;;;;;957:18;;884:99;;;:::o;483:87::-;524:13;548:14;;;;;;;;;;;;;;;;;;;483:87;:::o;1257:489::-;1320:12;1373:5;1351:6;:18;1358:10;1351:18;;;;;;;;;;;;;;;;:27;;1343:36;;;;;;1388:19;:35;;;;;;;;;;;;;;;;;;;1474:5;1453:6;:18;1460:10;1453:18;;;;;;;;;;;;;;;;:26;;;;:::i;:::-;1432:6;:18;1439:10;1432:18;;;;;;;;;;;;;;;:47;;;;1514:5;1501:6;:10;1508:2;1501:10;;;;;;;;;;;;;;;;:18;;;;:::i;:::-;1488:6;:10;1495:2;1488:10;;;;;;;;;;;;;;;:31;;;;1531:22;1550:2;1531:18;:22::i;:::-;1528:110;;;1584:2;1567:34;;;1602:10;1614:5;1621:6;1567:61;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1528:110;1672:2;1651:31;;1660:10;1651:31;;;1676:5;1651:31;;;;;;:::i;:::-;;;;;;;;1734:4;1727:11;;;1257:489;;;;:::o;1754:463::-;1838:12;1891:5;1869:6;:18;1876:10;1869:18;;;;;;;;;;;;;;;;:27;;1861:36;;;;;;1948:5;1927:6;:18;1934:10;1927:18;;;;;;;;;;;;;;;;:26;;;;:::i;:::-;1906:6;:18;1913:10;1906:18;;;;;;;;;;;;;;;:47;;;;1988:5;1975:6;:10;1982:2;1975:10;;;;;;;;;;;;;;;;:18;;;;:::i;:::-;1962:6;:10;1969:2;1962:10;;;;;;;;;;;;;;;:31;;;;2005:22;2024:2;2005:18;:22::i;:::-;2002:108;;;2058:2;2041:34;;;2076:10;2088:5;2095:4;;2041:59;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2002:108;2144:2;2123:31;;2132:10;2123:31;;;2148:5;2123:31;;;;;;:::i;:::-;;;;;;;;2205:4;2198:11;;1754:463;;;;;;:::o;243:38::-;;;;;;;;;;;;;;;;;:::o;557:422:0:-;617:4;825:12;936:7;924:20;916:28;;970:1;963:4;:8;956:15;;;557:422;;;:::o;7:99:11:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:248::-;369:1;379:113;393:6;390:1;387:13;379:113;;;478:1;473:3;469:11;463:18;459:1;454:3;450:11;443:39;415:2;412:1;408:10;403:15;;379:113;;;526:1;517:6;512:3;508:16;501:27;349:186;287:248;;;:::o;541:102::-;582:6;633:2;629:7;624:2;617:5;613:14;609:28;599:38;;541:102;;;:::o;649:377::-;737:3;765:39;798:5;765:39;:::i;:::-;820:71;884:6;879:3;820:71;:::i;:::-;813:78;;900:65;958:6;953:3;946:4;939:5;935:16;900:65;:::i;:::-;990:29;1012:6;990:29;:::i;:::-;985:3;981:39;974:46;;741:285;649:377;;;;:::o;1032:313::-;1145:4;1183:2;1172:9;1168:18;1160:26;;1232:9;1226:4;1222:20;1218:1;1207:9;1203:17;1196:47;1260:78;1333:4;1324:6;1260:78;:::i;:::-;1252:86;;1032:313;;;;:::o;1351:77::-;1388:7;1417:5;1406:16;;1351:77;;;:::o;1434:118::-;1521:24;1539:5;1521:24;:::i;:::-;1516:3;1509:37;1434:118;;:::o;1558:222::-;1651:4;1689:2;1678:9;1674:18;1666:26;;1702:71;1770:1;1759:9;1755:17;1746:6;1702:71;:::i;:::-;1558:222;;;;:::o;1786:86::-;1821:7;1861:4;1854:5;1850:16;1839:27;;1786:86;;;:::o;1878:112::-;1961:22;1977:5;1961:22;:::i;:::-;1956:3;1949:35;1878:112;;:::o;1996:214::-;2085:4;2123:2;2112:9;2108:18;2100:26;;2136:67;2200:1;2189:9;2185:17;2176:6;2136:67;:::i;:::-;1996:214;;;;:::o;2297:117::-;2406:1;2403;2396:12;2420:117;2529:1;2526;2519:12;2543:126;2580:7;2620:42;2613:5;2609:54;2598:65;;2543:126;;;:::o;2675:96::-;2712:7;2741:24;2759:5;2741:24;:::i;:::-;2730:35;;2675:96;;;:::o;2777:122::-;2850:24;2868:5;2850:24;:::i;:::-;2843:5;2840:35;2830:63;;2889:1;2886;2879:12;2830:63;2777:122;:::o;2905:139::-;2951:5;2989:6;2976:20;2967:29;;3005:33;3032:5;3005:33;:::i;:::-;2905:139;;;;:::o;3050:122::-;3123:24;3141:5;3123:24;:::i;:::-;3116:5;3113:35;3103:63;;3162:1;3159;3152:12;3103:63;3050:122;:::o;3178:139::-;3224:5;3262:6;3249:20;3240:29;;3278:33;3305:5;3278:33;:::i;:::-;3178:139;;;;:::o;3323:474::-;3391:6;3399;3448:2;3436:9;3427:7;3423:23;3419:32;3416:119;;;3454:79;;:::i;:::-;3416:119;3574:1;3599:53;3644:7;3635:6;3624:9;3620:22;3599:53;:::i;:::-;3589:63;;3545:117;3701:2;3727:53;3772:7;3763:6;3752:9;3748:22;3727:53;:::i;:::-;3717:63;;3672:118;3323:474;;;;;:::o;3803:90::-;3837:7;3880:5;3873:13;3866:21;3855:32;;3803:90;;;:::o;3899:109::-;3980:21;3995:5;3980:21;:::i;:::-;3975:3;3968:34;3899:109;;:::o;4014:210::-;4101:4;4139:2;4128:9;4124:18;4116:26;;4152:65;4214:1;4203:9;4199:17;4190:6;4152:65;:::i;:::-;4014:210;;;;:::o;4230:329::-;4289:6;4338:2;4326:9;4317:7;4313:23;4309:32;4306:119;;;4344:79;;:::i;:::-;4306:119;4464:1;4489:53;4534:7;4525:6;4514:9;4510:22;4489:53;:::i;:::-;4479:63;;4435:117;4230:329;;;;:::o;4565:::-;4624:6;4673:2;4661:9;4652:7;4648:23;4644:32;4641:119;;;4679:79;;:::i;:::-;4641:119;4799:1;4824:53;4869:7;4860:6;4849:9;4845:22;4824:53;:::i;:::-;4814:63;;4770:117;4565:329;;;;:::o;4900:117::-;5009:1;5006;4999:12;5023:117;5132:1;5129;5122:12;5146:117;5255:1;5252;5245:12;5282:552;5339:8;5349:6;5399:3;5392:4;5384:6;5380:17;5376:27;5366:122;;5407:79;;:::i;:::-;5366:122;5520:6;5507:20;5497:30;;5550:18;5542:6;5539:30;5536:117;;;5572:79;;:::i;:::-;5536:117;5686:4;5678:6;5674:17;5662:29;;5740:3;5732:4;5724:6;5720:17;5710:8;5706:32;5703:41;5700:128;;;5747:79;;:::i;:::-;5700:128;5282:552;;;;;:::o;5840:817::-;5928:6;5936;5944;5952;6001:2;5989:9;5980:7;5976:23;5972:32;5969:119;;;6007:79;;:::i;:::-;5969:119;6127:1;6152:53;6197:7;6188:6;6177:9;6173:22;6152:53;:::i;:::-;6142:63;;6098:117;6254:2;6280:53;6325:7;6316:6;6305:9;6301:22;6280:53;:::i;:::-;6270:63;;6225:118;6410:2;6399:9;6395:18;6382:32;6441:18;6433:6;6430:30;6427:117;;;6463:79;;:::i;:::-;6427:117;6576:64;6632:7;6623:6;6612:9;6608:22;6576:64;:::i;:::-;6558:82;;;;6353:297;5840:817;;;;;;;:::o;6663:169::-;6803:21;6799:1;6791:6;6787:14;6780:45;6663:169;:::o;6838:366::-;6980:3;7001:67;7065:2;7060:3;7001:67;:::i;:::-;6994:74;;7077:93;7166:3;7077:93;:::i;:::-;7195:2;7190:3;7186:12;7179:19;;6838:366;;;:::o;7210:419::-;7376:4;7414:2;7403:9;7399:18;7391:26;;7463:9;7457:4;7453:20;7449:1;7438:9;7434:17;7427:47;7491:131;7617:4;7491:131;:::i;:::-;7483:139;;7210:419;;;:::o;7635:180::-;7683:77;7680:1;7673:88;7780:4;7777:1;7770:15;7804:4;7801:1;7794:15;7821:191;7861:3;7880:20;7898:1;7880:20;:::i;:::-;7875:25;;7914:20;7932:1;7914:20;:::i;:::-;7909:25;;7957:1;7954;7950:9;7943:16;;7978:3;7975:1;7972:10;7969:36;;;7985:18;;:::i;:::-;7969:36;7821:191;;;;:::o;8018:194::-;8058:4;8078:20;8096:1;8078:20;:::i;:::-;8073:25;;8112:20;8130:1;8112:20;:::i;:::-;8107:25;;8156:1;8153;8149:9;8141:17;;8180:1;8174:4;8171:11;8168:37;;;8185:18;;:::i;:::-;8168:37;8018:194;;;;:::o;8218:118::-;8305:24;8323:5;8305:24;:::i;:::-;8300:3;8293:37;8218:118;;:::o;8342:98::-;8393:6;8427:5;8421:12;8411:22;;8342:98;;;:::o;8446:168::-;8529:11;8563:6;8558:3;8551:19;8603:4;8598:3;8594:14;8579:29;;8446:168;;;;:::o;8620:373::-;8706:3;8734:38;8766:5;8734:38;:::i;:::-;8788:70;8851:6;8846:3;8788:70;:::i;:::-;8781:77;;8867:65;8925:6;8920:3;8913:4;8906:5;8902:16;8867:65;:::i;:::-;8957:29;8979:6;8957:29;:::i;:::-;8952:3;8948:39;8941:46;;8710:283;8620:373;;;;:::o;8999:529::-;9166:4;9204:2;9193:9;9189:18;9181:26;;9217:71;9285:1;9274:9;9270:17;9261:6;9217:71;:::i;:::-;9298:72;9366:2;9355:9;9351:18;9342:6;9298:72;:::i;:::-;9417:9;9411:4;9407:20;9402:2;9391:9;9387:18;9380:48;9445:76;9516:4;9507:6;9445:76;:::i;:::-;9437:84;;8999:529;;;;;;:::o;9534:148::-;9632:6;9627:3;9622;9609:30;9673:1;9664:6;9659:3;9655:16;9648:27;9534:148;;;:::o;9710:314::-;9806:3;9827:70;9890:6;9885:3;9827:70;:::i;:::-;9820:77;;9907:56;9956:6;9951:3;9944:5;9907:56;:::i;:::-;9988:29;10010:6;9988:29;:::i;:::-;9983:3;9979:39;9972:46;;9710:314;;;;;:::o;10030:549::-;10207:4;10245:2;10234:9;10230:18;10222:26;;10258:71;10326:1;10315:9;10311:17;10302:6;10258:71;:::i;:::-;10339:72;10407:2;10396:9;10392:18;10383:6;10339:72;:::i;:::-;10458:9;10452:4;10448:20;10443:2;10432:9;10428:18;10421:48;10486:86;10567:4;10558:6;10550;10486:86;:::i;:::-;10478:94;;10030:549;;;;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"example/BeerToken.sol\":\"BeerToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":./=/example/\",\":@openzeppelin/=example/node_modules/@openzeppelin/\"]},\"sources\":{\"example/Address.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\r\\n     * execution of a contract's constructor, its address will be reported as\\r\\n     * not containing a contract.\\r\\n     *\\r\\n     * > It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` into `address payable`. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return payable(account);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x83c83dcfd93e1a04dbde42f40d7aff39a066c1f45e6125d07d6b7a6b47833657\"},\"example/BeerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IBeerToken.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IERC223Recipient.sol\\\";\\r\\n\\r\\ncontract BeerToken is IBeerToken {\\r\\n\\r\\n    address private owner;\\r\\n    uint public total;\\r\\n    mapping(address => uint) public tokens;\\r\\n\\r\\n    constructor() {\\r\\n      owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    // * Default attributes of your token\\r\\n    function name() external view returns (string memory) {\\r\\n      return \\\"Corns\\\";\\r\\n    }\\r\\n\\r\\n    function symbol() external view returns (string memory) {\\r\\n      return \\\"Corns\\\";\\r\\n    }\\r\\n\\r\\n    // * Our BeerToken is not divisible\\r\\n    function decimals() external view returns (uint8) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    // * Show the total supply of tokens\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n      return total;\\r\\n    }\\r\\n\\r\\n    // * Show the token balance of the address\\r\\n    function balanceOf(address who) external view returns (uint256) {\\r\\n      return tokens[who];\\r\\n    }\\r\\n\\r\\n    // * Basic functionality for transferring tokens to user.\\r\\n    //   The token contract keeps track of the token balances.\\r\\n    // * Token must not be lost! Make sure they can only be transferred to addresses,\\r\\n    //   who also support the receiving of tokens.\\r\\n    function transfer(address to, uint256 value) external returns (bool success) {\\r\\n      require(tokens[msg.sender] >= value);\\r\\n      bytes memory _empty = hex\\\"00000000\\\";\\r\\n      tokens[msg.sender] = tokens[msg.sender] - value;\\r\\n      tokens[to] = tokens[to] + value;\\r\\n      if(Address.isContract(to)) {\\r\\n         IERC223Recipient(to).tokenReceived(msg.sender, value, _empty);\\r\\n      }\\r\\n      emit Transfer(msg.sender, to, value);\\r\\n      //emit TransferData(_empty);\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value, bytes calldata data) external returns (bool success) {\\r\\n      require(tokens[msg.sender] >= value);\\r\\n      tokens[msg.sender] = tokens[msg.sender] - value;\\r\\n      tokens[to] = tokens[to] + value;\\r\\n      if(Address.isContract(to)) {\\r\\n         IERC223Recipient(to).tokenReceived(msg.sender, value, data);\\r\\n      }\\r\\n      emit Transfer(msg.sender, to, value);\\r\\n      //emit TransferData(_data);\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    // * Tokens can be minted by the owner of the token contract\\r\\n    function mint(address account, uint256 value) external returns (bool success) {\\r\\n      require(owner == msg.sender,\\\"Only owner can mint\\\");\\r\\n      tokens[account] += value;\\r\\n      total += value;\\r\\n      emit Transfer(msg.sender, account, value);\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    // * Tokens can be burned and therefore \\\"destroyed\\\"\\r\\n    function burn(uint256 value) external {\\r\\n      require(tokens[msg.sender] >= value);\\r\\n      tokens[msg.sender] -= value;\\r\\n      total -= value;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x82684d8bc51d5fd41688a681bbf5b8ce6eceafad2a86e1c79248fc7c3f2d62b5\",\"license\":\"MIT\"},\"example/IBeerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBeerToken {\\n\\n    // * Default attributes of your token\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n\\n    // * Our BeerToken is not divisible\\n    function decimals() external view returns (uint8);\\n\\n    // * Show the total supply of tokens\\n    function totalSupply() external view returns (uint256);\\n    // * Show the token balance of the address\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    // * Basic functionality for transferring tokens to user.\\n    //   The token contract keeps track of the token balances.\\n    // * Token must not be lost! Make sure they can only be transferred to addresses,\\n    //   who also support the receiving of tokens.\\n    function transfer(address to, uint256 value) external returns (bool success);\\n    function transfer(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n    // * Tokens can be minted by the owner of the token contract\\n    function mint(address account, uint256 value) external returns (bool success);\\n\\n    // * Tokens can be burned and therefore \\\"destroyed\\\"\\n    function burn(uint256 value) external;\\n\\n    // * Everytime a token is transferred/balances changed, this event has to be emitted\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\",\"keccak256\":\"0x4d3e9bc0cd7d680bdc0a550d512a8a1bb0d59fe1908040bad292f3d7fd3f0426\",\"license\":\"MIT\"},\"example/IERC223Recipient.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n /**\\r\\n * @title Contract that will work with ERC223 tokens.\\r\\n */\\r\\n \\r\\nabstract contract IERC223Recipient {\\r\\n\\r\\n\\r\\n struct ERC223TransferInfo\\r\\n    {\\r\\n        address token_contract;\\r\\n        address sender;\\r\\n        uint256 value;\\r\\n        bytes   data;\\r\\n    }\\r\\n    \\r\\n    ERC223TransferInfo private tkn;\\r\\n    \\r\\n/**\\r\\n * @dev Standard ERC223 function that will handle incoming token transfers.\\r\\n *\\r\\n * @param _from  Token sender address.\\r\\n * @param _value Amount of tokens.\\r\\n * @param _data  Transaction metadata.\\r\\n */\\r\\n    function tokenReceived(address _from, uint _value, bytes memory _data) public virtual\\r\\n    {\\r\\n        /**\\r\\n         * @dev Note that inside of the token transaction handler the actual sender of token transfer is accessible via the tkn.sender variable\\r\\n         * (analogue of msg.sender for Ether transfers)\\r\\n         * \\r\\n         * tkn.value - is the amount of transferred tokens\\r\\n         * tkn.data  - is the \\\"metadata\\\" of token transfer\\r\\n         * tkn.token_contract is most likely equal to msg.sender because the token contract typically invokes this function\\r\\n        */\\r\\n        tkn.token_contract = msg.sender;\\r\\n        tkn.sender         = _from;\\r\\n        tkn.value          = _value;\\r\\n        tkn.data           = _data;\\r\\n        \\r\\n        // ACTUAL CODE\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd8a4be74a4919d9a8bb7d28596699ad19f808d2604670738e40ca02ca06bfc86\"}},\"version\":1}"}},"example/IBeerBar.sol":{"IBeerBar":{"evm":{"deployedBytecode":{"object":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"BarClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BarOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BarkeeperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BarkeeperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BeerCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BeerOrdered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BeerSupplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBarkeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"barIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beerTokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeBar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeerPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBarkeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openBar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"pendingBeer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceBarkeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeBarkeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"serveBeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setBeerPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBeerTokenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"example/IBeerBar.sol\":\"IBeerBar\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":./=/example/\",\":@openzeppelin/=example/node_modules/@openzeppelin/\"]},\"sources\":{\"example/IBeerBar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBeerBar {\\r\\n\\r\\n    // ROLES\\r\\n    // * Only owners can add new owners\\r\\n    // * Owners can only renounce themselves again\\r\\n    function isOwner(address account) external view returns (bool);\\r\\n    function addOwner(address account) external;\\r\\n    function renounceOwner() external;\\r\\n    event OwnerAdded(address account);\\r\\n    event OwnerRemoved(address account);\\r\\n    // * Barkeepers have to be set by owners\\r\\n    // * Barkeepers can be revoked by owners\\r\\n    // * Barkeepers can renounce themselves\\r\\n    function isBarkeeper(address account) external view returns (bool);\\r\\n    function addBarkeeper(address account) external;\\r\\n    function revokeBarkeeper(address account) external;\\r\\n    function renounceBarkeeper() external;\\r\\n    event BarkeeperAdded(address account);\\r\\n    event BarkeeperRemoved(address account);\\r\\n\\r\\n    // * The bar uses its own tokens as local currency.\\r\\n    //   Connect the bar contract with the token contract.\\r\\n    // * This can only be done by owners\\r\\n    function setBeerTokenContractAddress(address addr) external;\\r\\n    // * Show which beer is served\\r\\n    function beerTokenContractAddress() external view returns(address);\\r\\n\\r\\n    // * The bar has opening hours during which beer can be ordered and served\\r\\n    // * The bar is opened and closed by barkeepers\\r\\n    function openBar() external;\\r\\n    function closeBar() external;\\r\\n    function barIsOpen() external view returns (bool);\\r\\n    event BarOpened();\\r\\n    event BarClosed();\\r\\n\\r\\n    // * When new beer is delivered, the token contract owner mints new\\r\\n    //   tokens and transfers them to the bar contract with the string\\r\\n    //   \\\"supply\\\" in the data field (since this is not a beer order)\\r\\n    // * The bar contract emits the event BeerSupplied when receiving\\r\\n    //   beer tokens marked as \\\"supply\\\" (together with beer)\\r\\n    event BeerSupplied(address indexed from, uint256 amount);\\r\\n\\r\\n    // * Beer is ordered by transferring beer tokens to the bar contract\\r\\n    //   with the data field \\\"hex\\\"00000000\\\" (standard transfer);\\r\\n    //   1 token = 1 beer\\r\\n    // * Beer can only be ordered while the bar is open\\r\\n    // * In addition to the internal bookkeeping, the event\\r\\n    //   BeerOrdered is triggered to signal that there is work\\r\\n    event BeerOrdered(address indexed customer, uint256 amount);\\r\\n\\r\\n    // Both, supply and order, have to be implemented in a token fallback function\\r\\n\\r\\n    // * Beer that has been ordered will be served by barkeepers\\r\\n    // * Beer can only be served while the bar is open\\r\\n    // * Served beer has to be burned by the token contract\\r\\n    function serveBeer(address customer, uint amount) external;\\r\\n\\r\\n    // * Orders that haven't yet been processed may be canceled by the\\r\\n    //   customer, who will get back the tokens\\r\\n    // * This triggers the event BeerCanceled\\r\\n    // * Orders can be canceled at any time\\r\\n    function cancelOrder(uint amount) external;\\r\\n    event BeerCanceled(address indexed customer, uint256 amount);\\r\\n\\r\\n    // * Get pending orders for a customer\\r\\n    function pendingBeer(address customer) external view returns (uint256);\\r\\n\\r\\n    // * Beer price can only be changed by owners when the bar is closed\\r\\n    function setBeerPrice(uint256 price) external;\\r\\n    function getBeerPrice() external view returns(uint256);\\r\\n\\r\\n    // * Customers may buy tokens for Ether\\r\\n    // * If the supplied Ether is not divisible by the beer price\\r\\n    //   the rest is kept as a tip. The caller (like the web interface)\\r\\n    //   can check that the value is a multiple of the beer price.\\r\\n    function buyToken() external payable;\\r\\n\\r\\n    // * `amount` (in Wei) of the Ether stored in the contract is transferred to\\r\\n    //   `receiver`, provided `amount` does not exceed the balance of the contract\\r\\n    // * Only owners are allowed to do this\\r\\n    function payout(address payable receiver, uint256 amount) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xb99c7f896102cb2a7e30476364d6f291d47b8b9ff9ad4b7faf5bdc2e7d5f299f\",\"license\":\"MIT\"}},\"version\":1}"}},"example/IBeerToken.sol":{"IBeerToken":{"evm":{"deployedBytecode":{"object":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"example/IBeerToken.sol\":\"IBeerToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":./=/example/\",\":@openzeppelin/=example/node_modules/@openzeppelin/\"]},\"sources\":{\"example/IBeerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBeerToken {\\n\\n    // * Default attributes of your token\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n\\n    // * Our BeerToken is not divisible\\n    function decimals() external view returns (uint8);\\n\\n    // * Show the total supply of tokens\\n    function totalSupply() external view returns (uint256);\\n    // * Show the token balance of the address\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    // * Basic functionality for transferring tokens to user.\\n    //   The token contract keeps track of the token balances.\\n    // * Token must not be lost! Make sure they can only be transferred to addresses,\\n    //   who also support the receiving of tokens.\\n    function transfer(address to, uint256 value) external returns (bool success);\\n    function transfer(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n    // * Tokens can be minted by the owner of the token contract\\n    function mint(address account, uint256 value) external returns (bool success);\\n\\n    // * Tokens can be burned and therefore \\\"destroyed\\\"\\n    function burn(uint256 value) external;\\n\\n    // * Everytime a token is transferred/balances changed, this event has to be emitted\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\",\"keccak256\":\"0x4d3e9bc0cd7d680bdc0a550d512a8a1bb0d59fe1908040bad292f3d7fd3f0426\",\"license\":\"MIT\"}},\"version\":1}"}},"example/IERC223Recipient.sol":{"IERC223Recipient":{"evm":{"deployedBytecode":{"object":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"tokenReceived(address,uint256,bytes)\":{\"details\":\"Standard ERC223 function that will handle incoming token transfers.\",\"params\":{\"_data\":\"Transaction metadata.\",\"_from\":\"Token sender address.\",\"_value\":\"Amount of tokens.\"}}},\"title\":\"Contract that will work with ERC223 tokens.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"example/IERC223Recipient.sol\":\"IERC223Recipient\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":./=/example/\",\":@openzeppelin/=example/node_modules/@openzeppelin/\"]},\"sources\":{\"example/IERC223Recipient.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n /**\\r\\n * @title Contract that will work with ERC223 tokens.\\r\\n */\\r\\n \\r\\nabstract contract IERC223Recipient {\\r\\n\\r\\n\\r\\n struct ERC223TransferInfo\\r\\n    {\\r\\n        address token_contract;\\r\\n        address sender;\\r\\n        uint256 value;\\r\\n        bytes   data;\\r\\n    }\\r\\n    \\r\\n    ERC223TransferInfo private tkn;\\r\\n    \\r\\n/**\\r\\n * @dev Standard ERC223 function that will handle incoming token transfers.\\r\\n *\\r\\n * @param _from  Token sender address.\\r\\n * @param _value Amount of tokens.\\r\\n * @param _data  Transaction metadata.\\r\\n */\\r\\n    function tokenReceived(address _from, uint _value, bytes memory _data) public virtual\\r\\n    {\\r\\n        /**\\r\\n         * @dev Note that inside of the token transaction handler the actual sender of token transfer is accessible via the tkn.sender variable\\r\\n         * (analogue of msg.sender for Ether transfers)\\r\\n         * \\r\\n         * tkn.value - is the amount of transferred tokens\\r\\n         * tkn.data  - is the \\\"metadata\\\" of token transfer\\r\\n         * tkn.token_contract is most likely equal to msg.sender because the token contract typically invokes this function\\r\\n        */\\r\\n        tkn.token_contract = msg.sender;\\r\\n        tkn.sender         = _from;\\r\\n        tkn.value          = _value;\\r\\n        tkn.data           = _data;\\r\\n        \\r\\n        // ACTUAL CODE\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd8a4be74a4919d9a8bb7d28596699ad19f808d2604670738e40ca02ca06bfc86\"}},\"version\":1}"}},"example/node_modules/@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"evm":{"deployedBytecode":{"object":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"example/node_modules/@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":./=/example/\",\":@openzeppelin/=example/node_modules/@openzeppelin/\"]},\"sources\":{\"example/node_modules/@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"example/node_modules/@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"example/node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"example/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"example/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}"}},"example/node_modules/@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"evm":{"deployedBytecode":{"object":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC-165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"example/node_modules/@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":./=/example/\",\":@openzeppelin/=example/node_modules/@openzeppelin/\"]},\"sources\":{\"example/node_modules/@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"}},\"version\":1}"}},"example/node_modules/@openzeppelin/contracts/utils/Context.sol":{"Context":{"evm":{"deployedBytecode":{"object":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"example/node_modules/@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":./=/example/\",\":@openzeppelin/=example/node_modules/@openzeppelin/\"]},\"sources\":{\"example/node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}"}},"example/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"evm":{"deployedBytecode":{"object":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"example/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":./=/example/\",\":@openzeppelin/=example/node_modules/@openzeppelin/\"]},\"sources\":{\"example/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"example/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}"}},"example/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"evm":{"deployedBytecode":{"object":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"example/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":./=/example/\",\":@openzeppelin/=example/node_modules/@openzeppelin/\"]},\"sources\":{\"example/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}"}},"example\\BeerBar.sol":{"BeerBar":{"evm":{"deployedBytecode":{"object":"6080604052600436106101e35760003560e01c80637065cb4811610102578063cb1560e511610095578063d86bb31311610064578063d86bb31314610695578063da252947146106be578063da9017dc146106e9578063e61a0db414610700576101e3565b8063cb1560e5146105ed578063cf45d7d514610604578063d547741f14610641578063d74640191461066a576101e3565b806391d14854116100d157806391d1485414610552578063a217fddf1461058f578063a4821719146105ba578063c2893a95146105c4576101e3565b80637065cb481461049a57806379320fe2146104c35780638124020e146104ec5780638943ec0214610529576101e3565b806328ce80311161017a5780632f54bf6e116101495780632f54bf6e146103e257806336568abe1461041f5780634c2e589d14610448578063514fcac714610471576101e3565b806328ce80311461034c57806328ef8946146103775780632b5858211461038e5780632f2ff15d146103b9576101e3565b80631bc73e3a116101b65780631bc73e3a146102a25780631c0e7b8a146102cd578063248a9ca3146102f857806328c23a4514610335576101e3565b806301b05336146101e857806301ffc9a714610211578063117803e31461024e578063117de2fd14610279575b600080fd5b3480156101f457600080fd5b5061020f600480360381019061020a9190611e0f565b61072b565b005b34801561021d57600080fd5b5061023860048036038101906102339190611e94565b6107f9565b6040516102459190611edc565b60405180910390f35b34801561025a57600080fd5b50610263610873565b6040516102709190611f10565b60405180910390f35b34801561028557600080fd5b506102a0600480360381019061029b9190611f9f565b610897565b005b3480156102ae57600080fd5b506102b76109b1565b6040516102c4919061203e565b60405180910390f35b3480156102d957600080fd5b506102e26109d7565b6040516102ef9190612068565b60405180910390f35b34801561030457600080fd5b5061031f600480360381019061031a91906120af565b610a01565b60405161032c9190611f10565b60405180910390f35b34801561034157600080fd5b5061034a610a20565b005b34801561035857600080fd5b50610361610aed565b60405161036e91906120eb565b60405180910390f35b34801561038357600080fd5b5061038c610af7565b005b34801561039a57600080fd5b506103a3610ba9565b6040516103b09190611edc565b60405180910390f35b3480156103c557600080fd5b506103e060048036038101906103db9190612106565b610bc0565b005b3480156103ee57600080fd5b5061040960048036038101906104049190611e0f565b610be2565b6040516104169190611edc565b60405180910390f35b34801561042b57600080fd5b5061044660048036038101906104419190612106565b610c15565b005b34801561045457600080fd5b5061046f600480360381019061046a9190612146565b610c90565b005b34801561047d57600080fd5b5061049860048036038101906104939190612146565b610d53565b005b3480156104a657600080fd5b506104c160048036038101906104bc9190611e0f565b610f25565b005b3480156104cf57600080fd5b506104ea60048036038101906104e59190611e0f565b610ff3565b005b3480156104f857600080fd5b50610513600480360381019061050e9190611e0f565b6110a0565b60405161052091906120eb565b60405180910390f35b34801561053557600080fd5b50610550600480360381019061054b91906122b9565b6110e9565b005b34801561055e57600080fd5b5061057960048036038101906105749190612106565b611428565b6040516105869190611edc565b60405180910390f35b34801561059b57600080fd5b506105a4611492565b6040516105b19190611f10565b60405180910390f35b6105c2611499565b005b3480156105d057600080fd5b506105eb60048036038101906105e69190612328565b6115e4565b005b3480156105f957600080fd5b50610602611805565b005b34801561061057600080fd5b5061062b60048036038101906106269190611e0f565b6118d2565b6040516106389190611edc565b60405180910390f35b34801561064d57600080fd5b5061066860048036038101906106639190612106565b611905565b005b34801561067657600080fd5b5061067f611927565b60405161068c9190611edc565b60405180910390f35b3480156106a157600080fd5b506106bc60048036038101906106b79190611e0f565b61193a565b005b3480156106ca57600080fd5b506106d3611a08565b6040516106e091906120eb565b60405180910390f35b3480156106f557600080fd5b506106fe611a0e565b005b34801561070c57600080fd5b50610715611abf565b6040516107229190611f10565b60405180910390f35b6107557f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b33611428565b610794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078b906123eb565b60405180910390fd5b6107be7f4471712aae1ce25d3bb917d8c8edc7ea5748199f0c42a86236ad80020979715582611ae3565b507fddaea0f56ddd451545a029e309c9900e717dd4fc8fbd099d1fa0f6e8622d1eea816040516107ee9190612068565b60405180910390a150565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061086c575061086b82611bd4565b5b9050919050565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b81565b6108c17f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b33611428565b610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f79061247d565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610926906124ce565b60006040518083038185875af1925050503d8060008114610963576040519150601f19603f3d011682016040523d82523d6000602084013e610968565b606091505b50509050806109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a39061252f565b60405180910390fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000838152602001908152602001600020600101549050919050565b610a4a7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b33611428565b610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a80906125c1565b60405180910390fd5b610ab37f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b33611c3e565b507f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da33604051610ae39190612068565b60405180910390a1565b6000600254905090565b610b217f4471712aae1ce25d3bb917d8c8edc7ea5748199f0c42a86236ad80020979715533611428565b610b60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5790612653565b60405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507fe311bc1ca37e125782c35af946e36aaca07c4510eeffada2ba114c0e9774fbb460405160405180910390a1565b6000600160149054906101000a900460ff16905090565b610bc982610a01565b610bd281611d30565b610bdc8383611ae3565b50505050565b6000610c0e7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b83611428565b9050919050565b610c1d611d44565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c81576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c8b8282611c3e565b505050565b600160149054906101000a900460ff1615610ce0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd7906126e5565b60405180910390fd5b610d0a7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b33611428565b610d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4090612777565b60405180910390fd5b8060028190555050565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610d9f57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610dfc929190612797565b6020604051808303816000875af1158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f91906127ec565b610e7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7590612865565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ecd91906128b4565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f9e9d0e3d8e80951b03f40584d81f0396ec2899fe7267a87e264db8309b17ac6082604051610f1a91906120eb565b60405180910390a250565b610f4f7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b33611428565b610f8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8590612934565b60405180910390fd5b610fb87f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b82611ae3565b507f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c381604051610fe89190612068565b60405180910390a150565b61101d7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b33611428565b61105c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611053906129a0565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117090612a0c565b60405180910390fd5b7fb308cfbb7d2d38db3a215f9728501ac69445a6afbee328cdeae4e23db54b850a818051906020012003611263576111d17f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b32611428565b611210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120790612a78565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f474cef3e0be75022a5c778de128b4eeb1bd3b6408c87c2439689cb58ad71615d8360405161125691906120eb565b60405180910390a2611423565b7fe8e77626586f73b955364c7b4bbf0bb7f7685ebd40e852b164633a4acbd3244c818051906020012003611422576112bb7f4471712aae1ce25d3bb917d8c8edc7ea5748199f0c42a86236ad80020979715533611428565b1580156112ef57506112ed7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b33611428565b155b61132e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132590612ae4565b60405180910390fd5b600160149054906101000a900460ff1661137d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137490612b50565b60405180910390fd5b81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113cc9190612b70565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167f53b7604ee49f0e8a26e6ae4f75c962c8c467157665b09391be96ddbfcb2b74df8360405161141991906120eb565b60405180910390a25b5b505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6000600254116114de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d590612bf0565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336002546002543461152e9190612c3f565b3461153991906128b4565b6115439190612c70565b6040518363ffffffff1660e01b8152600401611560929190612797565b6020604051808303816000875af115801561157f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a391906127ec565b6115e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d990612ced565b60405180910390fd5b565b600160149054906101000a900460ff16611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162a90612d7f565b60405180910390fd5b61165d7f4471712aae1ce25d3bb917d8c8edc7ea5748199f0c42a86236ad80020979715533611428565b61169c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169390612deb565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561171e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171590612e7d565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461176d91906128b4565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b81526004016117cf91906120eb565b600060405180830381600087803b1580156117e957600080fd5b505af11580156117fd573d6000803e3d6000fd5b505050505050565b61182f7f4471712aae1ce25d3bb917d8c8edc7ea5748199f0c42a86236ad80020979715533611428565b61186e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186590612f0f565b60405180910390fd5b6118987f4471712aae1ce25d3bb917d8c8edc7ea5748199f0c42a86236ad80020979715533611c3e565b507f24d55ebffd1d5ed6113bda634d47a96d6d0a042d564143067dc2f3c477346446336040516118c89190612068565b60405180910390a1565b60006118fe7f4471712aae1ce25d3bb917d8c8edc7ea5748199f0c42a86236ad80020979715583611428565b9050919050565b61190e82610a01565b61191781611d30565b6119218383611c3e565b50505050565b600160149054906101000a900460ff1681565b6119647f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b33611428565b6119a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199a90612fa1565b60405180910390fd5b6119cd7f4471712aae1ce25d3bb917d8c8edc7ea5748199f0c42a86236ad80020979715533611c3e565b507f24d55ebffd1d5ed6113bda634d47a96d6d0a042d564143067dc2f3c477346446816040516119fd9190612068565b60405180910390a150565b60025481565b611a387f4471712aae1ce25d3bb917d8c8edc7ea5748199f0c42a86236ad80020979715533611428565b611a77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6e90612653565b60405180910390fd5b60018060146101000a81548160ff0219169083151502179055507feacbe933e9d08a23f80dc21826bcef42d89f47da76688dc18a99d7fd43292bd760405160405180910390a1565b7f4471712aae1ce25d3bb917d8c8edc7ea5748199f0c42a86236ad80020979715581565b6000611aef8383611428565b611bc957600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611b66611d44565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611bce565b600090505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000611c4a8383611428565b15611d2557600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611cc2611d44565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611d2a565b600090505b92915050565b611d4181611d3c611d44565b611d4c565b50565b600033905090565b611d568282611428565b611d995780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401611d90929190612fc1565b60405180910390fd5b5050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ddc82611db1565b9050919050565b611dec81611dd1565b8114611df757600080fd5b50565b600081359050611e0981611de3565b92915050565b600060208284031215611e2557611e24611da7565b5b6000611e3384828501611dfa565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611e7181611e3c565b8114611e7c57600080fd5b50565b600081359050611e8e81611e68565b92915050565b600060208284031215611eaa57611ea9611da7565b5b6000611eb884828501611e7f565b91505092915050565b60008115159050919050565b611ed681611ec1565b82525050565b6000602082019050611ef16000830184611ecd565b92915050565b6000819050919050565b611f0a81611ef7565b82525050565b6000602082019050611f256000830184611f01565b92915050565b6000611f3682611db1565b9050919050565b611f4681611f2b565b8114611f5157600080fd5b50565b600081359050611f6381611f3d565b92915050565b6000819050919050565b611f7c81611f69565b8114611f8757600080fd5b50565b600081359050611f9981611f73565b92915050565b60008060408385031215611fb657611fb5611da7565b5b6000611fc485828601611f54565b9250506020611fd585828601611f8a565b9150509250929050565b6000819050919050565b6000612004611fff611ffa84611db1565b611fdf565b611db1565b9050919050565b600061201682611fe9565b9050919050565b60006120288261200b565b9050919050565b6120388161201d565b82525050565b6000602082019050612053600083018461202f565b92915050565b61206281611dd1565b82525050565b600060208201905061207d6000830184612059565b92915050565b61208c81611ef7565b811461209757600080fd5b50565b6000813590506120a981612083565b92915050565b6000602082840312156120c5576120c4611da7565b5b60006120d38482850161209a565b91505092915050565b6120e581611f69565b82525050565b600060208201905061210060008301846120dc565b92915050565b6000806040838503121561211d5761211c611da7565b5b600061212b8582860161209a565b925050602061213c85828601611dfa565b9150509250929050565b60006020828403121561215c5761215b611da7565b5b600061216a84828501611f8a565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121c68261217d565b810181811067ffffffffffffffff821117156121e5576121e461218e565b5b80604052505050565b60006121f8611d9d565b905061220482826121bd565b919050565b600067ffffffffffffffff8211156122245761222361218e565b5b61222d8261217d565b9050602081019050919050565b82818337600083830152505050565b600061225c61225784612209565b6121ee565b90508281526020810184848401111561227857612277612178565b5b61228384828561223a565b509392505050565b600082601f8301126122a05761229f612173565b5b81356122b0848260208601612249565b91505092915050565b6000806000606084860312156122d2576122d1611da7565b5b60006122e086828701611dfa565b93505060206122f186828701611f8a565b925050604084013567ffffffffffffffff81111561231257612311611dac565b5b61231e8682870161228b565b9150509250925092565b6000806040838503121561233f5761233e611da7565b5b600061234d85828601611dfa565b925050602061235e85828601611f8a565b9150509250929050565b600082825260208201905092915050565b7f4261726b656570657273206861766520746f20626520736574206279206f776e60008201527f6572730000000000000000000000000000000000000000000000000000000000602082015250565b60006123d5602383612368565b91506123e082612379565b604082019050919050565b60006020820190508181036000830152612404816123c8565b9050919050565b7f20204f6e6c79206f776e6572732061726520616c6c6f77656420746f20646f2060008201527f7468697300000000000000000000000000000000000000000000000000000000602082015250565b6000612467602483612368565b91506124728261240b565b604082019050919050565b600060208201905081810360008301526124968161245a565b9050919050565b600081905092915050565b50565b60006124b860008361249d565b91506124c3826124a8565b600082019050919050565b60006124d9826124ab565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000612519601483612368565b9150612524826124e3565b602082019050919050565b600060208201905081810360008301526125488161250c565b9050919050565b7f4f776e6572732063616e206f6e6c792072656e6f756e6365207468656d73656c60008201527f76657320616761696e0000000000000000000000000000000000000000000000602082015250565b60006125ab602983612368565b91506125b68261254f565b604082019050919050565b600060208201905081810360008301526125da8161259e565b9050919050565b7f2054686520626172206973206f70656e656420616e6420636c6f73656420627960008201527f206261726b656570657273000000000000000000000000000000000000000000602082015250565b600061263d602b83612368565b9150612648826125e1565b604082019050919050565b6000602082019050818103600083015261266c81612630565b9050919050565b7f20426565722070726963652063616e206f6e6c79206265206368616e6765642060008201527f7768656e207468652062617220697320636c6f73656400000000000000000000602082015250565b60006126cf603683612368565b91506126da82612673565b604082019050919050565b600060208201905081810360008301526126fe816126c2565b9050919050565b7f20426565722070726963652063616e206f6e6c79206265206368616e6765642060008201527f6279206f776e6572732000000000000000000000000000000000000000000000602082015250565b6000612761602a83612368565b915061276c82612705565b604082019050919050565b6000602082019050818103600083015261279081612754565b9050919050565b60006040820190506127ac6000830185612059565b6127b960208301846120dc565b9392505050565b6127c981611ec1565b81146127d457600080fd5b50565b6000815190506127e6816127c0565b92915050565b60006020828403121561280257612801611da7565b5b6000612810848285016127d7565b91505092915050565b7f4661696c656420746f207472616e7366657220746f6b656e7300000000000000600082015250565b600061284f601983612368565b915061285a82612819565b602082019050919050565b6000602082019050818103600083015261287e81612842565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128bf82611f69565b91506128ca83611f69565b92508282039050818111156128e2576128e1612885565b5b92915050565b7f4f6e6c79206f776e6572732063616e20616464206e6577206f776e6572730000600082015250565b600061291e601e83612368565b9150612929826128e8565b602082019050919050565b6000602082019050818103600083015261294d81612911565b9050919050565b7f546869732063616e206f6e6c7920626520646f6e65206279206f776e65727300600082015250565b600061298a601f83612368565b915061299582612954565b602082019050919050565b600060208201905081810360008301526129b98161297d565b9050919050565b7f57726f6e6720746f6b656e000000000000000000000000000000000000000000600082015250565b60006129f6600b83612368565b9150612a01826129c0565b602082019050919050565b60006020820190508181036000830152612a25816129e9565b9050919050565b7f4f6e6c792074686520746f6b656e206f776e65722063616e20737570706c7900600082015250565b6000612a62601f83612368565b9150612a6d82612a2c565b602082019050919050565b60006020820190508181036000830152612a9181612a55565b9050919050565b7f4f6e6c7920637573746f6d6572732063616e206f726465720000000000000000600082015250565b6000612ace601883612368565b9150612ad982612a98565b602082019050919050565b60006020820190508181036000830152612afd81612ac1565b9050919050565b7f42617220697320636c6f73656400000000000000000000000000000000000000600082015250565b6000612b3a600d83612368565b9150612b4582612b04565b602082019050919050565b60006020820190508181036000830152612b6981612b2d565b9050919050565b6000612b7b82611f69565b9150612b8683611f69565b9250828201905080821115612b9e57612b9d612885565b5b92915050565b7f204265657220707269636520686173206e6f74206265656e2073657400000000600082015250565b6000612bda601c83612368565b9150612be582612ba4565b602082019050919050565b60006020820190508181036000830152612c0981612bcd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c4a82611f69565b9150612c5583611f69565b925082612c6557612c64612c10565b5b828206905092915050565b6000612c7b82611f69565b9150612c8683611f69565b925082612c9657612c95612c10565b5b828204905092915050565b7f4661696c656420746f207472616e736665720000000000000000000000000000600082015250565b6000612cd7601283612368565b9150612ce282612ca1565b602082019050919050565b60006020820190508181036000830152612d0681612cca565b9050919050565b7f20426565722063616e206f6e6c7920626520736572766564207768696c65207460008201527f686520626172206973206f70656e000000000000000000000000000000000000602082015250565b6000612d69602e83612368565b9150612d7482612d0d565b604082019050919050565b60006020820190508181036000830152612d9881612d5c565b9050919050565b7f204f6e6c79206261726b6565706572732063616e207365727665206265657200600082015250565b6000612dd5601f83612368565b9150612de082612d9f565b602082019050919050565b60006020820190508181036000830152612e0481612dc8565b9050919050565b7f2054686520637573746f6d657220646964206e6f74206f72646572207468617460008201527f206d756368210000000000000000000000000000000000000000000000000000602082015250565b6000612e67602683612368565b9150612e7282612e0b565b604082019050919050565b60006020820190508181036000830152612e9681612e5a565b9050919050565b7f4261726b6565706572732063616e2072656e6f756e6365207468656d73656c7660008201527f6573000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ef9602283612368565b9150612f0482612e9d565b604082019050919050565b60006020820190508181036000830152612f2881612eec565b9050919050565b7f4261726b6565706572732063616e206265207265766f6b6564206279206f776e60008201527f6572730000000000000000000000000000000000000000000000000000000000602082015250565b6000612f8b602383612368565b9150612f9682612f2f565b604082019050919050565b60006020820190508181036000830152612fba81612f7e565b9050919050565b6000604082019050612fd66000830185612059565b612fe36020830184611f01565b939250505056fea2646970667358221220d3645045bc1fbba2d5ac4e8f8745787470226120abe7dce1307ea339cc5c6bb064736f6c634300081a0033","sourceMap":"264:6956:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1678:223;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2565:202:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;356:50:10;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6939:274;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;315:34;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2774:119;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3810:120:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1191:214:10;;;;;;;;;;;;;:::i;:::-;;6007:91;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3230:198;;;;;;;;;;;;;:::i;:::-;;3436:86;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4226:136:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;859:112:10;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5328:245:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5735:264:10;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5204:282;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;979:204;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2537:195;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5540:113;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3618:776;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2854:136:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2187:49;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6359:361:10;;;:::i;:::-;;4585:398;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2147:223;;;;;;;;;;;;;:::i;:::-;;1550:120;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4642:138:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;478:22:10;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1909:230;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;507:22;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3034:188;;;;;;;;;;;;;:::i;:::-;;413:58;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1678:223;1745:26;388:18;1760:10;1745:7;:26::i;:::-;1737:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;1823:30;449:22;1845:7;1823:10;:30::i;:::-;;1870:23;1885:7;1870:23;;;;;;:::i;:::-;;;;;;;;1678:223;:::o;2565:202:5:-;2650:4;2688:32;2673:47;;;:11;:47;;;;:87;;;;2724:36;2748:11;2724:23;:36::i;:::-;2673:87;2666:94;;2565:202;;;:::o;356:50:10:-;388:18;356:50;:::o;6939:274::-;7025:26;388:18;7040:10;7025:7;:26::i;:::-;7017:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;7104:12;7122:8;:13;;7143:6;7122:32;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7103:51;;;7173:7;7165:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;7006:207;6939:274;;:::o;315:34::-;;;;;;;;;;;;;:::o;2774:119::-;2832:7;2867:17;;;;;;;;;;;2852:33;;2774:119;:::o;3810:120:5:-;3875:7;3901:6;:12;3908:4;3901:12;;;;;;;;;;;:22;;;3894:29;;3810:120;;;:::o;1191:214:10:-;1244:26;388:18;1259:10;1244:7;:26::i;:::-;1236:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;1327:30;388:18;1346:10;1327:11;:30::i;:::-;;1373:24;1386:10;1373:24;;;;;;:::i;:::-;;;;;;;;1191:214::o;6007:91::-;6053:7;6080:10;;6073:17;;6007:91;:::o;3230:198::-;3286:30;449:22;3305:10;3286:7;:30::i;:::-;3278:86;;;;;;;;;;;;:::i;:::-;;;;;;;;;3388:5;3375:10;;:18;;;;;;;;;;;;;;;;;;3409:11;;;;;;;;;;3230:198::o;3436:86::-;3480:4;3504:10;;;;;;;;;;;3497:17;;3436:86;:::o;4226:136:5:-;4300:18;4313:4;4300:12;:18::i;:::-;2464:16;2475:4;2464:10;:16::i;:::-;4330:25:::1;4341:4;4347:7;4330:10;:25::i;:::-;;4226:136:::0;;;:::o;859:112:10:-;916:4;940:23;388:18;955:7;940;:23::i;:::-;933:30;;859:112;;;:::o;5328:245:5:-;5443:12;:10;:12::i;:::-;5421:34;;:18;:34;;;5417:102;;5478:30;;;;;;;;;;;;;;5417:102;5529:37;5541:4;5547:18;5529:11;:37::i;:::-;;5328:245;;:::o;5735:264:10:-;5801:10;;;;;;;;;;;5800:11;5792:78;;;;;;;;;;;;:::i;:::-;;;;;;;;;5889:26;388:18;5904:10;5889:7;:26::i;:::-;5881:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5986:5;5973:10;:18;;;;5735:264;:::o;5204:282::-;5288:6;5266;:18;5273:10;5266:18;;;;;;;;;;;;;;;;:28;;5258:37;;;;;;5314:17;;;;;;;;;;;:26;;;5341:10;5353:6;5314:46;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5306:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;5422:6;5400;:18;5407:10;5400:18;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;5457:10;5444:32;;;5469:6;5444:32;;;;;;:::i;:::-;;;;;;;;5204:282;:::o;979:204::-;1042:26;388:18;1057:10;1042:7;:26::i;:::-;1034:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1114:26;388:18;1132:7;1114:10;:26::i;:::-;;1156:19;1167:7;1156:19;;;;;;:::i;:::-;;;;;;;;979:204;:::o;2537:195::-;2616:26;388:18;2631:10;2616:7;:26::i;:::-;2608:70;;;;;;;;;;;;:::i;:::-;;;;;;;;;2719:4;2689:17;;:35;;;;;;;;;;;;;;;;;;2537:195;:::o;5540:113::-;5602:7;5629:6;:16;5636:8;5629:16;;;;;;;;;;;;;;;;5622:23;;5540:113;;;:::o;3618:776::-;3745:17;;;;;;;;;;;3723:40;;:10;:40;;;3715:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;3792:89;3802:5;3792:16;;;;;;:89;3789:598;;3906:25;388:18;3921:9;3906:7;:25::i;:::-;3898:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;4000:5;3987:27;;;4007:6;3987:27;;;;;;:::i;:::-;;;;;;;;3789:598;;;4035:89;4045:5;4035:16;;;;;;:89;4032:355;;4150:30;449:22;4169:10;4150:7;:30::i;:::-;4149:31;:62;;;;;4185:26;388:18;4200:10;4185:7;:26::i;:::-;4184:27;4149:62;4141:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4263:10;;;;;;;;;;;4255:36;;;;;;;;;;;;:::i;:::-;;;;;;;;;4323:6;4306;:13;4313:5;4306:13;;;;;;;;;;;;;;;;:23;;;;;;;:::i;:::-;;;;;;;;4361:5;4349:26;;;4368:6;4349:26;;;;;;:::i;:::-;;;;;;;;4032:355;3789:598;3618:776;;;:::o;2854:136:5:-;2931:4;2954:6;:12;2961:4;2954:12;;;;;;;;;;;:20;;:29;2975:7;2954:29;;;;;;;;;;;;;;;;;;;;;;;;;2947:36;;2854:136;;;;:::o;2187:49::-;2232:4;2187:49;;;:::o;6359:361:10:-;6428:1;6415:10;;:14;6407:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;6481:17;;;;;;;;;;;:26;;;6508:10;6557;;6544;;6532:9;:22;;;;:::i;:::-;6521:9;:34;;;;:::i;:::-;6520:47;;;;:::i;:::-;6481:87;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6473:117;;;;;;;;;;;;:::i;:::-;;;;;;;;;6359:361::o;4585:398::-;4663:10;;;;;;;;;;;4655:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;4743:30;449:22;4762:10;4743:7;:30::i;:::-;4735:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;4848:6;4828;:16;4835:8;4828:16;;;;;;;;;;;;;;;;:26;;4820:77;;;;;;;;;;;;:::i;:::-;;;;;;;;;4928:6;4908;:16;4915:8;4908:16;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;4945:17;;;;;;;;;;;:22;;;4968:6;4945:30;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4585:398;;:::o;2147:223::-;2204:30;449:22;2223:10;2204:7;:30::i;:::-;2196:77;;;;;;;;;;;;:::i;:::-;;;;;;;;;2284:34;449:22;2307:10;2284:11;:34::i;:::-;;2334:28;2351:10;2334:28;;;;;;:::i;:::-;;;;;;;;2147:223::o;1550:120::-;1611:4;1635:27;449:22;1654:7;1635;:27::i;:::-;1628:34;;1550:120;;;:::o;4642:138:5:-;4717:18;4730:4;4717:12;:18::i;:::-;2464:16;2475:4;2464:10;:16::i;:::-;4747:26:::1;4759:4;4765:7;4747:11;:26::i;:::-;;4642:138:::0;;;:::o;478:22:10:-;;;;;;;;;;;;;:::o;1909:230::-;1979:26;388:18;1994:10;1979:7;:26::i;:::-;1971:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;2056:34;449:22;2079:10;2056:11;:34::i;:::-;;2106:25;2123:7;2106:25;;;;;;:::i;:::-;;;;;;;;1909:230;:::o;507:22::-;;;;:::o;3034:188::-;3081:30;449:22;3100:10;3081:7;:30::i;:::-;3073:86;;;;;;;;;;;;:::i;:::-;;;;;;;;;3183:4;3170:10;;:17;;;;;;;;;;;;;;;;;;3203:11;;;;;;;;;;3034:188::o;413:58::-;449:22;413:58;:::o;6179:316:5:-;6256:4;6277:22;6285:4;6291:7;6277;:22::i;:::-;6272:217;;6347:4;6315:6;:12;6322:4;6315:12;;;;;;;;;;;:20;;:29;6336:7;6315:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;6397:12;:10;:12::i;:::-;6370:40;;6388:7;6370:40;;6382:4;6370:40;;;;;;;;;;6431:4;6424:11;;;;6272:217;6473:5;6466:12;;6179:316;;;;;:::o;763:146:8:-;839:4;877:25;862:40;;;:11;:40;;;;855:47;;763:146;;;:::o;6732:317:5:-;6810:4;6830:22;6838:4;6844:7;6830;:22::i;:::-;6826:217;;;6900:5;6868:6;:12;6875:4;6868:12;;;;;;;;;;;:20;;:29;6889:7;6868:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;6951:12;:10;:12::i;:::-;6924:40;;6942:7;6924:40;;6936:4;6924:40;;;;;;;;;;6985:4;6978:11;;;;6826:217;7027:5;7020:12;;6732:317;;;;;:::o;3199:103::-;3265:30;3276:4;3282:12;:10;:12::i;:::-;3265:10;:30::i;:::-;3199:103;:::o;656:96:7:-;709:7;735:10;728:17;;656:96;:::o;3432:197:5:-;3520:22;3528:4;3534:7;3520;:22::i;:::-;3515:108;;3598:7;3607:4;3565:47;;;;;;;;;;;;:::i;:::-;;;;;;;;3515:108;3432:197;;:::o;7:75:11:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:149::-;1212:7;1252:66;1245:5;1241:78;1230:89;;1176:149;;;:::o;1331:120::-;1403:23;1420:5;1403:23;:::i;:::-;1396:5;1393:34;1383:62;;1441:1;1438;1431:12;1383:62;1331:120;:::o;1457:137::-;1502:5;1540:6;1527:20;1518:29;;1556:32;1582:5;1556:32;:::i;:::-;1457:137;;;;:::o;1600:327::-;1658:6;1707:2;1695:9;1686:7;1682:23;1678:32;1675:119;;;1713:79;;:::i;:::-;1675:119;1833:1;1858:52;1902:7;1893:6;1882:9;1878:22;1858:52;:::i;:::-;1848:62;;1804:116;1600:327;;;;:::o;1933:90::-;1967:7;2010:5;2003:13;1996:21;1985:32;;1933:90;;;:::o;2029:109::-;2110:21;2125:5;2110:21;:::i;:::-;2105:3;2098:34;2029:109;;:::o;2144:210::-;2231:4;2269:2;2258:9;2254:18;2246:26;;2282:65;2344:1;2333:9;2329:17;2320:6;2282:65;:::i;:::-;2144:210;;;;:::o;2360:77::-;2397:7;2426:5;2415:16;;2360:77;;;:::o;2443:118::-;2530:24;2548:5;2530:24;:::i;:::-;2525:3;2518:37;2443:118;;:::o;2567:222::-;2660:4;2698:2;2687:9;2683:18;2675:26;;2711:71;2779:1;2768:9;2764:17;2755:6;2711:71;:::i;:::-;2567:222;;;;:::o;2795:104::-;2840:7;2869:24;2887:5;2869:24;:::i;:::-;2858:35;;2795:104;;;:::o;2905:138::-;2986:32;3012:5;2986:32;:::i;:::-;2979:5;2976:43;2966:71;;3033:1;3030;3023:12;2966:71;2905:138;:::o;3049:155::-;3103:5;3141:6;3128:20;3119:29;;3157:41;3192:5;3157:41;:::i;:::-;3049:155;;;;:::o;3210:77::-;3247:7;3276:5;3265:16;;3210:77;;;:::o;3293:122::-;3366:24;3384:5;3366:24;:::i;:::-;3359:5;3356:35;3346:63;;3405:1;3402;3395:12;3346:63;3293:122;:::o;3421:139::-;3467:5;3505:6;3492:20;3483:29;;3521:33;3548:5;3521:33;:::i;:::-;3421:139;;;;:::o;3566:490::-;3642:6;3650;3699:2;3687:9;3678:7;3674:23;3670:32;3667:119;;;3705:79;;:::i;:::-;3667:119;3825:1;3850:61;3903:7;3894:6;3883:9;3879:22;3850:61;:::i;:::-;3840:71;;3796:125;3960:2;3986:53;4031:7;4022:6;4011:9;4007:22;3986:53;:::i;:::-;3976:63;;3931:118;3566:490;;;;;:::o;4062:60::-;4090:3;4111:5;4104:12;;4062:60;;;:::o;4128:142::-;4178:9;4211:53;4229:34;4238:24;4256:5;4238:24;:::i;:::-;4229:34;:::i;:::-;4211:53;:::i;:::-;4198:66;;4128:142;;;:::o;4276:126::-;4326:9;4359:37;4390:5;4359:37;:::i;:::-;4346:50;;4276:126;;;:::o;4408:143::-;4475:9;4508:37;4539:5;4508:37;:::i;:::-;4495:50;;4408:143;;;:::o;4557:165::-;4661:54;4709:5;4661:54;:::i;:::-;4656:3;4649:67;4557:165;;:::o;4728:256::-;4838:4;4876:2;4865:9;4861:18;4853:26;;4889:88;4974:1;4963:9;4959:17;4950:6;4889:88;:::i;:::-;4728:256;;;;:::o;4990:118::-;5077:24;5095:5;5077:24;:::i;:::-;5072:3;5065:37;4990:118;;:::o;5114:222::-;5207:4;5245:2;5234:9;5230:18;5222:26;;5258:71;5326:1;5315:9;5311:17;5302:6;5258:71;:::i;:::-;5114:222;;;;:::o;5342:122::-;5415:24;5433:5;5415:24;:::i;:::-;5408:5;5405:35;5395:63;;5454:1;5451;5444:12;5395:63;5342:122;:::o;5470:139::-;5516:5;5554:6;5541:20;5532:29;;5570:33;5597:5;5570:33;:::i;:::-;5470:139;;;;:::o;5615:329::-;5674:6;5723:2;5711:9;5702:7;5698:23;5694:32;5691:119;;;5729:79;;:::i;:::-;5691:119;5849:1;5874:53;5919:7;5910:6;5899:9;5895:22;5874:53;:::i;:::-;5864:63;;5820:117;5615:329;;;;:::o;5950:118::-;6037:24;6055:5;6037:24;:::i;:::-;6032:3;6025:37;5950:118;;:::o;6074:222::-;6167:4;6205:2;6194:9;6190:18;6182:26;;6218:71;6286:1;6275:9;6271:17;6262:6;6218:71;:::i;:::-;6074:222;;;;:::o;6302:474::-;6370:6;6378;6427:2;6415:9;6406:7;6402:23;6398:32;6395:119;;;6433:79;;:::i;:::-;6395:119;6553:1;6578:53;6623:7;6614:6;6603:9;6599:22;6578:53;:::i;:::-;6568:63;;6524:117;6680:2;6706:53;6751:7;6742:6;6731:9;6727:22;6706:53;:::i;:::-;6696:63;;6651:118;6302:474;;;;;:::o;6782:329::-;6841:6;6890:2;6878:9;6869:7;6865:23;6861:32;6858:119;;;6896:79;;:::i;:::-;6858:119;7016:1;7041:53;7086:7;7077:6;7066:9;7062:22;7041:53;:::i;:::-;7031:63;;6987:117;6782:329;;;;:::o;7117:117::-;7226:1;7223;7216:12;7240:117;7349:1;7346;7339:12;7363:102;7404:6;7455:2;7451:7;7446:2;7439:5;7435:14;7431:28;7421:38;;7363:102;;;:::o;7471:180::-;7519:77;7516:1;7509:88;7616:4;7613:1;7606:15;7640:4;7637:1;7630:15;7657:281;7740:27;7762:4;7740:27;:::i;:::-;7732:6;7728:40;7870:6;7858:10;7855:22;7834:18;7822:10;7819:34;7816:62;7813:88;;;7881:18;;:::i;:::-;7813:88;7921:10;7917:2;7910:22;7700:238;7657:281;;:::o;7944:129::-;7978:6;8005:20;;:::i;:::-;7995:30;;8034:33;8062:4;8054:6;8034:33;:::i;:::-;7944:129;;;:::o;8079:307::-;8140:4;8230:18;8222:6;8219:30;8216:56;;;8252:18;;:::i;:::-;8216:56;8290:29;8312:6;8290:29;:::i;:::-;8282:37;;8374:4;8368;8364:15;8356:23;;8079:307;;;:::o;8392:148::-;8490:6;8485:3;8480;8467:30;8531:1;8522:6;8517:3;8513:16;8506:27;8392:148;;;:::o;8546:423::-;8623:5;8648:65;8664:48;8705:6;8664:48;:::i;:::-;8648:65;:::i;:::-;8639:74;;8736:6;8729:5;8722:21;8774:4;8767:5;8763:16;8812:3;8803:6;8798:3;8794:16;8791:25;8788:112;;;8819:79;;:::i;:::-;8788:112;8909:54;8956:6;8951:3;8946;8909:54;:::i;:::-;8629:340;8546:423;;;;;:::o;8988:338::-;9043:5;9092:3;9085:4;9077:6;9073:17;9069:27;9059:122;;9100:79;;:::i;:::-;9059:122;9217:6;9204:20;9242:78;9316:3;9308:6;9301:4;9293:6;9289:17;9242:78;:::i;:::-;9233:87;;9049:277;8988:338;;;;:::o;9332:797::-;9418:6;9426;9434;9483:2;9471:9;9462:7;9458:23;9454:32;9451:119;;;9489:79;;:::i;:::-;9451:119;9609:1;9634:53;9679:7;9670:6;9659:9;9655:22;9634:53;:::i;:::-;9624:63;;9580:117;9736:2;9762:53;9807:7;9798:6;9787:9;9783:22;9762:53;:::i;:::-;9752:63;;9707:118;9892:2;9881:9;9877:18;9864:32;9923:18;9915:6;9912:30;9909:117;;;9945:79;;:::i;:::-;9909:117;10050:62;10104:7;10095:6;10084:9;10080:22;10050:62;:::i;:::-;10040:72;;9835:287;9332:797;;;;;:::o;10135:474::-;10203:6;10211;10260:2;10248:9;10239:7;10235:23;10231:32;10228:119;;;10266:79;;:::i;:::-;10228:119;10386:1;10411:53;10456:7;10447:6;10436:9;10432:22;10411:53;:::i;:::-;10401:63;;10357:117;10513:2;10539:53;10584:7;10575:6;10564:9;10560:22;10539:53;:::i;:::-;10529:63;;10484:118;10135:474;;;;;:::o;10615:169::-;10699:11;10733:6;10728:3;10721:19;10773:4;10768:3;10764:14;10749:29;;10615:169;;;;:::o;10790:222::-;10930:34;10926:1;10918:6;10914:14;10907:58;10999:5;10994:2;10986:6;10982:15;10975:30;10790:222;:::o;11018:366::-;11160:3;11181:67;11245:2;11240:3;11181:67;:::i;:::-;11174:74;;11257:93;11346:3;11257:93;:::i;:::-;11375:2;11370:3;11366:12;11359:19;;11018:366;;;:::o;11390:419::-;11556:4;11594:2;11583:9;11579:18;11571:26;;11643:9;11637:4;11633:20;11629:1;11618:9;11614:17;11607:47;11671:131;11797:4;11671:131;:::i;:::-;11663:139;;11390:419;;;:::o;11815:223::-;11955:34;11951:1;11943:6;11939:14;11932:58;12024:6;12019:2;12011:6;12007:15;12000:31;11815:223;:::o;12044:366::-;12186:3;12207:67;12271:2;12266:3;12207:67;:::i;:::-;12200:74;;12283:93;12372:3;12283:93;:::i;:::-;12401:2;12396:3;12392:12;12385:19;;12044:366;;;:::o;12416:419::-;12582:4;12620:2;12609:9;12605:18;12597:26;;12669:9;12663:4;12659:20;12655:1;12644:9;12640:17;12633:47;12697:131;12823:4;12697:131;:::i;:::-;12689:139;;12416:419;;;:::o;12841:147::-;12942:11;12979:3;12964:18;;12841:147;;;;:::o;12994:114::-;;:::o;13114:398::-;13273:3;13294:83;13375:1;13370:3;13294:83;:::i;:::-;13287:90;;13386:93;13475:3;13386:93;:::i;:::-;13504:1;13499:3;13495:11;13488:18;;13114:398;;;:::o;13518:379::-;13702:3;13724:147;13867:3;13724:147;:::i;:::-;13717:154;;13888:3;13881:10;;13518:379;;;:::o;13903:170::-;14043:22;14039:1;14031:6;14027:14;14020:46;13903:170;:::o;14079:366::-;14221:3;14242:67;14306:2;14301:3;14242:67;:::i;:::-;14235:74;;14318:93;14407:3;14318:93;:::i;:::-;14436:2;14431:3;14427:12;14420:19;;14079:366;;;:::o;14451:419::-;14617:4;14655:2;14644:9;14640:18;14632:26;;14704:9;14698:4;14694:20;14690:1;14679:9;14675:17;14668:47;14732:131;14858:4;14732:131;:::i;:::-;14724:139;;14451:419;;;:::o;14876:228::-;15016:34;15012:1;15004:6;15000:14;14993:58;15085:11;15080:2;15072:6;15068:15;15061:36;14876:228;:::o;15110:366::-;15252:3;15273:67;15337:2;15332:3;15273:67;:::i;:::-;15266:74;;15349:93;15438:3;15349:93;:::i;:::-;15467:2;15462:3;15458:12;15451:19;;15110:366;;;:::o;15482:419::-;15648:4;15686:2;15675:9;15671:18;15663:26;;15735:9;15729:4;15725:20;15721:1;15710:9;15706:17;15699:47;15763:131;15889:4;15763:131;:::i;:::-;15755:139;;15482:419;;;:::o;15907:230::-;16047:34;16043:1;16035:6;16031:14;16024:58;16116:13;16111:2;16103:6;16099:15;16092:38;15907:230;:::o;16143:366::-;16285:3;16306:67;16370:2;16365:3;16306:67;:::i;:::-;16299:74;;16382:93;16471:3;16382:93;:::i;:::-;16500:2;16495:3;16491:12;16484:19;;16143:366;;;:::o;16515:419::-;16681:4;16719:2;16708:9;16704:18;16696:26;;16768:9;16762:4;16758:20;16754:1;16743:9;16739:17;16732:47;16796:131;16922:4;16796:131;:::i;:::-;16788:139;;16515:419;;;:::o;16940:241::-;17080:34;17076:1;17068:6;17064:14;17057:58;17149:24;17144:2;17136:6;17132:15;17125:49;16940:241;:::o;17187:366::-;17329:3;17350:67;17414:2;17409:3;17350:67;:::i;:::-;17343:74;;17426:93;17515:3;17426:93;:::i;:::-;17544:2;17539:3;17535:12;17528:19;;17187:366;;;:::o;17559:419::-;17725:4;17763:2;17752:9;17748:18;17740:26;;17812:9;17806:4;17802:20;17798:1;17787:9;17783:17;17776:47;17840:131;17966:4;17840:131;:::i;:::-;17832:139;;17559:419;;;:::o;17984:229::-;18124:34;18120:1;18112:6;18108:14;18101:58;18193:12;18188:2;18180:6;18176:15;18169:37;17984:229;:::o;18219:366::-;18361:3;18382:67;18446:2;18441:3;18382:67;:::i;:::-;18375:74;;18458:93;18547:3;18458:93;:::i;:::-;18576:2;18571:3;18567:12;18560:19;;18219:366;;;:::o;18591:419::-;18757:4;18795:2;18784:9;18780:18;18772:26;;18844:9;18838:4;18834:20;18830:1;18819:9;18815:17;18808:47;18872:131;18998:4;18872:131;:::i;:::-;18864:139;;18591:419;;;:::o;19016:332::-;19137:4;19175:2;19164:9;19160:18;19152:26;;19188:71;19256:1;19245:9;19241:17;19232:6;19188:71;:::i;:::-;19269:72;19337:2;19326:9;19322:18;19313:6;19269:72;:::i;:::-;19016:332;;;;;:::o;19354:116::-;19424:21;19439:5;19424:21;:::i;:::-;19417:5;19414:32;19404:60;;19460:1;19457;19450:12;19404:60;19354:116;:::o;19476:137::-;19530:5;19561:6;19555:13;19546:22;;19577:30;19601:5;19577:30;:::i;:::-;19476:137;;;;:::o;19619:345::-;19686:6;19735:2;19723:9;19714:7;19710:23;19706:32;19703:119;;;19741:79;;:::i;:::-;19703:119;19861:1;19886:61;19939:7;19930:6;19919:9;19915:22;19886:61;:::i;:::-;19876:71;;19832:125;19619:345;;;;:::o;19970:175::-;20110:27;20106:1;20098:6;20094:14;20087:51;19970:175;:::o;20151:366::-;20293:3;20314:67;20378:2;20373:3;20314:67;:::i;:::-;20307:74;;20390:93;20479:3;20390:93;:::i;:::-;20508:2;20503:3;20499:12;20492:19;;20151:366;;;:::o;20523:419::-;20689:4;20727:2;20716:9;20712:18;20704:26;;20776:9;20770:4;20766:20;20762:1;20751:9;20747:17;20740:47;20804:131;20930:4;20804:131;:::i;:::-;20796:139;;20523:419;;;:::o;20948:180::-;20996:77;20993:1;20986:88;21093:4;21090:1;21083:15;21117:4;21114:1;21107:15;21134:194;21174:4;21194:20;21212:1;21194:20;:::i;:::-;21189:25;;21228:20;21246:1;21228:20;:::i;:::-;21223:25;;21272:1;21269;21265:9;21257:17;;21296:1;21290:4;21287:11;21284:37;;;21301:18;;:::i;:::-;21284:37;21134:194;;;;:::o;21334:180::-;21474:32;21470:1;21462:6;21458:14;21451:56;21334:180;:::o;21520:366::-;21662:3;21683:67;21747:2;21742:3;21683:67;:::i;:::-;21676:74;;21759:93;21848:3;21759:93;:::i;:::-;21877:2;21872:3;21868:12;21861:19;;21520:366;;;:::o;21892:419::-;22058:4;22096:2;22085:9;22081:18;22073:26;;22145:9;22139:4;22135:20;22131:1;22120:9;22116:17;22109:47;22173:131;22299:4;22173:131;:::i;:::-;22165:139;;21892:419;;;:::o;22317:181::-;22457:33;22453:1;22445:6;22441:14;22434:57;22317:181;:::o;22504:366::-;22646:3;22667:67;22731:2;22726:3;22667:67;:::i;:::-;22660:74;;22743:93;22832:3;22743:93;:::i;:::-;22861:2;22856:3;22852:12;22845:19;;22504:366;;;:::o;22876:419::-;23042:4;23080:2;23069:9;23065:18;23057:26;;23129:9;23123:4;23119:20;23115:1;23104:9;23100:17;23093:47;23157:131;23283:4;23157:131;:::i;:::-;23149:139;;22876:419;;;:::o;23301:161::-;23441:13;23437:1;23429:6;23425:14;23418:37;23301:161;:::o;23468:366::-;23610:3;23631:67;23695:2;23690:3;23631:67;:::i;:::-;23624:74;;23707:93;23796:3;23707:93;:::i;:::-;23825:2;23820:3;23816:12;23809:19;;23468:366;;;:::o;23840:419::-;24006:4;24044:2;24033:9;24029:18;24021:26;;24093:9;24087:4;24083:20;24079:1;24068:9;24064:17;24057:47;24121:131;24247:4;24121:131;:::i;:::-;24113:139;;23840:419;;;:::o;24265:181::-;24405:33;24401:1;24393:6;24389:14;24382:57;24265:181;:::o;24452:366::-;24594:3;24615:67;24679:2;24674:3;24615:67;:::i;:::-;24608:74;;24691:93;24780:3;24691:93;:::i;:::-;24809:2;24804:3;24800:12;24793:19;;24452:366;;;:::o;24824:419::-;24990:4;25028:2;25017:9;25013:18;25005:26;;25077:9;25071:4;25067:20;25063:1;25052:9;25048:17;25041:47;25105:131;25231:4;25105:131;:::i;:::-;25097:139;;24824:419;;;:::o;25249:174::-;25389:26;25385:1;25377:6;25373:14;25366:50;25249:174;:::o;25429:366::-;25571:3;25592:67;25656:2;25651:3;25592:67;:::i;:::-;25585:74;;25668:93;25757:3;25668:93;:::i;:::-;25786:2;25781:3;25777:12;25770:19;;25429:366;;;:::o;25801:419::-;25967:4;26005:2;25994:9;25990:18;25982:26;;26054:9;26048:4;26044:20;26040:1;26029:9;26025:17;26018:47;26082:131;26208:4;26082:131;:::i;:::-;26074:139;;25801:419;;;:::o;26226:163::-;26366:15;26362:1;26354:6;26350:14;26343:39;26226:163;:::o;26395:366::-;26537:3;26558:67;26622:2;26617:3;26558:67;:::i;:::-;26551:74;;26634:93;26723:3;26634:93;:::i;:::-;26752:2;26747:3;26743:12;26736:19;;26395:366;;;:::o;26767:419::-;26933:4;26971:2;26960:9;26956:18;26948:26;;27020:9;27014:4;27010:20;27006:1;26995:9;26991:17;26984:47;27048:131;27174:4;27048:131;:::i;:::-;27040:139;;26767:419;;;:::o;27192:191::-;27232:3;27251:20;27269:1;27251:20;:::i;:::-;27246:25;;27285:20;27303:1;27285:20;:::i;:::-;27280:25;;27328:1;27325;27321:9;27314:16;;27349:3;27346:1;27343:10;27340:36;;;27356:18;;:::i;:::-;27340:36;27192:191;;;;:::o;27389:178::-;27529:30;27525:1;27517:6;27513:14;27506:54;27389:178;:::o;27573:366::-;27715:3;27736:67;27800:2;27795:3;27736:67;:::i;:::-;27729:74;;27812:93;27901:3;27812:93;:::i;:::-;27930:2;27925:3;27921:12;27914:19;;27573:366;;;:::o;27945:419::-;28111:4;28149:2;28138:9;28134:18;28126:26;;28198:9;28192:4;28188:20;28184:1;28173:9;28169:17;28162:47;28226:131;28352:4;28226:131;:::i;:::-;28218:139;;27945:419;;;:::o;28370:180::-;28418:77;28415:1;28408:88;28515:4;28512:1;28505:15;28539:4;28536:1;28529:15;28556:176;28588:1;28605:20;28623:1;28605:20;:::i;:::-;28600:25;;28639:20;28657:1;28639:20;:::i;:::-;28634:25;;28678:1;28668:35;;28683:18;;:::i;:::-;28668:35;28724:1;28721;28717:9;28712:14;;28556:176;;;;:::o;28738:185::-;28778:1;28795:20;28813:1;28795:20;:::i;:::-;28790:25;;28829:20;28847:1;28829:20;:::i;:::-;28824:25;;28868:1;28858:35;;28873:18;;:::i;:::-;28858:35;28915:1;28912;28908:9;28903:14;;28738:185;;;;:::o;28929:168::-;29069:20;29065:1;29057:6;29053:14;29046:44;28929:168;:::o;29103:366::-;29245:3;29266:67;29330:2;29325:3;29266:67;:::i;:::-;29259:74;;29342:93;29431:3;29342:93;:::i;:::-;29460:2;29455:3;29451:12;29444:19;;29103:366;;;:::o;29475:419::-;29641:4;29679:2;29668:9;29664:18;29656:26;;29728:9;29722:4;29718:20;29714:1;29703:9;29699:17;29692:47;29756:131;29882:4;29756:131;:::i;:::-;29748:139;;29475:419;;;:::o;29900:233::-;30040:34;30036:1;30028:6;30024:14;30017:58;30109:16;30104:2;30096:6;30092:15;30085:41;29900:233;:::o;30139:366::-;30281:3;30302:67;30366:2;30361:3;30302:67;:::i;:::-;30295:74;;30378:93;30467:3;30378:93;:::i;:::-;30496:2;30491:3;30487:12;30480:19;;30139:366;;;:::o;30511:419::-;30677:4;30715:2;30704:9;30700:18;30692:26;;30764:9;30758:4;30754:20;30750:1;30739:9;30735:17;30728:47;30792:131;30918:4;30792:131;:::i;:::-;30784:139;;30511:419;;;:::o;30936:181::-;31076:33;31072:1;31064:6;31060:14;31053:57;30936:181;:::o;31123:366::-;31265:3;31286:67;31350:2;31345:3;31286:67;:::i;:::-;31279:74;;31362:93;31451:3;31362:93;:::i;:::-;31480:2;31475:3;31471:12;31464:19;;31123:366;;;:::o;31495:419::-;31661:4;31699:2;31688:9;31684:18;31676:26;;31748:9;31742:4;31738:20;31734:1;31723:9;31719:17;31712:47;31776:131;31902:4;31776:131;:::i;:::-;31768:139;;31495:419;;;:::o;31920:225::-;32060:34;32056:1;32048:6;32044:14;32037:58;32129:8;32124:2;32116:6;32112:15;32105:33;31920:225;:::o;32151:366::-;32293:3;32314:67;32378:2;32373:3;32314:67;:::i;:::-;32307:74;;32390:93;32479:3;32390:93;:::i;:::-;32508:2;32503:3;32499:12;32492:19;;32151:366;;;:::o;32523:419::-;32689:4;32727:2;32716:9;32712:18;32704:26;;32776:9;32770:4;32766:20;32762:1;32751:9;32747:17;32740:47;32804:131;32930:4;32804:131;:::i;:::-;32796:139;;32523:419;;;:::o;32948:221::-;33088:34;33084:1;33076:6;33072:14;33065:58;33157:4;33152:2;33144:6;33140:15;33133:29;32948:221;:::o;33175:366::-;33317:3;33338:67;33402:2;33397:3;33338:67;:::i;:::-;33331:74;;33414:93;33503:3;33414:93;:::i;:::-;33532:2;33527:3;33523:12;33516:19;;33175:366;;;:::o;33547:419::-;33713:4;33751:2;33740:9;33736:18;33728:26;;33800:9;33794:4;33790:20;33786:1;33775:9;33771:17;33764:47;33828:131;33954:4;33828:131;:::i;:::-;33820:139;;33547:419;;;:::o;33972:222::-;34112:34;34108:1;34100:6;34096:14;34089:58;34181:5;34176:2;34168:6;34164:15;34157:30;33972:222;:::o;34200:366::-;34342:3;34363:67;34427:2;34422:3;34363:67;:::i;:::-;34356:74;;34439:93;34528:3;34439:93;:::i;:::-;34557:2;34552:3;34548:12;34541:19;;34200:366;;;:::o;34572:419::-;34738:4;34776:2;34765:9;34761:18;34753:26;;34825:9;34819:4;34815:20;34811:1;34800:9;34796:17;34789:47;34853:131;34979:4;34853:131;:::i;:::-;34845:139;;34572:419;;;:::o;34997:332::-;35118:4;35156:2;35145:9;35141:18;35133:26;;35169:71;35237:1;35226:9;35222:17;35213:6;35169:71;:::i;:::-;35250:72;35318:2;35307:9;35303:18;35294:6;35250:72;:::i;:::-;34997:332;;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BarClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BarOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BarkeeperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BarkeeperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BeerCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BeerOrdered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BeerSupplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BARKEEPER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_barIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_beerPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBarkeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"barIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beerTokenContract\",\"outputs\":[{\"internalType\":\"contract BeerToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beerTokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeBar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeerPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBarkeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openBar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"pendingBeer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceBarkeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeBarkeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"serveBeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setBeerPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBeerTokenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"example\\\\BeerBar.sol\":\"BeerBar\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":./=/example/\",\":@openzeppelin/=example/node_modules/@openzeppelin/\"]},\"sources\":{\"example/Address.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\r\\n     * execution of a contract's constructor, its address will be reported as\\r\\n     * not containing a contract.\\r\\n     *\\r\\n     * > It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` into `address payable`. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return payable(account);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x83c83dcfd93e1a04dbde42f40d7aff39a066c1f45e6125d07d6b7a6b47833657\"},\"example/BeerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IBeerToken.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IERC223Recipient.sol\\\";\\r\\n\\r\\ncontract BeerToken is IBeerToken {\\r\\n\\r\\n    address private owner;\\r\\n    uint public total;\\r\\n    mapping(address => uint) public tokens;\\r\\n\\r\\n    constructor() {\\r\\n      owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    // * Default attributes of your token\\r\\n    function name() external view returns (string memory) {\\r\\n      return \\\"Corns\\\";\\r\\n    }\\r\\n\\r\\n    function symbol() external view returns (string memory) {\\r\\n      return \\\"Corns\\\";\\r\\n    }\\r\\n\\r\\n    // * Our BeerToken is not divisible\\r\\n    function decimals() external view returns (uint8) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    // * Show the total supply of tokens\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n      return total;\\r\\n    }\\r\\n\\r\\n    // * Show the token balance of the address\\r\\n    function balanceOf(address who) external view returns (uint256) {\\r\\n      return tokens[who];\\r\\n    }\\r\\n\\r\\n    // * Basic functionality for transferring tokens to user.\\r\\n    //   The token contract keeps track of the token balances.\\r\\n    // * Token must not be lost! Make sure they can only be transferred to addresses,\\r\\n    //   who also support the receiving of tokens.\\r\\n    function transfer(address to, uint256 value) external returns (bool success) {\\r\\n      require(tokens[msg.sender] >= value);\\r\\n      bytes memory _empty = hex\\\"00000000\\\";\\r\\n      tokens[msg.sender] = tokens[msg.sender] - value;\\r\\n      tokens[to] = tokens[to] + value;\\r\\n      if(Address.isContract(to)) {\\r\\n         IERC223Recipient(to).tokenReceived(msg.sender, value, _empty);\\r\\n      }\\r\\n      emit Transfer(msg.sender, to, value);\\r\\n      //emit TransferData(_empty);\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value, bytes calldata data) external returns (bool success) {\\r\\n      require(tokens[msg.sender] >= value);\\r\\n      tokens[msg.sender] = tokens[msg.sender] - value;\\r\\n      tokens[to] = tokens[to] + value;\\r\\n      if(Address.isContract(to)) {\\r\\n         IERC223Recipient(to).tokenReceived(msg.sender, value, data);\\r\\n      }\\r\\n      emit Transfer(msg.sender, to, value);\\r\\n      //emit TransferData(_data);\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    // * Tokens can be minted by the owner of the token contract\\r\\n    function mint(address account, uint256 value) external returns (bool success) {\\r\\n      require(owner == msg.sender,\\\"Only owner can mint\\\");\\r\\n      tokens[account] += value;\\r\\n      total += value;\\r\\n      emit Transfer(msg.sender, account, value);\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    // * Tokens can be burned and therefore \\\"destroyed\\\"\\r\\n    function burn(uint256 value) external {\\r\\n      require(tokens[msg.sender] >= value);\\r\\n      tokens[msg.sender] -= value;\\r\\n      total -= value;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x82684d8bc51d5fd41688a681bbf5b8ce6eceafad2a86e1c79248fc7c3f2d62b5\",\"license\":\"MIT\"},\"example/IBeerBar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBeerBar {\\r\\n\\r\\n    // ROLES\\r\\n    // * Only owners can add new owners\\r\\n    // * Owners can only renounce themselves again\\r\\n    function isOwner(address account) external view returns (bool);\\r\\n    function addOwner(address account) external;\\r\\n    function renounceOwner() external;\\r\\n    event OwnerAdded(address account);\\r\\n    event OwnerRemoved(address account);\\r\\n    // * Barkeepers have to be set by owners\\r\\n    // * Barkeepers can be revoked by owners\\r\\n    // * Barkeepers can renounce themselves\\r\\n    function isBarkeeper(address account) external view returns (bool);\\r\\n    function addBarkeeper(address account) external;\\r\\n    function revokeBarkeeper(address account) external;\\r\\n    function renounceBarkeeper() external;\\r\\n    event BarkeeperAdded(address account);\\r\\n    event BarkeeperRemoved(address account);\\r\\n\\r\\n    // * The bar uses its own tokens as local currency.\\r\\n    //   Connect the bar contract with the token contract.\\r\\n    // * This can only be done by owners\\r\\n    function setBeerTokenContractAddress(address addr) external;\\r\\n    // * Show which beer is served\\r\\n    function beerTokenContractAddress() external view returns(address);\\r\\n\\r\\n    // * The bar has opening hours during which beer can be ordered and served\\r\\n    // * The bar is opened and closed by barkeepers\\r\\n    function openBar() external;\\r\\n    function closeBar() external;\\r\\n    function barIsOpen() external view returns (bool);\\r\\n    event BarOpened();\\r\\n    event BarClosed();\\r\\n\\r\\n    // * When new beer is delivered, the token contract owner mints new\\r\\n    //   tokens and transfers them to the bar contract with the string\\r\\n    //   \\\"supply\\\" in the data field (since this is not a beer order)\\r\\n    // * The bar contract emits the event BeerSupplied when receiving\\r\\n    //   beer tokens marked as \\\"supply\\\" (together with beer)\\r\\n    event BeerSupplied(address indexed from, uint256 amount);\\r\\n\\r\\n    // * Beer is ordered by transferring beer tokens to the bar contract\\r\\n    //   with the data field \\\"hex\\\"00000000\\\" (standard transfer);\\r\\n    //   1 token = 1 beer\\r\\n    // * Beer can only be ordered while the bar is open\\r\\n    // * In addition to the internal bookkeeping, the event\\r\\n    //   BeerOrdered is triggered to signal that there is work\\r\\n    event BeerOrdered(address indexed customer, uint256 amount);\\r\\n\\r\\n    // Both, supply and order, have to be implemented in a token fallback function\\r\\n\\r\\n    // * Beer that has been ordered will be served by barkeepers\\r\\n    // * Beer can only be served while the bar is open\\r\\n    // * Served beer has to be burned by the token contract\\r\\n    function serveBeer(address customer, uint amount) external;\\r\\n\\r\\n    // * Orders that haven't yet been processed may be canceled by the\\r\\n    //   customer, who will get back the tokens\\r\\n    // * This triggers the event BeerCanceled\\r\\n    // * Orders can be canceled at any time\\r\\n    function cancelOrder(uint amount) external;\\r\\n    event BeerCanceled(address indexed customer, uint256 amount);\\r\\n\\r\\n    // * Get pending orders for a customer\\r\\n    function pendingBeer(address customer) external view returns (uint256);\\r\\n\\r\\n    // * Beer price can only be changed by owners when the bar is closed\\r\\n    function setBeerPrice(uint256 price) external;\\r\\n    function getBeerPrice() external view returns(uint256);\\r\\n\\r\\n    // * Customers may buy tokens for Ether\\r\\n    // * If the supplied Ether is not divisible by the beer price\\r\\n    //   the rest is kept as a tip. The caller (like the web interface)\\r\\n    //   can check that the value is a multiple of the beer price.\\r\\n    function buyToken() external payable;\\r\\n\\r\\n    // * `amount` (in Wei) of the Ether stored in the contract is transferred to\\r\\n    //   `receiver`, provided `amount` does not exceed the balance of the contract\\r\\n    // * Only owners are allowed to do this\\r\\n    function payout(address payable receiver, uint256 amount) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xb99c7f896102cb2a7e30476364d6f291d47b8b9ff9ad4b7faf5bdc2e7d5f299f\",\"license\":\"MIT\"},\"example/IBeerToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBeerToken {\\n\\n    // * Default attributes of your token\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n\\n    // * Our BeerToken is not divisible\\n    function decimals() external view returns (uint8);\\n\\n    // * Show the total supply of tokens\\n    function totalSupply() external view returns (uint256);\\n    // * Show the token balance of the address\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    // * Basic functionality for transferring tokens to user.\\n    //   The token contract keeps track of the token balances.\\n    // * Token must not be lost! Make sure they can only be transferred to addresses,\\n    //   who also support the receiving of tokens.\\n    function transfer(address to, uint256 value) external returns (bool success);\\n    function transfer(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n    // * Tokens can be minted by the owner of the token contract\\n    function mint(address account, uint256 value) external returns (bool success);\\n\\n    // * Tokens can be burned and therefore \\\"destroyed\\\"\\n    function burn(uint256 value) external;\\n\\n    // * Everytime a token is transferred/balances changed, this event has to be emitted\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\",\"keccak256\":\"0x4d3e9bc0cd7d680bdc0a550d512a8a1bb0d59fe1908040bad292f3d7fd3f0426\",\"license\":\"MIT\"},\"example/IERC223Recipient.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n /**\\r\\n * @title Contract that will work with ERC223 tokens.\\r\\n */\\r\\n \\r\\nabstract contract IERC223Recipient {\\r\\n\\r\\n\\r\\n struct ERC223TransferInfo\\r\\n    {\\r\\n        address token_contract;\\r\\n        address sender;\\r\\n        uint256 value;\\r\\n        bytes   data;\\r\\n    }\\r\\n    \\r\\n    ERC223TransferInfo private tkn;\\r\\n    \\r\\n/**\\r\\n * @dev Standard ERC223 function that will handle incoming token transfers.\\r\\n *\\r\\n * @param _from  Token sender address.\\r\\n * @param _value Amount of tokens.\\r\\n * @param _data  Transaction metadata.\\r\\n */\\r\\n    function tokenReceived(address _from, uint _value, bytes memory _data) public virtual\\r\\n    {\\r\\n        /**\\r\\n         * @dev Note that inside of the token transaction handler the actual sender of token transfer is accessible via the tkn.sender variable\\r\\n         * (analogue of msg.sender for Ether transfers)\\r\\n         * \\r\\n         * tkn.value - is the amount of transferred tokens\\r\\n         * tkn.data  - is the \\\"metadata\\\" of token transfer\\r\\n         * tkn.token_contract is most likely equal to msg.sender because the token contract typically invokes this function\\r\\n        */\\r\\n        tkn.token_contract = msg.sender;\\r\\n        tkn.sender         = _from;\\r\\n        tkn.value          = _value;\\r\\n        tkn.data           = _data;\\r\\n        \\r\\n        // ACTUAL CODE\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd8a4be74a4919d9a8bb7d28596699ad19f808d2604670738e40ca02ca06bfc86\"},\"example/node_modules/@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\"},\"example/node_modules/@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\"},\"example/node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"example/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"example/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"example\\\\BeerBar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IBeerBar.sol\\\";\\r\\nimport \\\"./BeerToken.sol\\\";\\r\\nimport \\\"./IERC223Recipient.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\n\\r\\n//contract BeerBar is IBeerBar, <Token-Recipient>\\r\\ncontract BeerBar is IBeerBar, AccessControl {\\r\\n    BeerToken public beerTokenContract;\\r\\n    bytes32 public constant OWNER = keccak256(\\\"OWNER\\\");\\r\\n    bytes32 public constant BARKEEPER = keccak256(\\\"BARKEEPER\\\");\\r\\n    bool public _barIsOpen;\\r\\n    uint public _beerPrice;\\r\\n\\r\\n    mapping(address => uint) orders;\\r\\n\\r\\n\\r\\n    constructor () {\\r\\n        _grantRole(OWNER, msg.sender);\\r\\n        _grantRole(0x0000000000000000000000000000000000000000000000000000000000000000, msg.sender);\\r\\n    }\\r\\n\\r\\n    // ROLES\\r\\n    // * Only owners can add new owners\\r\\n    // * Owners can only renounce themselves again\\r\\n    function isOwner(address account) external view returns (bool) {\\r\\n        return hasRole(OWNER, account);\\r\\n    }\\r\\n\\r\\n    function addOwner(address account) external {\\r\\n        require(hasRole(OWNER, msg.sender), \\\"Only owners can add new owners\\\");\\r\\n        _grantRole(OWNER, account);\\r\\n        emit OwnerAdded(account);\\r\\n    }\\r\\n\\r\\n    function renounceOwner() external {\\r\\n        require(hasRole(OWNER, msg.sender), \\\"Owners can only renounce themselves again\\\");\\r\\n        _revokeRole(OWNER, msg.sender);\\r\\n        emit OwnerRemoved(msg.sender);\\r\\n    }\\r\\n\\r\\n    // * Barkeepers have to be set by owners\\r\\n    // * Barkeepers can be revoked by owners\\r\\n    // * Barkeepers can renounce themselves\\r\\n    function isBarkeeper(address account) external view returns (bool) {\\r\\n        return hasRole(BARKEEPER, account);\\r\\n    }\\r\\n\\r\\n    function addBarkeeper(address account) external {\\r\\n        require(hasRole(OWNER, msg.sender), \\\"Barkeepers have to be set by owners\\\");\\r\\n         _grantRole(BARKEEPER, account);\\r\\n         emit BarkeeperAdded(account);\\r\\n    }\\r\\n\\r\\n    function revokeBarkeeper(address account) external {\\r\\n        require(hasRole(OWNER, msg.sender), \\\"Barkeepers can be revoked by owners\\\");\\r\\n        _revokeRole(BARKEEPER, msg.sender);\\r\\n        emit BarkeeperRemoved(account);\\r\\n    }\\r\\n\\r\\n    function renounceBarkeeper() external {\\r\\n        require(hasRole(BARKEEPER, msg.sender), \\\"Barkeepers can renounce themselves\\\");\\r\\n        _revokeRole(BARKEEPER, msg.sender);\\r\\n        emit BarkeeperRemoved(msg.sender);\\r\\n    }\\r\\n\\r\\n    // * The bar uses its own tokens as local currency.\\r\\n    //   Connect the bar contract with the token contract.\\r\\n    // * This can only be done by owners\\r\\n    function setBeerTokenContractAddress(address addr) external {\\r\\n        require(hasRole(OWNER, msg.sender), \\\"This can only be done by owners\\\");\\r\\n        beerTokenContract = BeerToken(addr);\\r\\n    }\\r\\n    // * Show which beer is served\\r\\n    function beerTokenContractAddress() external view returns(address) {\\r\\n        return address(beerTokenContract);\\r\\n    }\\r\\n\\r\\n    // * The bar has opening hours during which beer can be ordered and served\\r\\n    // * The bar is opened and closed by barkeepers\\r\\n    function openBar() external {\\r\\n        require(hasRole(BARKEEPER, msg.sender), \\\" The bar is opened and closed by barkeepers\\\");\\r\\n        _barIsOpen = true;\\r\\n        emit BarOpened();\\r\\n    }\\r\\n\\r\\n    function closeBar() external virtual {\\r\\n        require(hasRole(BARKEEPER, msg.sender), \\\" The bar is opened and closed by barkeepers\\\");\\r\\n        _barIsOpen = false;\\r\\n        emit BarClosed();\\r\\n    }\\r\\n\\r\\n    function barIsOpen() external view returns (bool) {\\r\\n        return _barIsOpen;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    // Both, supply and order, have to be implemented in a token fallback function\\r\\n    function tokenReceived(address _from, uint _value, bytes memory _data) public virtual {\\r\\n        require(msg.sender == address(beerTokenContract),\\\"Wrong token\\\");\\r\\n        if(keccak256(_data) == hex\\\"b308cfbb7d2d38db3a215f9728501ac69445a6afbee328cdeae4e23db54b850a\\\") {\\r\\n            require(hasRole(OWNER, tx.origin) ,\\\"Only the token owner can supply\\\");\\r\\n            emit BeerSupplied(_from, _value);\\r\\n        } else if(keccak256(_data) == hex\\\"e8e77626586f73b955364c7b4bbf0bb7f7685ebd40e852b164633a4acbd3244c\\\") {\\r\\n            require(!hasRole(BARKEEPER, msg.sender) && !hasRole(OWNER, msg.sender), \\\"Only customers can order\\\");\\r\\n            require(_barIsOpen, \\\"Bar is closed\\\");\\r\\n            orders[_from] += _value;\\r\\n            emit BeerOrdered(_from, _value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // * Beer that has been ordered will be served by barkeepers\\r\\n    // * Beer can only be served while the bar is open\\r\\n    // * Served beer has to be burned by the token contract\\r\\n    function serveBeer(address customer, uint amount) external {\\r\\n        require(_barIsOpen, \\\" Beer can only be served while the bar is open\\\");\\r\\n        require(hasRole(BARKEEPER, msg.sender), \\\" Only barkeepers can serve beer\\\");\\r\\n        require(orders[customer] >= amount, \\\" The customer did not order that much!\\\");\\r\\n        orders[customer] -= amount;\\r\\n        beerTokenContract.burn(amount);\\r\\n    }\\r\\n\\r\\n    // * Orders that haven't yet been processed may be canceled by the\\r\\n    //   customer, who will get back the tokens\\r\\n    // * This triggers the event BeerCanceled\\r\\n    // * Orders can be canceled at any time\\r\\n    function cancelOrder(uint amount) external {\\r\\n        require(orders[msg.sender] >= amount);\\r\\n        require(beerTokenContract.transfer(msg.sender, amount),\\\"Failed to transfer tokens\\\");\\r\\n        orders[msg.sender] -= amount;\\r\\n        emit BeerCanceled(msg.sender, amount);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    // * Get pending orders for a customer\\r\\n    function pendingBeer(address customer) external view returns (uint256) {\\r\\n        return orders[customer];\\r\\n    }\\r\\n\\r\\n    // * Beer price can only be changed by owners when the bar is closed\\r\\n    function setBeerPrice(uint256 price) external {\\r\\n        require(!_barIsOpen, \\\" Beer price can only be changed when the bar is closed\\\");\\r\\n        require(hasRole(OWNER, msg.sender), \\\" Beer price can only be changed by owners \\\");\\r\\n        _beerPrice = price;\\r\\n    }\\r\\n\\r\\n    function getBeerPrice() external view returns(uint256) {\\r\\n        return _beerPrice;\\r\\n    }\\r\\n\\r\\n    // * Customers may buy tokens for Ether\\r\\n    // * If the supplied Ether is not divisible by the beer price\\r\\n    //   the rest is kept as a tip. The caller (like the web interface)\\r\\n    //   can check that the value is a multiple of the beer price.\\r\\n    function buyToken() external payable {\\r\\n        require(_beerPrice > 0, \\\" Beer price has not been set\\\");\\r\\n        require(beerTokenContract.transfer(msg.sender, (msg.value-(msg.value % _beerPrice))/_beerPrice),\\\"Failed to transfer\\\");\\r\\n        //require(beerTokenContract.mint(msg.sender, (msg.value-(msg.value % _beerPrice))/_beerPrice),\\\"Failed to mint\\\");\\r\\n    }\\r\\n\\r\\n    // * `amount` (in Wei) of the Ether stored in the contract is transferred to\\r\\n    //   `receiver`, provided `amount` does not exceed the balance of the contract\\r\\n    // * Only owners are allowed to do this\\r\\n    function payout(address payable receiver, uint256 amount) external {\\r\\n        require(hasRole(OWNER, msg.sender), \\\"  Only owners are allowed to do this\\\");\\r\\n        (bool success, ) = receiver.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xade3691d48d04c1bafbe1967339307772e75246faf933232ee54b30e28efe001\",\"license\":\"MIT\"}},\"version\":1}"}}},"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> example/IERC223Recipient.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"example/IERC223Recipient.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> example/Address.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"example/Address.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> example/BeerToken.sol:19:5:\n   |\n19 |     function name() external view returns (string memory) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":475,"file":"example/BeerToken.sol","start":390},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> example/BeerToken.sol:23:5:\n   |\n23 |     function symbol() external view returns (string memory) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":570,"file":"example/BeerToken.sol","start":483},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> example/BeerToken.sol:28:5:\n   |\n28 |     function decimals() external view returns (uint8) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":694,"file":"example/BeerToken.sol","start":619},"type":"Warning"}],"sources":{"example/Address.sol":{"id":0},"example/BeerToken.sol":{"id":1},"example/IBeerBar.sol":{"id":2},"example/IBeerToken.sol":{"id":3},"example/IERC223Recipient.sol":{"id":4},"example/node_modules/@openzeppelin/contracts/access/AccessControl.sol":{"id":5},"example/node_modules/@openzeppelin/contracts/access/IAccessControl.sol":{"id":6},"example/node_modules/@openzeppelin/contracts/utils/Context.sol":{"id":7},"example/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol":{"id":8},"example/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol":{"id":9},"example\\BeerBar.sol":{"id":10}}}
