{"contracts":{"SmartBillions.sol":{"BasicToken":{"evm":{"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint representing the amount owned by the passed address.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"BasicToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.6, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 525,562,699,701,703,705,707,709,711,713,715,717\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        msg.sender.transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            msg.sender.transfer(_amount);\\r\\n            if(_amount > 1 finney) {\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            msg.sender.transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5c9f1252b5d6ddf3a78d547090c931424b867fccaf9f2adaa7da50cd6a3525ff\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"ERC20":{"evm":{"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.6, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 525,562,699,701,703,705,707,709,711,713,715,717\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        msg.sender.transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            msg.sender.transfer(_amount);\\r\\n            if(_amount > 1 finney) {\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            msg.sender.transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5c9f1252b5d6ddf3a78d547090c931424b867fccaf9f2adaa7da50cd6a3525ff\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"ERC20Basic":{"evm":{"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"ERC20Basic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.6, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 525,562,699,701,703,705,707,709,711,713,715,717\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        msg.sender.transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            msg.sender.transfer(_amount);\\r\\n            if(_amount > 1 finney) {\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            msg.sender.transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5c9f1252b5d6ddf3a78d547090c931424b867fccaf9f2adaa7da50cd6a3525ff\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"SafeMath":{"evm":{"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600436106023575b60006000fdfea26469706673582212203815be6bfc505255a49e212d85b505b28ec625ee2d76904358e44773132f6f0e64736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x23 JUMPI JUMPDEST PUSH1 0x0 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE ISZERO 0xBE PUSH12 0xFC505255A49E212D85B505B2 DUP15 0xC6 0x25 0xEE 0x2D PUSH23 0x904358E44773132F6F0E64736F6C634300060C00330000 ","sourceMap":"330:254:0:-:0;;;;;;;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.6, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 525,562,699,701,703,705,707,709,711,713,715,717\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        msg.sender.transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            msg.sender.transfer(_amount);\\r\\n            if(_amount > 1 finney) {\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            msg.sender.transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5c9f1252b5d6ddf3a78d547090c931424b867fccaf9f2adaa7da50cd6a3525ff\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"SmartBillions":{"evm":{"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061036f5760003560e01c8063814b3fe0116101c6578063c27509cf116100f7578063de46907111610095578063df1ead821161006f578063df1ead821461119f578063e4cc98a5146111b7578063e73cc2eb146111e3578063e76ece011461124a57610370565b8063de4690711461112f578063de88a3421461115b578063df12b94e1461117357610370565b8063cd88333e116100d1578063cd88333e14611027578063d6d2500814611064578063d9fa933514611090578063dd62ed3e146110a857610370565b8063c27509cf14610fc5578063c416436514610fcf578063cd0a314b14610ffb57610370565b8063a367d99a11610164578063b3470e971161013e578063b3470e9714610f37578063bc85171814610f63578063be1eefbf14610f8f578063bfba902914610f9957610370565b8063a367d99a14610e5b578063a6f9dae114610e87578063a9059cbb14610eda57610370565b8063904d2248116101a0578063904d224814610d2c57806393e84cd914610d9357806395d89b4114610db15780639ce962ca14610e4357610370565b8063814b3fe014610c325780638da5cb5b14610c835780638eecddcf14610cc557610370565b8063380f3087116102a0578063501895ae1161023e57806370a082311161021857806370a0823114610b0c57806370ccd92814610b735780637227c7ce14610b9f578063785ce7ca14610bcb57610370565b8063501895ae14610a2857806366ce3bd214610a795780636b48681814610ae057610370565b806340c73d171161027a57806340c73d1714610919578063413e90e71461096c5780634288d759146109a957806343146f3614610a1057610370565b8063380f3087146108355780633de8d340146108865780633e43b652146108b257610370565b806318160ddd1161030d57806326699576116102e75780632669957614610738578063313ce5671461079b57806331c2b6e6146107c757806337c430881461080957610370565b806318160ddd1461063657806323b872dd146106625780632406e9fa146106df57610370565b8063095ea7b311610349578063095ea7b31461056757806312c8052f146105c457806313e4b51f146105dc57806316d190e31461060a57610370565b806303f9c7931461045357806306fdde03146104985780630751076d1461052a57610370565b5b5b60003411156103d357600160086000505411156103be576103b9600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661128763ffffffff16565b6103ce565b6103cc611af563ffffffff16565b505b610451565b600060086000505414801561042d57506000600360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054115b156104425761044133611b5c63ffffffff16565b5b610450611ee763ffffffff16565b5b005b6104966004803603602081101561046a5760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611287565b005b3480156104a55760006000fd5b506104ae61283e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ef5780820151818401525b6020810190506104d3565b50505050905090810190601f16801561051c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105375760006000fd5b506105656004803603602081101561054f5760006000fd5b810190808035906020019092919050505061287a565b005b3480156105745760006000fd5b506105c26004803603604081101561058c5760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506128e4565b005b3480156105d15760006000fd5b506105da611ee7565b005b3480156105e95760006000fd5b506105f2612a7a565b60405180821515815260200191505060405180910390f35b3480156106175760006000fd5b50610620612b6c565b6040518082815260200191505060405180910390f35b3480156106435760006000fd5b5061064c612b75565b6040518082815260200191505060405180910390f35b34801561066f5760006000fd5b506106dd600480360360608110156106875760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612b7e565b005b610722600480360360208110156106f65760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e8d565b6040518082815260200191505060405180910390f35b6107856004803603604081101561074f5760006000fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ef5565b6040518082815260200191505060405180910390f35b3480156107a85760006000fd5b506107b16132e5565b6040518082815260200191505060405180910390f35b3480156107d45760006000fd5b506107dd6132ea565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108165760006000fd5b5061081f613310565b6040518082815260200191505060405180910390f35b3480156108425760006000fd5b506108706004803603602081101561085a5760006000fd5b8101908080359060200190929190505050613316565b6040518082815260200191505060405180910390f35b3480156108935760006000fd5b5061089c613414565b6040518082815260200191505060405180910390f35b3480156108bf5760006000fd5b50610903600480360360208110156108d75760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061348b565b6040518082815260200191505060405180910390f35b3480156109265760006000fd5b5061096a6004803603602081101561093e5760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613520565b005b3480156109795760006000fd5b506109a7600480360360208110156109915760006000fd5b8101908080359060200190929190505050613616565b005b3480156109b65760006000fd5b506109fa600480360360208110156109ce5760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613652565b6040518082815260200191505060405180910390f35b348015610a1d5760006000fd5b50610a266138a6565b005b348015610a355760006000fd5b50610a6360048036036020811015610a4d5760006000fd5b810190808035906020019092919050505061391f565b6040518082815260200191505060405180910390f35b348015610a865760006000fd5b50610aca60048036036020811015610a9e5760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613947565b6040518082815260200191505060405180910390f35b348015610aed5760006000fd5b50610af66139e0565b6040518082815260200191505060405180910390f35b348015610b195760006000fd5b50610b5d60048036036020811015610b315760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506139e9565b6040518082815260200191505060405180910390f35b348015610b805760006000fd5b50610b89613a3d565b6040518082815260200191505060405180910390f35b348015610bac5760006000fd5b50610bb5613a52565b6040518082815260200191505060405180910390f35b348015610bd85760006000fd5b50610c1c60048036036020811015610bf05760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613a5b565b6040518082815260200191505060405180910390f35b348015610c3f5760006000fd5b50610c6d60048036036020811015610c575760006000fd5b8101908080359060200190929190505050613ac8565b6040518082815260200191505060405180910390f35b348015610c905760006000fd5b50610c99613af0565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610cd25760006000fd5b50610d1660048036036020811015610cea5760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613b16565b6040518082815260200191505060405180910390f35b348015610d395760006000fd5b50610d7d60048036036020811015610d515760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613b83565b6040518082815260200191505060405180910390f35b610d9b611af5565b6040518082815260200191505060405180910390f35b348015610dbe5760006000fd5b50610dc7613bf0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e085780820151818401525b602081019050610dec565b50505050905090810190601f168015610e355780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e505760006000fd5b50610e59613c2c565b005b348015610e685760006000fd5b50610e71613e74565b6040518082815260200191505060405180910390f35b348015610e945760006000fd5b50610ed860048036036020811015610eac5760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613e7d565b005b348015610ee75760006000fd5b50610f3560048036036040811015610eff5760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613f73565b005b348015610f445760006000fd5b50610f4d614331565b6040518082815260200191505060405180910390f35b348015610f705760006000fd5b50610f7961434d565b6040518082815260200191505060405180910390f35b610f97614356565b005b348015610fa65760006000fd5b50610faf614367565b6040518082815260200191505060405180910390f35b610fcd614370565b005b348015610fdc5760006000fd5b50610fe56143a4565b6040518082815260200191505060405180910390f35b3480156110085760006000fd5b506110116143ad565b6040518082815260200191505060405180910390f35b3480156110345760006000fd5b506110626004803603602081101561104c5760006000fd5b81019080803590602001909291905050506143b6565b005b3480156110715760006000fd5b5061107a614501565b6040518082815260200191505060405180910390f35b34801561109d5760006000fd5b506110a661450a565b005b3480156110b55760006000fd5b50611119600480360360408110156110cd5760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614607565b6040518082815260200191505060405180910390f35b34801561113c5760006000fd5b5061114561469c565b6040518082815260200191505060405180910390f35b3480156111685760006000fd5b506111716146a5565b005b3480156111805760006000fd5b506111896146da565b6040518082815260200191505060405180910390f35b3480156111ac5760006000fd5b506111b56146e3565b005b3480156111c45760006000fd5b506111cd614941565b6040518082815260200191505060405180910390f35b3480156111f05760006000fd5b50611234600480360360208110156112085760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061494a565b6040518082815260200191505060405180910390f35b3480156112575760006000fd5b506112856004803603602081101561126f5760006000fd5b81019080803590602001909291905050506149b3565b005b60016008600050541180156112a757506005614000026008600050540143105b80156112bc5750600a60005054600960005054105b15156112c85760006000fd5b6000349050600960005054600a600050540381111561136f57600960005054600a600050540390508050600a600050546009600050819090905550600060086000508190909055503373ffffffffffffffffffffffffffffffffffffffff166108fc61133d8334614a4e90919063ffffffff16565b9081150290604051600060405180830381858888f19350505050158015611369573d600060003e3d6000fd5b50611384565b80600960008282825054019250508190909055505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061140c5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561152257600a8181151561141d57fe5b0460076000828282505401925050819090905550600a8181151561143d57fe5b0460056000506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160008282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff160192506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550611705565b600260646005830281151561153357fe5b04026007600082828250540192505081909090555060646005820281151561155757fe5b0460056000506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160008282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff160192506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555060646005820281151561164657fe5b04600560005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160008282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff160192506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055505b600b60005054600560005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001601a6101000a81548161ffff021916908361ffff160217905550600066038d7ea4c680008281151561178157fe5b049050600067016345785d8a00006010840281151561179c57fe5b049050600067016345785d8a0000600a85028115156117b757fe5b04905082600360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282825054019250508190909055508160036000506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282825054019250508190909055508060036000506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282825054019250508190909055508082840101600060008282825054019250508190909055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f36a013c86c271c703c54dee591bc768e347954a0a9a1937dd17f5a29e9a8e645866040518082815260200191505060405180910390a3505050505b50565b6000611b523343604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001925050506040516020818303038152906040528051906020012060001c6000612ef563ffffffff16565b9050611b59565b90565b6000600560005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001601a9054906101000a900461ffff1661ffff1690506000600360005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050541480611c0f5750600081145b15611c8257600b60005054600560005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001601a6101000a81548161ffff021916908361ffff16021790555050611ee4565b600b60005054811415611c955750611ee4565b600060006000505463ffffffff600360005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505402811515611cf257fe5b0490506000600090505b600b60005054831015611d4157600c60005083815481101515611d1b57fe5b906000526020600020900160005b505482028101905080505b8280600101935050611cfc565b63ffffffff81811515611d5057fe5b0490508050806007600082828250540192505081909090555080600560005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160008282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff160192506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555082600560005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001601a6101000a81548161ffff021916908361ffff1602179055508373ffffffffffffffffffffffffffffffffffffffff167fe1e87f40e4de2a6b68365d854f85940aad44d84933d399007702c6d340da445f8285604051808381526020018281526020019250505060405180910390a25050505b50565b611eef615060565b600660005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000506040518060600160405290816000820160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001505090506000816040015163ffffffff161415612137576040518060600160405280600077ffffffffffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600163ffffffff16815260200150600660005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008201518160000160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550604082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055509050505061283c565b6000816000015177ffffffffffffffffffffffffffffffffffffffffffffffff16148061216e57506001816040015163ffffffff16145b1561218757612181613c2c63ffffffff16565b5061283c565b806040015163ffffffff16431115156121a05760006000fd5b43614000600a02826040015163ffffffff160111151561234c573373ffffffffffffffffffffffffffffffffffffffff167f770d64c654906ebab085526dd881064f61f0e5990caa94c94167eb29bc4645c6826040015143604051808363ffffffff1681526020018281526020019250505060405180910390a26040518060600160405280600077ffffffffffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600163ffffffff16815260200150600660005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008201518160000160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550604082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055509050505061283c565b60006000905060006000905061010083604001510163ffffffff1643101561239f57826040015163ffffffff164060001c62ffffff16905080506123968382614a6c63ffffffff16565b915081506125b3565b6000600e60005054111561241e576123c6836040015163ffffffff16614c6763ffffffff16565b9050805063010000008163ffffffff16141561240457826000015177ffffffffffffffffffffffffffffffffffffffffffffffff1691508150612419565b6124148382614a6c63ffffffff16565b915081505b6125b2565b3373ffffffffffffffffffffffffffffffffffffffff167f770d64c654906ebab085526dd881064f61f0e5990caa94c94167eb29bc4645c6846040015143604051808363ffffffff1681526020018281526020019250505060405180910390a26040518060600160405280600077ffffffffffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600163ffffffff16815260200150600660005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008201518160000160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550604082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555090505050505061283c565b5b6040518060600160405280600077ffffffffffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600163ffffffff16815260200150600660005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008201518160000160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550604082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555090505060008211156127d1573373ffffffffffffffffffffffffffffffffffffffff167e362509948ea59afac5c6fa93fea5327b624bc705a6574f4e9f26e9d8bd7ccc846020015163ffffffff168363ffffffff168560405180848152602001838152602001828152602001935050505060405180910390a2600d600050548211156127bd5781600d6000508190909055503373ffffffffffffffffffffffffffffffffffffffff167f955214d16f858518f04c701d01a6e2f5668548b6be3c6f2f0f8981f77f2cfc06836040518082815260200191505060405180910390a25b6127cc82614d1263ffffffff16565b612838565b3373ffffffffffffffffffffffffffffffffffffffff167f7375ed8230669ea9d64a9db629d7ce9501779604a67c95c0111377cf09f5b9b9846020015163ffffffff168363ffffffff16604051808381526020018281526020019250505060405180910390a25b5050505b565b6040518060400160405280601381526020017f536d61727442696c6c696f6e7320546f6b656e0000000000000000000000000081526020015081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128d357fe5b8060126000508190909055505b5b50565b6000811415801561297b57506000600460005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505414155b15151561298457fe5b80600460005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b60006000600f6000505490506000811480612a985750600a81014311155b15612aa7576000915050612b69565b6000610100431015612abe57600090508050612ac8565b6101004303905080505b80821015612aef576000819050600a81811515612ae157fe5b068101905080508092508250505b6000600a600e600050548403811515612b0457fe5b049050612b178382614f2b63ffffffff16565b601360005061400083811515612b2957fe5b06815481101515612b3657fe5b906000526020600020900160005b50819090905550600a8301600f60005081909090555060019350505050612b69565050505b90565b600d6000505481565b60006000505481565b606060048101600036905010151515612b9357fe5b6000600460005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050549050612c2c85611b5c63ffffffff16565b612c3b84611b5c63ffffffff16565b612c9383600360005060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505461503b90919063ffffffff16565b600360005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050819090905550612d3683600360005060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054614a4e90919063ffffffff16565b600360005060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050819090905550612d948382614a4e90919063ffffffff16565b600460005060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3505b5b50505050565b6000612ee93343604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001925050506040516020818303038152906040528051906020012060001c83612ef563ffffffff16565b9050612ef0565b919050565b6000612f05611ee763ffffffff16565b6000839050670de0b6b3a76400003411158015612f26575060126000505434105b1515612f325760006000fd5b60003411156132c15760006008600050541415612f8b57601434811515612f5557fe5b04600c600050600b60005054815481101515612f6d57fe5b906000526020600020900160005b8282825054019250508190909055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415156130a6576000606434811515612fcf57fe5b049050806007600082828250540192505081909090555080600560005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160008282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff160192506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550505b6003430160106000505410156130d657600343016010600050819090905550346011600050819090905550613125565b601260005054601160005054111561310f5760106000818150548092919060010191905090905550346011600050819090905550613124565b34601160008282825054019250508190909055505b5b60405180606001604052803477ffffffffffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff1663ffffffff16815260200160106000505463ffffffff16815260200150600660005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008201518160000160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550604082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff167f063f4540040cf99a22f577ef321c170763020e6277e47275ed9b3d17ec14e13d8262ffffff166010600050543460405180848152602001838152602001828152602001935050505060405180910390a25b6132cf612a7a63ffffffff16565b506010600050549150506132df56505b92915050565b600081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61400081565b60006000600e6000505414801561332d5750600082115b801561333b57506140008211155b15156133475760006000fd5b60008260136000508054905001905061400081111561336857614000905080505b600060136000508054905090505b818110156133bd5760136000506001908060018154018082558091505060019003906000526020600020900160005b909190919091509090555b8080600101915050613376565b506140006013600050805490501015156133fd57600a438115156133dd57fe5b064303600e600050819090905550600e60005054600f6000508190909055505b60136000508054905091505061340f56505b919050565b60006000600860005054111561342d5760009050613488565b6000614000600a02600e60005054430381151561344657fe5b049050600b60005054811115613460576000915050613488565b614000600a02600e60005054430381151561347757fe5b06614000600a020391505061348856505b90565b6000600660005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16905061351b565b919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561357957fe5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156135b257fe5b6135c133611b5c63ffffffff16565b6135d081611b5c63ffffffff16565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b6000600090505b8181101561364d57613633612a7a63ffffffff16565b151561363f575061364f565b5b808060010191505061361d565b505b50565b600061365c615060565b600660005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000506040518060600160405290816000820160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001505090506000816000015177ffffffffffffffffffffffffffffffffffffffffffffffff16148061379757506001816040015163ffffffff1611155b806137ab5750806040015163ffffffff1643105b806137c75750614000600a02816040015163ffffffff16014310155b156137d65760009150506138a1565b61010081604001510163ffffffff164310156138125761380a81826040015163ffffffff164060001c614a6c63ffffffff16565b9150506138a1565b6000600e60005054111561389657600061383b826040015163ffffffff16614c6763ffffffff16565b905063010000008163ffffffff16141561387b57816000015177ffffffffffffffffffffffffffffffffffffffffffffffff16925050506138a156613894565b61388b8282614a6c63ffffffff16565b925050506138a1565b505b60009150506138a156505b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156138ff57fe5b600343016010600050819090905550600060116000508190909055505b5b565b60136000508181548110151561393157fe5b906000526020600020900160005b915090505481565b6000600560005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160009054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff1679ffffffffffffffffffffffffffffffffffffffffffffffffffff1690506139db565b919050565b600e6000505481565b6000600360005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050549050613a38565b919050565b60006013600050805490509050613a4f565b90565b60106000505481565b6000600560005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001601c9054906101000a900463ffffffff1663ffffffff169050613ac3565b919050565b600c60005081815481101515613ada57fe5b906000526020600020900160005b915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001601c9054906101000a900463ffffffff1663ffffffff169050613b7e565b919050565b6000600660005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160189054906101000a900463ffffffff1663ffffffff169050613beb565b919050565b6040518060400160405280600481526020017f504c41590000000000000000000000000000000000000000000000000000000081526020015081565b6000600560005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160009054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff1679ffffffffffffffffffffffffffffffffffffffffffffffffffff16118015613d24575043600560005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001601c9054906101000a900463ffffffff1663ffffffff1611155b15613e71576000600560005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160009054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff1679ffffffffffffffffffffffffffffffffffffffffffffffffffff1690506000600560005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160006101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055508060076000828282505403925050819090905550613e6f81614d1263ffffffff16565b505b5b565b60086000505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613ed657fe5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613f0f57fe5b613f1e33611b5c63ffffffff16565b613f2d81611b5c63ffffffff16565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b604060048101600036905010151515613f8857fe5b613f9733611b5c63ffffffff16565b613fef82600360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054614a4e90919063ffffffff16565b600360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156142125761409f600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611b5c63ffffffff16565b6141198260036000506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505461503b90919063ffffffff16565b60036000506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050819090905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a361432a565b61422183611b5c63ffffffff16565b61427982600360005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505461503b90919063ffffffff16565b600360005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5b5b505050565b6000614343608061331663ffffffff16565b905061434a565b90565b600f6000505481565b61436461450a63ffffffff16565b5b565b60126000505481565b6143a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661128763ffffffff16565b5b565b600a6000505481565b60076000505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561440f57fe5b61441d61450a63ffffffff16565b60008111801561444a575080600760005054600a60096009600050540281151561444357fe5b0401014710155b15156144565760006000fd5b6002600a6000505481151561446757fe5b046009600050541015156144a8576101904781151561448257fe5b04811115801561449b575043619d806014600050540111155b15156144a75760006000fd5b5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156144ef573d600060003e3d6000fd5b504360146000508190909055505b5b50565b60146000505481565b600160086000505411801561452b5750600561400002600860005054014310155b156145425760006008600050819090905550614604565b6000600e600050541115614603576000614000600a02600e60005054430381151561456957fe5b0490506002600c60005080549050038111156145b157600c6000506000908060018154018082558091505060019003906000526020600020900160005b909190919091509090555b600b60005054811180156145ca57506000600860005054145b80156145e557506001600c6000508054905003600b60005054105b1561460157600b60008181505480929190600101919050909055505b505b5b5b565b6000600460005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050549050614696565b92915050565b60116000505481565b60006008600050541415156146ba5760006000fd5b6146c933611b5c63ffffffff16565b6146d7613c2c63ffffffff16565b5b565b60096000505481565b60006008600050541415156146f85760006000fd5b61470733611b5c63ffffffff16565b600066038d7ea4c68000600360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054029050600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050546040518082815260200191505060405180910390a3600360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600090558060096000828282505403925050819090905550600a6009820281151561487157fe5b04600560005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160008282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff160192506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555061493d613c2c63ffffffff16565b505b565b600b6000505481565b6000600560005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001601a9054906101000a900461ffff1661ffff1690506149ae565b919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515614a0c57fe5b6001600860005054148015614a2657506000600e60005054115b8015614a3157508043105b1515614a3d5760006000fd5b8060086000508190909055505b5b50565b6000828211151515614a5c57fe5b8183039050614a66565b92915050565b6000600083602001519050600083821890506000600062f00000831662ffffff1614614a99576000614a9c565b60015b6000620f0000841662ffffff1614614ab5576000614ab8565b60015b600061f000851662ffffff1614614ad0576000614ad3565b60015b6000610f00861662ffffff1614614aeb576000614aee565b60015b600060f0871662ffffff1614614b05576000614b08565b60015b6000600f881662ffffff1614614b1f576000614b22565b60015b010101010160ff16905060068162ffffff161415614b6857626acfc0866000015177ffffffffffffffffffffffffffffffffffffffffffffffff16029350505050614c61565b60058162ffffff161415614ba357614e20866000015177ffffffffffffffffffffffffffffffffffffffffffffffff16029350505050614c61565b60048162ffffff161415614bde576101f4866000015177ffffffffffffffffffffffffffffffffffffffffffffffff16029350505050614c61565b60038162ffffff161415614c18576019866000015177ffffffffffffffffffffffffffffffffffffffffffffffff16029350505050614c61565b60028162ffffff161415614c52576003866000015177ffffffffffffffffffffffffffffffffffffffffffffffff16029350505050614c61565b60009350505050614c61565050505b92915050565b60006000600a600e600050548403811515614c7e57fe5b0490506000601360005061400083811515614c9557fe5b06815481101515614ca257fe5b906000526020600020900160005b5054905060f081901c61400083811515614cc657fe5b04141515614cdc57630100000092505050614d0d565b6000600a600e600050548603811515614cf157fe5b06905062ffffff8160180283901c169350505050614d0d565050505b919050565b6000600247811515614d2057fe5b0490508181101515614d97573373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015614d73573d600060003e3d6000fd5b5066038d7ea4c68000821115614d9257614d9161450a63ffffffff16565b5b614f26565b60008183039050806007600082828250540192505081909090555080600560005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160008282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff160192506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055506202a3004301600560005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001601c6101000a81548163ffffffff021916908363ffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015614f23573d600060003e3d6000fd5b50505b505b50565b600060f06140008363ffffffff16811515614f4257fe5b04901b60d862ffffff6009860163ffffffff164060001c16901b60c062ffffff6008870163ffffffff164060001c16901b60a862ffffff6007880163ffffffff164060001c16901b609062ffffff6006890163ffffffff164060001c16901b607862ffffff60058a0163ffffffff164060001c16901b606062ffffff60048b0163ffffffff164060001c16901b604862ffffff60038c0163ffffffff164060001c16901b603062ffffff60028d0163ffffffff164060001c16901b601862ffffff60018e0163ffffffff164060001c16901b62ffffff8d63ffffffff164060001c16171717171717171717179050615035565b92915050565b60006000828401905083811015151561505057fe5b8091505061505a56505b92915050565b6040518060600160405280600077ffffffffffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001509056fea264697066735822122076cba76bb9cc775570577df6c74b6e8879167442dedc8bb6faad2a9cf191a18364736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x814B3FE0 GT PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xC27509CF GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xDE469071 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDF1EAD82 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xDF1EAD82 EQ PUSH2 0x119F JUMPI DUP1 PUSH4 0xE4CC98A5 EQ PUSH2 0x11B7 JUMPI DUP1 PUSH4 0xE73CC2EB EQ PUSH2 0x11E3 JUMPI DUP1 PUSH4 0xE76ECE01 EQ PUSH2 0x124A JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0xDE469071 EQ PUSH2 0x112F JUMPI DUP1 PUSH4 0xDE88A342 EQ PUSH2 0x115B JUMPI DUP1 PUSH4 0xDF12B94E EQ PUSH2 0x1173 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0xCD88333E GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCD88333E EQ PUSH2 0x1027 JUMPI DUP1 PUSH4 0xD6D25008 EQ PUSH2 0x1064 JUMPI DUP1 PUSH4 0xD9FA9335 EQ PUSH2 0x1090 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x10A8 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0xC27509CF EQ PUSH2 0xFC5 JUMPI DUP1 PUSH4 0xC4164365 EQ PUSH2 0xFCF JUMPI DUP1 PUSH4 0xCD0A314B EQ PUSH2 0xFFB JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0xA367D99A GT PUSH2 0x164 JUMPI DUP1 PUSH4 0xB3470E97 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0xB3470E97 EQ PUSH2 0xF37 JUMPI DUP1 PUSH4 0xBC851718 EQ PUSH2 0xF63 JUMPI DUP1 PUSH4 0xBE1EEFBF EQ PUSH2 0xF8F JUMPI DUP1 PUSH4 0xBFBA9029 EQ PUSH2 0xF99 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0xA367D99A EQ PUSH2 0xE5B JUMPI DUP1 PUSH4 0xA6F9DAE1 EQ PUSH2 0xE87 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xEDA JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x904D2248 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x904D2248 EQ PUSH2 0xD2C JUMPI DUP1 PUSH4 0x93E84CD9 EQ PUSH2 0xD93 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0xDB1 JUMPI DUP1 PUSH4 0x9CE962CA EQ PUSH2 0xE43 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x814B3FE0 EQ PUSH2 0xC32 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC83 JUMPI DUP1 PUSH4 0x8EECDDCF EQ PUSH2 0xCC5 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x380F3087 GT PUSH2 0x2A0 JUMPI DUP1 PUSH4 0x501895AE GT PUSH2 0x23E JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x218 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xB0C JUMPI DUP1 PUSH4 0x70CCD928 EQ PUSH2 0xB73 JUMPI DUP1 PUSH4 0x7227C7CE EQ PUSH2 0xB9F JUMPI DUP1 PUSH4 0x785CE7CA EQ PUSH2 0xBCB JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x501895AE EQ PUSH2 0xA28 JUMPI DUP1 PUSH4 0x66CE3BD2 EQ PUSH2 0xA79 JUMPI DUP1 PUSH4 0x6B486818 EQ PUSH2 0xAE0 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x40C73D17 GT PUSH2 0x27A JUMPI DUP1 PUSH4 0x40C73D17 EQ PUSH2 0x919 JUMPI DUP1 PUSH4 0x413E90E7 EQ PUSH2 0x96C JUMPI DUP1 PUSH4 0x4288D759 EQ PUSH2 0x9A9 JUMPI DUP1 PUSH4 0x43146F36 EQ PUSH2 0xA10 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x380F3087 EQ PUSH2 0x835 JUMPI DUP1 PUSH4 0x3DE8D340 EQ PUSH2 0x886 JUMPI DUP1 PUSH4 0x3E43B652 EQ PUSH2 0x8B2 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x30D JUMPI DUP1 PUSH4 0x26699576 GT PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x26699576 EQ PUSH2 0x738 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x79B JUMPI DUP1 PUSH4 0x31C2B6E6 EQ PUSH2 0x7C7 JUMPI DUP1 PUSH4 0x37C43088 EQ PUSH2 0x809 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD EQ PUSH2 0x636 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x662 JUMPI DUP1 PUSH4 0x2406E9FA EQ PUSH2 0x6DF JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x349 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x567 JUMPI DUP1 PUSH4 0x12C8052F EQ PUSH2 0x5C4 JUMPI DUP1 PUSH4 0x13E4B51F EQ PUSH2 0x5DC JUMPI DUP1 PUSH4 0x16D190E3 EQ PUSH2 0x60A JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x3F9C793 EQ PUSH2 0x453 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0x751076D EQ PUSH2 0x52A JUMPI PUSH2 0x370 JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 CALLVALUE GT ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 POP SLOAD GT ISZERO PUSH2 0x3BE JUMPI PUSH2 0x3B9 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1287 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3CE JUMP JUMPDEST PUSH2 0x3CC PUSH2 0x1AF5 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMPDEST PUSH2 0x451 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP SLOAD EQ DUP1 ISZERO PUSH2 0x42D JUMPI POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD GT JUMPDEST ISZERO PUSH2 0x442 JUMPI PUSH2 0x441 CALLER PUSH2 0x1B5C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH2 0x450 PUSH2 0x1EE7 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 0x496 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x46A JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1287 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x4AE PUSH2 0x283E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4EF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4D3 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x51C JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x537 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x565 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x54F JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x287A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x574 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x5C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x58C JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x28E4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D1 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x5DA PUSH2 0x1EE7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E9 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x5F2 PUSH2 0x2A7A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x617 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x620 PUSH2 0x2B6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x643 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x64C PUSH2 0x2B75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66F JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x6DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x687 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2B7E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x722 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6F6 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2E8D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x785 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x74F JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A8 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x7B1 PUSH2 0x32E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D4 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x7DD PUSH2 0x32EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x816 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x81F PUSH2 0x3310 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x842 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x870 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x85A JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3316 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x893 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x89C PUSH2 0x3414 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8BF JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x903 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8D7 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x348B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x926 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x96A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x93E JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3520 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x979 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x9A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x991 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3616 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9B6 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x9FA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9CE JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3652 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA1D JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xA26 PUSH2 0x38A6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA35 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xA63 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA4D JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x391F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA86 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xACA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA9E JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3947 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAED JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xAF6 PUSH2 0x39E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB19 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xB5D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB31 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x39E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB80 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xB89 PUSH2 0x3A3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBAC JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xBB5 PUSH2 0x3A52 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBD8 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xC1C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBF0 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3A5B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC3F JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xC6D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC57 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3AC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC90 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xC99 PUSH2 0x3AF0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD2 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xD16 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCEA JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3B16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD39 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xD7D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD51 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3B83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9B PUSH2 0x1AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDBE JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xDC7 PUSH2 0x3BF0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE08 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDEC JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xE35 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE50 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xE59 PUSH2 0x3C2C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE68 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xE71 PUSH2 0x3E74 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE94 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xED8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xEAC JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3E7D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE7 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xF35 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xEFF JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3F73 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF44 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xF4D PUSH2 0x4331 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF70 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xF79 PUSH2 0x434D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF97 PUSH2 0x4356 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFA6 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xFAF PUSH2 0x4367 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFCD PUSH2 0x4370 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFDC JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xFE5 PUSH2 0x43A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1008 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1011 PUSH2 0x43AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1034 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1062 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x104C JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x43B6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1071 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x107A PUSH2 0x4501 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x109D JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x10A6 PUSH2 0x450A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10B5 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1119 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x10CD JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x113C JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1145 PUSH2 0x469C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1168 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1171 PUSH2 0x46A5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1180 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1189 PUSH2 0x46DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11AC JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x11B5 PUSH2 0x46E3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11C4 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x11CD PUSH2 0x4941 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11F0 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1234 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1208 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x494A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1257 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1285 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x126F JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x49B3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 POP SLOAD GT DUP1 ISZERO PUSH2 0x12A7 JUMPI POP PUSH1 0x5 PUSH2 0x4000 MUL PUSH1 0x8 PUSH1 0x0 POP SLOAD ADD NUMBER LT JUMPDEST DUP1 ISZERO PUSH2 0x12BC JUMPI POP PUSH1 0xA PUSH1 0x0 POP SLOAD PUSH1 0x9 PUSH1 0x0 POP SLOAD LT JUMPDEST ISZERO ISZERO PUSH2 0x12C8 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 CALLVALUE SWAP1 POP PUSH1 0x9 PUSH1 0x0 POP SLOAD PUSH1 0xA PUSH1 0x0 POP SLOAD SUB DUP2 GT ISZERO PUSH2 0x136F JUMPI PUSH1 0x9 PUSH1 0x0 POP SLOAD PUSH1 0xA PUSH1 0x0 POP SLOAD SUB SWAP1 POP DUP1 POP PUSH1 0xA PUSH1 0x0 POP SLOAD PUSH1 0x9 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0x133D DUP4 CALLVALUE PUSH2 0x4A4E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1369 JUMPI RETURNDATASIZE PUSH1 0x0 PUSH1 0x0 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1384 JUMP JUMPDEST DUP1 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x140C JUMPI POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1522 JUMPI PUSH1 0xA DUP2 DUP2 ISZERO ISZERO PUSH2 0x141D JUMPI INVALID JUMPDEST DIV PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0xA DUP2 DUP2 ISZERO ISZERO PUSH2 0x143D JUMPI INVALID JUMPDEST DIV PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1705 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x64 PUSH1 0x5 DUP4 MUL DUP2 ISZERO ISZERO PUSH2 0x1533 JUMPI INVALID JUMPDEST DIV MUL PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0x64 PUSH1 0x5 DUP3 MUL DUP2 ISZERO ISZERO PUSH2 0x1557 JUMPI INVALID JUMPDEST DIV PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x64 PUSH1 0x5 DUP3 MUL DUP2 ISZERO ISZERO PUSH2 0x1646 JUMPI INVALID JUMPDEST DIV PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0xB PUSH1 0x0 POP SLOAD PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1A PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH7 0x38D7EA4C68000 DUP3 DUP2 ISZERO ISZERO PUSH2 0x1781 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH8 0x16345785D8A0000 PUSH1 0x10 DUP5 MUL DUP2 ISZERO ISZERO PUSH2 0x179C JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH8 0x16345785D8A0000 PUSH1 0xA DUP6 MUL DUP2 ISZERO ISZERO PUSH2 0x17B7 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP3 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP2 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP1 DUP3 DUP5 ADD ADD PUSH1 0x0 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x36A013C86C271C703C54DEE591BC768E347954A0A9A1937DD17F5A29E9A8E645 DUP7 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B52 CALLER NUMBER PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR PUSH1 0x0 PUSH2 0x2EF5 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1B59 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1A SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD EQ DUP1 PUSH2 0x1C0F JUMPI POP PUSH1 0x0 DUP2 EQ JUMPDEST ISZERO PUSH2 0x1C82 JUMPI PUSH1 0xB PUSH1 0x0 POP SLOAD PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1A PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x1EE4 JUMP JUMPDEST PUSH1 0xB PUSH1 0x0 POP SLOAD DUP2 EQ ISZERO PUSH2 0x1C95 JUMPI POP PUSH2 0x1EE4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 PUSH1 0x0 POP SLOAD PUSH4 0xFFFFFFFF PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD MUL DUP2 ISZERO ISZERO PUSH2 0x1CF2 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0xB PUSH1 0x0 POP SLOAD DUP4 LT ISZERO PUSH2 0x1D41 JUMPI PUSH1 0xC PUSH1 0x0 POP DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1D1B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST POP SLOAD DUP3 MUL DUP2 ADD SWAP1 POP DUP1 POP JUMPDEST DUP3 DUP1 PUSH1 0x1 ADD SWAP4 POP POP PUSH2 0x1CFC JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 DUP2 ISZERO ISZERO PUSH2 0x1D50 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1A PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE1E87F40E4DE2A6B68365D854F85940AAD44D84933D399007702C6D340DA445F DUP3 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1EEF PUSH2 0x5060 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x2137 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP PUSH2 0x283C JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x216E JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2187 JUMPI PUSH2 0x2181 PUSH2 0x3C2C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH2 0x283C JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND NUMBER GT ISZERO ISZERO PUSH2 0x21A0 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST NUMBER PUSH2 0x4000 PUSH1 0xA MUL DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND ADD GT ISZERO ISZERO PUSH2 0x234C JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x770D64C654906EBAB085526DD881064F61F0E5990CAA94C94167EB29BC4645C6 DUP3 PUSH1 0x40 ADD MLOAD NUMBER PUSH1 0x40 MLOAD DUP1 DUP4 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP PUSH2 0x283C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH1 0x0 SWAP1 POP PUSH2 0x100 DUP4 PUSH1 0x40 ADD MLOAD ADD PUSH4 0xFFFFFFFF AND NUMBER LT ISZERO PUSH2 0x239F JUMPI DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR PUSH3 0xFFFFFF AND SWAP1 POP DUP1 POP PUSH2 0x2396 DUP4 DUP3 PUSH2 0x4A6C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP DUP2 POP PUSH2 0x25B3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE PUSH1 0x0 POP SLOAD GT ISZERO PUSH2 0x241E JUMPI PUSH2 0x23C6 DUP4 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x4C67 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 POP PUSH4 0x1000000 DUP2 PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x2404 JUMPI DUP3 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP2 POP PUSH2 0x2419 JUMP JUMPDEST PUSH2 0x2414 DUP4 DUP3 PUSH2 0x4A6C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP DUP2 POP JUMPDEST PUSH2 0x25B2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x770D64C654906EBAB085526DD881064F61F0E5990CAA94C94167EB29BC4645C6 DUP5 PUSH1 0x40 ADD MLOAD NUMBER PUSH1 0x40 MLOAD DUP1 DUP4 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP PUSH2 0x283C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x27D1 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH31 0x362509948EA59AFAC5C6FA93FEA5327B624BC705A6574F4E9F26E9D8BD7CCC DUP5 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0xD PUSH1 0x0 POP SLOAD DUP3 GT ISZERO PUSH2 0x27BD JUMPI DUP2 PUSH1 0xD PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x955214D16F858518F04C701D01A6E2F5668548B6BE3C6F2F0F8981F77F2CFC06 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH2 0x27CC DUP3 PUSH2 0x4D12 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2838 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7375ED8230669EA9D64A9DB629D7CE9501779604A67C95C0111377CF09F5B9B9 DUP5 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536D61727442696C6C696F6E7320546F6B656E00000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x28D3 JUMPI INVALID JUMPDEST DUP1 PUSH1 0x12 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x297B JUMPI POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD EQ ISZERO JUMPDEST ISZERO ISZERO ISZERO PUSH2 0x2984 JUMPI INVALID JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 PUSH1 0xF PUSH1 0x0 POP SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ DUP1 PUSH2 0x2A98 JUMPI POP PUSH1 0xA DUP2 ADD NUMBER GT ISZERO JUMPDEST ISZERO PUSH2 0x2AA7 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x2B69 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 NUMBER LT ISZERO PUSH2 0x2ABE JUMPI PUSH1 0x0 SWAP1 POP DUP1 POP PUSH2 0x2AC8 JUMP JUMPDEST PUSH2 0x100 NUMBER SUB SWAP1 POP DUP1 POP JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x2AEF JUMPI PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0xA DUP2 DUP2 ISZERO ISZERO PUSH2 0x2AE1 JUMPI INVALID JUMPDEST MOD DUP2 ADD SWAP1 POP DUP1 POP DUP1 SWAP3 POP DUP3 POP POP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0xE PUSH1 0x0 POP SLOAD DUP5 SUB DUP2 ISZERO ISZERO PUSH2 0x2B04 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x2B17 DUP4 DUP3 PUSH2 0x4F2B PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x13 PUSH1 0x0 POP PUSH2 0x4000 DUP4 DUP2 ISZERO ISZERO PUSH2 0x2B29 JUMPI INVALID JUMPDEST MOD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2B36 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0xA DUP4 ADD PUSH1 0xF PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x2B69 JUMP POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xD PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP2 ADD PUSH1 0x0 CALLDATASIZE SWAP1 POP LT ISZERO ISZERO ISZERO PUSH2 0x2B93 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD SWAP1 POP PUSH2 0x2C2C DUP6 PUSH2 0x1B5C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2C3B DUP5 PUSH2 0x1B5C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2C93 DUP4 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD PUSH2 0x503B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH2 0x2D36 DUP4 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD PUSH2 0x4A4E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH2 0x2D94 DUP4 DUP3 PUSH2 0x4A4E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 POP PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EE9 CALLER NUMBER PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR DUP4 PUSH2 0x2EF5 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2EF0 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F05 PUSH2 0x1EE7 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP4 SWAP1 POP PUSH8 0xDE0B6B3A7640000 CALLVALUE GT ISZERO DUP1 ISZERO PUSH2 0x2F26 JUMPI POP PUSH1 0x12 PUSH1 0x0 POP SLOAD CALLVALUE LT JUMPDEST ISZERO ISZERO PUSH2 0x2F32 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 CALLVALUE GT ISZERO PUSH2 0x32C1 JUMPI PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP SLOAD EQ ISZERO PUSH2 0x2F8B JUMPI PUSH1 0x14 CALLVALUE DUP2 ISZERO ISZERO PUSH2 0x2F55 JUMPI INVALID JUMPDEST DIV PUSH1 0xC PUSH1 0x0 POP PUSH1 0xB PUSH1 0x0 POP SLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2F6D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x30A6 JUMPI PUSH1 0x0 PUSH1 0x64 CALLVALUE DUP2 ISZERO ISZERO PUSH2 0x2FCF JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x3 NUMBER ADD PUSH1 0x10 PUSH1 0x0 POP SLOAD LT ISZERO PUSH2 0x30D6 JUMPI PUSH1 0x3 NUMBER ADD PUSH1 0x10 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP CALLVALUE PUSH1 0x11 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH2 0x3125 JUMP JUMPDEST PUSH1 0x12 PUSH1 0x0 POP SLOAD PUSH1 0x11 PUSH1 0x0 POP SLOAD GT ISZERO PUSH2 0x310F JUMPI PUSH1 0x10 PUSH1 0x0 DUP2 DUP2 POP SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SWAP1 SWAP1 SSTORE POP CALLVALUE PUSH1 0x11 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH2 0x3124 JUMP JUMPDEST CALLVALUE PUSH1 0x11 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 CALLVALUE PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH3 0xFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x10 PUSH1 0x0 POP SLOAD PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x63F4540040CF99A22F577EF321C170763020E6277E47275ED9B3D17EC14E13D DUP3 PUSH3 0xFFFFFF AND PUSH1 0x10 PUSH1 0x0 POP SLOAD CALLVALUE PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH2 0x32CF PUSH2 0x2A7A PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH1 0x10 PUSH1 0x0 POP SLOAD SWAP2 POP POP PUSH2 0x32DF JUMP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x4000 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 PUSH1 0xE PUSH1 0x0 POP SLOAD EQ DUP1 ISZERO PUSH2 0x332D JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST DUP1 ISZERO PUSH2 0x333B JUMPI POP PUSH2 0x4000 DUP3 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x3347 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x13 PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP ADD SWAP1 POP PUSH2 0x4000 DUP2 GT ISZERO PUSH2 0x3368 JUMPI PUSH2 0x4000 SWAP1 POP DUP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x13 PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP SWAP1 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x33BD JUMPI PUSH1 0x13 PUSH1 0x0 POP PUSH1 0x1 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SWAP1 SWAP1 SSTORE JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x3376 JUMP JUMPDEST POP PUSH2 0x4000 PUSH1 0x13 PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP LT ISZERO ISZERO PUSH2 0x33FD JUMPI PUSH1 0xA NUMBER DUP2 ISZERO ISZERO PUSH2 0x33DD JUMPI INVALID JUMPDEST MOD NUMBER SUB PUSH1 0xE PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0xE PUSH1 0x0 POP SLOAD PUSH1 0xF PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST PUSH1 0x13 PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP SWAP2 POP POP PUSH2 0x340F JUMP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP SLOAD GT ISZERO PUSH2 0x342D JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x3488 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4000 PUSH1 0xA MUL PUSH1 0xE PUSH1 0x0 POP SLOAD NUMBER SUB DUP2 ISZERO ISZERO PUSH2 0x3446 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0xB PUSH1 0x0 POP SLOAD DUP2 GT ISZERO PUSH2 0x3460 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x3488 JUMP JUMPDEST PUSH2 0x4000 PUSH1 0xA MUL PUSH1 0xE PUSH1 0x0 POP SLOAD NUMBER SUB DUP2 ISZERO ISZERO PUSH2 0x3477 JUMPI INVALID JUMPDEST MOD PUSH2 0x4000 PUSH1 0xA MUL SUB SWAP2 POP POP PUSH2 0x3488 JUMP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x351B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x3579 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x35B2 JUMPI INVALID JUMPDEST PUSH2 0x35C1 CALLER PUSH2 0x1B5C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x35D0 DUP2 PUSH2 0x1B5C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 SWAP1 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x364D JUMPI PUSH2 0x3633 PUSH2 0x2A7A PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO ISZERO PUSH2 0x363F JUMPI POP PUSH2 0x364F JUMP JUMPDEST JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x361D JUMP JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x365C PUSH2 0x5060 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x3797 JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST DUP1 PUSH2 0x37AB JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND NUMBER LT JUMPDEST DUP1 PUSH2 0x37C7 JUMPI POP PUSH2 0x4000 PUSH1 0xA MUL DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND ADD NUMBER LT ISZERO JUMPDEST ISZERO PUSH2 0x37D6 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x38A1 JUMP JUMPDEST PUSH2 0x100 DUP2 PUSH1 0x40 ADD MLOAD ADD PUSH4 0xFFFFFFFF AND NUMBER LT ISZERO PUSH2 0x3812 JUMPI PUSH2 0x380A DUP2 DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR PUSH2 0x4A6C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP POP PUSH2 0x38A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE PUSH1 0x0 POP SLOAD GT ISZERO PUSH2 0x3896 JUMPI PUSH1 0x0 PUSH2 0x383B DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x4C67 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH4 0x1000000 DUP2 PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x387B JUMPI DUP2 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 POP POP POP PUSH2 0x38A1 JUMP PUSH2 0x3894 JUMP JUMPDEST PUSH2 0x388B DUP3 DUP3 PUSH2 0x4A6C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x38A1 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x38A1 JUMP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x38FF JUMPI INVALID JUMPDEST PUSH1 0x3 NUMBER ADD PUSH1 0x10 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x11 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x13 PUSH1 0x0 POP DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3931 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x39DB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xE PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD SWAP1 POP PUSH2 0x3A38 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x13 PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP SWAP1 POP PUSH2 0x3A4F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH2 0x3AC3 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 POP DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3ADA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH2 0x3B7E JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH2 0x3BEB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x504C415900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT DUP1 ISZERO PUSH2 0x3D24 JUMPI POP NUMBER PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x3E71 JUMPI PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH2 0x3E6F DUP2 PUSH2 0x4D12 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x3ED6 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x3F0F JUMPI INVALID JUMPDEST PUSH2 0x3F1E CALLER PUSH2 0x1B5C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3F2D DUP2 PUSH2 0x1B5C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 PUSH1 0x4 DUP2 ADD PUSH1 0x0 CALLDATASIZE SWAP1 POP LT ISZERO ISZERO ISZERO PUSH2 0x3F88 JUMPI INVALID JUMPDEST PUSH2 0x3F97 CALLER PUSH2 0x1B5C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3FEF DUP3 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD PUSH2 0x4A4E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4212 JUMPI PUSH2 0x409F PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1B5C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4119 DUP3 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD PUSH2 0x503B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x432A JUMP JUMPDEST PUSH2 0x4221 DUP4 PUSH2 0x1B5C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4279 DUP3 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD PUSH2 0x503B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4343 PUSH1 0x80 PUSH2 0x3316 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x434A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x4364 PUSH2 0x450A PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x12 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x43A1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1287 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x440F JUMPI INVALID JUMPDEST PUSH2 0x441D PUSH2 0x450A PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x444A JUMPI POP DUP1 PUSH1 0x7 PUSH1 0x0 POP SLOAD PUSH1 0xA PUSH1 0x9 PUSH1 0x9 PUSH1 0x0 POP SLOAD MUL DUP2 ISZERO ISZERO PUSH2 0x4443 JUMPI INVALID JUMPDEST DIV ADD ADD SELFBALANCE LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x4456 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xA PUSH1 0x0 POP SLOAD DUP2 ISZERO ISZERO PUSH2 0x4467 JUMPI INVALID JUMPDEST DIV PUSH1 0x9 PUSH1 0x0 POP SLOAD LT ISZERO ISZERO PUSH2 0x44A8 JUMPI PUSH2 0x190 SELFBALANCE DUP2 ISZERO ISZERO PUSH2 0x4482 JUMPI INVALID JUMPDEST DIV DUP2 GT ISZERO DUP1 ISZERO PUSH2 0x449B JUMPI POP NUMBER PUSH2 0x9D80 PUSH1 0x14 PUSH1 0x0 POP SLOAD ADD GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x44A7 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x44EF JUMPI RETURNDATASIZE PUSH1 0x0 PUSH1 0x0 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP NUMBER PUSH1 0x14 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x14 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 POP SLOAD GT DUP1 ISZERO PUSH2 0x452B JUMPI POP PUSH1 0x5 PUSH2 0x4000 MUL PUSH1 0x8 PUSH1 0x0 POP SLOAD ADD NUMBER LT ISZERO JUMPDEST ISZERO PUSH2 0x4542 JUMPI PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH2 0x4604 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE PUSH1 0x0 POP SLOAD GT ISZERO PUSH2 0x4603 JUMPI PUSH1 0x0 PUSH2 0x4000 PUSH1 0xA MUL PUSH1 0xE PUSH1 0x0 POP SLOAD NUMBER SUB DUP2 ISZERO ISZERO PUSH2 0x4569 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x2 PUSH1 0xC PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP SUB DUP2 GT ISZERO PUSH2 0x45B1 JUMPI PUSH1 0xC PUSH1 0x0 POP PUSH1 0x0 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SWAP1 SWAP1 SSTORE JUMPDEST PUSH1 0xB PUSH1 0x0 POP SLOAD DUP2 GT DUP1 ISZERO PUSH2 0x45CA JUMPI POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP SLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 0x45E5 JUMPI POP PUSH1 0x1 PUSH1 0xC PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP SUB PUSH1 0xB PUSH1 0x0 POP SLOAD LT JUMPDEST ISZERO PUSH2 0x4601 JUMPI PUSH1 0xB PUSH1 0x0 DUP2 DUP2 POP SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SWAP1 SWAP1 SSTORE POP JUMPDEST POP JUMPDEST JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD SWAP1 POP PUSH2 0x4696 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x11 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP SLOAD EQ ISZERO ISZERO PUSH2 0x46BA JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x46C9 CALLER PUSH2 0x1B5C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x46D7 PUSH2 0x3C2C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP SLOAD EQ ISZERO ISZERO PUSH2 0x46F8 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x4707 CALLER PUSH2 0x1B5C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH7 0x38D7EA4C68000 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD MUL SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 SWAP1 SSTORE DUP1 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0xA PUSH1 0x9 DUP3 MUL DUP2 ISZERO ISZERO PUSH2 0x4871 JUMPI INVALID JUMPDEST DIV PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x493D PUSH2 0x3C2C PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMPDEST JUMP JUMPDEST PUSH1 0xB PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1A SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND SWAP1 POP PUSH2 0x49AE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x4A0C JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 POP SLOAD EQ DUP1 ISZERO PUSH2 0x4A26 JUMPI POP PUSH1 0x0 PUSH1 0xE PUSH1 0x0 POP SLOAD GT JUMPDEST DUP1 ISZERO PUSH2 0x4A31 JUMPI POP DUP1 NUMBER LT JUMPDEST ISZERO ISZERO PUSH2 0x4A3D JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP1 PUSH1 0x8 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x4A5C JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP PUSH2 0x4A66 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP4 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP4 DUP3 XOR SWAP1 POP PUSH1 0x0 PUSH1 0x0 PUSH3 0xF00000 DUP4 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4A99 JUMPI PUSH1 0x0 PUSH2 0x4A9C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH3 0xF0000 DUP5 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4AB5 JUMPI PUSH1 0x0 PUSH2 0x4AB8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH2 0xF000 DUP6 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4AD0 JUMPI PUSH1 0x0 PUSH2 0x4AD3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH2 0xF00 DUP7 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4AEB JUMPI PUSH1 0x0 PUSH2 0x4AEE JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH1 0xF0 DUP8 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4B05 JUMPI PUSH1 0x0 PUSH2 0x4B08 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH1 0xF DUP9 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4B1F JUMPI PUSH1 0x0 PUSH2 0x4B22 JUMP JUMPDEST PUSH1 0x1 JUMPDEST ADD ADD ADD ADD ADD PUSH1 0xFF AND SWAP1 POP PUSH1 0x6 DUP2 PUSH3 0xFFFFFF AND EQ ISZERO PUSH2 0x4B68 JUMPI PUSH3 0x6ACFC0 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP4 POP POP POP POP PUSH2 0x4C61 JUMP JUMPDEST PUSH1 0x5 DUP2 PUSH3 0xFFFFFF AND EQ ISZERO PUSH2 0x4BA3 JUMPI PUSH2 0x4E20 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP4 POP POP POP POP PUSH2 0x4C61 JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH3 0xFFFFFF AND EQ ISZERO PUSH2 0x4BDE JUMPI PUSH2 0x1F4 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP4 POP POP POP POP PUSH2 0x4C61 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH3 0xFFFFFF AND EQ ISZERO PUSH2 0x4C18 JUMPI PUSH1 0x19 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP4 POP POP POP POP PUSH2 0x4C61 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH3 0xFFFFFF AND EQ ISZERO PUSH2 0x4C52 JUMPI PUSH1 0x3 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP4 POP POP POP POP PUSH2 0x4C61 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x4C61 JUMP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 PUSH1 0xA PUSH1 0xE PUSH1 0x0 POP SLOAD DUP5 SUB DUP2 ISZERO ISZERO PUSH2 0x4C7E JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x13 PUSH1 0x0 POP PUSH2 0x4000 DUP4 DUP2 ISZERO ISZERO PUSH2 0x4C95 JUMPI INVALID JUMPDEST MOD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4CA2 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST POP SLOAD SWAP1 POP PUSH1 0xF0 DUP2 SWAP1 SHR PUSH2 0x4000 DUP4 DUP2 ISZERO ISZERO PUSH2 0x4CC6 JUMPI INVALID JUMPDEST DIV EQ ISZERO ISZERO PUSH2 0x4CDC JUMPI PUSH4 0x1000000 SWAP3 POP POP POP PUSH2 0x4D0D JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0xE PUSH1 0x0 POP SLOAD DUP7 SUB DUP2 ISZERO ISZERO PUSH2 0x4CF1 JUMPI INVALID JUMPDEST MOD SWAP1 POP PUSH3 0xFFFFFF DUP2 PUSH1 0x18 MUL DUP4 SWAP1 SHR AND SWAP4 POP POP POP POP PUSH2 0x4D0D JUMP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SELFBALANCE DUP2 ISZERO ISZERO PUSH2 0x4D20 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP2 DUP2 LT ISZERO ISZERO PUSH2 0x4D97 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4D73 JUMPI RETURNDATASIZE PUSH1 0x0 PUSH1 0x0 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH7 0x38D7EA4C68000 DUP3 GT ISZERO PUSH2 0x4D92 JUMPI PUSH2 0x4D91 PUSH2 0x450A PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH2 0x4F26 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SUB SWAP1 POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH3 0x2A300 NUMBER ADD PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4F23 JUMPI RETURNDATASIZE PUSH1 0x0 PUSH1 0x0 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF0 PUSH2 0x4000 DUP4 PUSH4 0xFFFFFFFF AND DUP2 ISZERO ISZERO PUSH2 0x4F42 JUMPI INVALID JUMPDEST DIV SWAP1 SHL PUSH1 0xD8 PUSH3 0xFFFFFF PUSH1 0x9 DUP7 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0xC0 PUSH3 0xFFFFFF PUSH1 0x8 DUP8 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0xA8 PUSH3 0xFFFFFF PUSH1 0x7 DUP9 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x90 PUSH3 0xFFFFFF PUSH1 0x6 DUP10 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x78 PUSH3 0xFFFFFF PUSH1 0x5 DUP11 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x60 PUSH3 0xFFFFFF PUSH1 0x4 DUP12 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x48 PUSH3 0xFFFFFF PUSH1 0x3 DUP13 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x30 PUSH3 0xFFFFFF PUSH1 0x2 DUP14 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x18 PUSH3 0xFFFFFF PUSH1 0x1 DUP15 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH3 0xFFFFFF DUP14 PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND OR OR OR OR OR OR OR OR OR OR SWAP1 POP PUSH2 0x5035 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x5050 JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP PUSH2 0x505A JUMP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0xCBA76BB9CC775570577DF6C74B6E8879167442DEDC8BB6 STATICCALL 0xAD 0x2A SWAP13 CALL SWAP2 LOG1 DUP4 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"4464:23327:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21665:571;21719:1;21707:9;:13;21704:312;;;21751:1;21739:11;;;;:13;21736:248;;;21835:13;21842:5;;;;;;;;;;;21835:6;:13;;:::i;:::-;21736:248;;;21962:6;:4;:6;;:::i;:::-;;21736:248;21998:7;;21704:312;22092:1;22077:11;;;;:16;:42;;;;;22118:1;22097:8;;;:20;22106:10;22097:20;;;;;;;;;;;;;;;;;;:22;22077:42;22074:89;;;22135:26;22150:10;22135:14;:26;;:::i;:::-;22074:89;22173:5;:3;:5;;:::i;:::-;21665:571;4464:23327;13755:1988;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4530:51;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10518:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3629:311;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;19377:2114;;;;;;;;;;;;;:::i;:::-;;26815:692;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5649:22;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;622:23;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2981:412;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;22562:174;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;22850:1357;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4633:33;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;683:23;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;6185:39;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;24355:559;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9127:362;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8407:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9917:199;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;27613:173;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;18474:840;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10716:110;;;;;;;;;;;;;:::i;:::-;;6035:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7652:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5699:25;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2468:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7442:98;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5834:24;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8171:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5542:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;650:20;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;8906:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8656:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;22291:154;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4588:38;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12541:319;;;;;;;;;;;;;:::i;:::-;;5287:27;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9622:190;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1743:513;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;24997:89;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5773:24;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11673:70;;;:::i;:::-;;5966:32;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13567:73;;;:::i;:::-;;5436:43;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5192:29;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11119:484;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6253:29;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11832:628;;;;;;;;;;;;;:::i;:::-;;4269:144;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5900:26;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;16433:136;;;;;;;;;;;;;:::i;:::-;;5374:29;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;15874:499;;;;;;;;;;;;;:::i;:::-;;5505:30;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7902:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10226:170;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;13755:1988;13912:1;13898:11;;;;:15;:64;;;;;13960:1;6219:5;13947:14;13932:11;;;;:30;13917:12;:45;13898:64;:100;;;;;13982:16;;;;13966:13;;;;:32;13898:100;13890:109;;;;;;;;14010:14;14027:9;14010:26;;14081:13;;;;14062:16;;;;:32;14050:9;:44;14047:381;;;14142:13;;;;14123:16;;;;:32;14111:44;;;;14186:16;;;;14170:13;;:32;;;;;;;14231:1;14217:11;;:15;;;;;;;14273:10;:19;;:45;14293:24;14307:9;14293;:13;;:24;;;;:::i;:::-;14273:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14047:381;;;14407:9;14390:13;;:26;;;;;;;;;;;;;;;14047:381;14461:1;14441:22;;:8;:22;;;:43;;;;14479:5;;;;;;;;;;;14467:17;;:8;:17;;;14441:43;14438:441;;;14529:2;14517:9;:14;;;;;;;;14500:13;;:31;;;;;;;;;;;;;;;14592:2;14580:9;:14;;;;;;;;14546:7;;;:14;14554:5;;;;;;;;;;;14546:14;;;;;;;;;;;;;;;;;:22;;;:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14438:441;;;14705:1;14698:3;14694:1;14682:9;:13;:19;;;;;;;;14681:25;14664:13;;:42;;;;;;;;;;;;;;;14771:3;14767:1;14755:9;:13;:19;;;;;;;;14721:7;;;:14;14729:5;;;;;;;;;;;14721:14;;;;;;;;;;;;;;;;;:22;;;:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14873:3;14869:1;14857:9;:13;:19;;;;;;;;14820:7;;;:17;14828:8;14820:17;;;;;;;;;;;;;;;;;:25;;;:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14438:441;14958:14;;;;14910:7;;;:19;14918:10;14910:19;;;;;;;;;;;;;;;;;:38;;;:63;;;;;;;;;;;;;;;;;;15016:18;15049:6;15037:9;:18;;;;;;;;15016:39;;15066:17;15103:6;15098:2;15086:9;:14;:23;;;;;;;;15066:43;;15122:20;15162:6;15157:2;15145:9;:14;:23;;;;;;;;15122:46;;15205:13;15181:8;;;:20;15190:10;15181:20;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;15248:12;15229:8;;;:15;15238:5;;;;;;;;;;;15229:15;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;15328:15;15306:8;;;:18;15315:8;;;;;;;;;;;15306:18;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;15432:15;15417:12;15401:13;:28;:46;15386:11;;:61;;;;;;;;;;;;;;;15483:10;15463:45;;15480:1;15463:45;;;15494:13;15463:45;;;;;;;;;;;;;;;;;;15561:5;;;;;;;;;;;15541:39;;15558:1;15541:39;;;15567:12;15541:39;;;;;;;;;;;;;;;;;;15633:8;;;;;;;;;;;15613:45;;15630:1;15613:45;;;15642:15;15613:45;;;;;;;;;;;;;;;;;;15716:8;15691:44;;15705:10;15691:44;;;15725:9;15691:44;;;;;;;;;;;;;;;;;;13755:1988;;;;;;:::o;22291:154::-;22331:4;22355:82;22398:10;22409:12;22381:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22371:52;;;;;;22366:58;;22434:1;22355:10;:82;;:::i;:::-;22348:89;;;;22291:154;;:::o;16661:766::-;16728:9;16740:7;;;:13;16748:4;16740:13;;;;;;;;;;;;;;;;;:32;;;;;;;;;;;;16728:44;;;;16803:1;16787:8;;;:14;16796:4;16787:14;;;;;;;;;;;;;;;;;;:17;16786:32;;;;16816:1;16810:4;:7;16786:32;16783:139;;;16874:14;;;;16834:7;;;:13;16842:4;16834:13;;;;;;;;;;;;;;;;;:32;;;:55;;;;;;;;;;;;;;;;;;16904:7;;;16783:139;16941:14;;;;16935:4;:20;16932:58;;;16972:7;;;16932:58;17000:10;17043:11;;;;17030:10;17013:8;;;:14;17022:4;17013:14;;;;;;;;;;;;;;;;;;:27;:41;;;;;;;;17000:54;;17065:12;17080:1;17065:16;;17092:94;17102:14;;;;17097:4;:19;17092:94;;;17159:9;;;17169:4;17159:15;;;;;;;;;;;;;;;;;;;;;;17151:5;:23;17140:34;;;;;;17092:94;17117:6;;;;;;;17092:94;;;17217:10;17207:7;:20;;;;;;;;17196:32;;;;17256:7;17239:13;;:24;;;;;;;;;;;;;;;17307:7;17274;;;:13;17282:4;17274:13;;;;;;;;;;;;;;;;;:21;;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17368:4;17326:7;;;:13;17334:4;17326:13;;;;;;;;;;;;;;;;;:32;;;:47;;;;;;;;;;;;;;;;;;17401:4;17389:30;;;17406:7;17414:4;17389:30;;;;;;;;;;;;;;;;;;;;;;;;16661:766;;;;;:::o;19377:2114::-;19410:17;;:::i;:::-;19430:4;;;:16;19435:10;19430:16;;;;;;;;;;;;;;;;;19410:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19477:1;19460:6;:15;;;:18;;;19457:152;;;19536:40;;;;;;;;19548:1;19536:40;;;;;;19560:1;19536:40;;;;;;19573:1;19536:40;;;;;;;19517:4;;;:16;19522:10;19517:16;;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19591:7;;;19457:152;19637:1;19623:6;:12;;;:15;;;19622:41;;;;19661:1;19644:6;:15;;;:18;;;19622:41;19619:104;;;19679:11;:9;:11;;:::i;:::-;19705:7;;;19619:104;19754:6;:15;;;19741:28;;:12;:28;19733:37;;;;;;;;19861:12;6219:5;19841:2;:15;19822:6;:15;;;:35;;;:51;;19819:263;;;19935:10;19927:48;;;19946:6;:15;;;19962:12;19927:48;;;;;;;;;;;;;;;;;;;;;;;;;;20009:40;;;;;;;;20021:1;20009:40;;;;;;20033:1;20009:40;;;;;;20046:1;20009:40;;;;;;;19990:4;;;:16;19995:10;19990:16;;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20064:7;;;19819:263;20092:10;20105:1;20092:14;;20117:11;20131:1;20117:15;;20175:3;20159:6;:15;;;:19;20146:32;;:12;:32;20143:904;;;20269:6;:15;;;20259:26;;;20254:32;;20240:47;;;;;;20310:29;20319:6;20333:4;20310:8;:29;;:::i;:::-;20302:37;;;;20143:904;;;20394:1;20384:9;;;;:11;20381:655;;;20543:24;20551:6;:15;;;20543:24;;:7;:24;;:::i;:::-;20536:31;;;;20597:9;20589:4;:17;;;20586:231;;;20682:6;:12;;;20677:18;;20669:26;;;;20586:231;;;20768:29;20777:6;20791:4;20768:8;:29;;:::i;:::-;20760:37;;;;20586:231;20381:655;;;20875:10;20867:48;;;20886:6;:15;;;20902:12;20867:48;;;;;;;;;;;;;;;;;;;;;;;;;;20953:40;;;;;;;;20965:1;20953:40;;;;;;20977:1;20953:40;;;;;;20990:1;20953:40;;;;;;;20934:4;;;:16;20939:10;20934:16;;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21012:8;;;;;20381:655;20143:904;21076:40;;;;;;;;21088:1;21076:40;;;;;;21100:1;21076:40;;;;;;21113:1;21076:40;;;;;;;21057:4;;;:16;21062:10;21057:16;;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21136:1;21130:5;:7;21127:357;;;21166:10;21159:56;;;21182:6;:14;;;21177:20;;21203:4;21198:10;;21209:5;21159:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21241:6;;;;21233:5;:14;21230:121;;;21276:5;21267:6;;:14;;;;;;;21318:10;21305:30;;;21329:5;21305:30;;;;;;;;;;;;;;;;;;21230:121;21365:10;21369:5;21365:3;:10;;:::i;:::-;21127:357;;;21429:10;21421:51;;;21445:6;:14;;;21440:20;;21466:4;21461:10;;21421:51;;;;;;;;;;;;;;;;;;;;;;;;21127:357;19377:2114;;;;:::o;4530:51::-;;;;;;;;;;;;;;;;;;;;;:::o;10518:91::-;6956:5;;;;;;;;;;;6942:19;;:10;:19;;;6935:27;;;;;;10594:7:::1;10581:10;;:20;;;;;;;6973:1;10518:91:::0;;:::o;3629:311::-;3795:1;3785:6;:11;;3784:53;;;;;3835:1;3802:7;;;:19;3810:10;3802:19;;;;;;;;;;;;;;;;;:29;3822:8;3802:29;;;;;;;;;;;;;;;;;;:34;;3784:53;3782:56;3775:64;;;;;;3878:6;3846:7;;;:19;3854:10;3846:19;;;;;;;;;;;;;;;;;:29;3866:8;3846:29;;;;;;;;;;;;;;;;:38;;;;;;;3917:8;3896:38;;3905:10;3896:38;;;3927:6;3896:38;;;;;;;;;;;;;;;;;;3629:311;;;:::o;26815:692::-;26850:4;26867:10;26880:8;;;;26867:21;;26911:1;26902:5;:10;:40;;;;26940:2;26932:5;:10;26916:12;:26;;26902:40;26899:85;;;26966:5;26959:13;;;;;26899:85;26994:14;27035:3;27022:12;:16;27019:164;;;27099:1;27087:13;;;;27019:164;;;27168:3;27153:12;:18;27141:30;;;;27019:164;27204:9;27196:5;:17;27193:125;;;27230:8;27241:9;27230:20;;27278:2;27272:3;:8;;;;;;;;27265:15;;;;;;27303:3;27295:11;;;;27193:125;;27328:10;27363:2;27350:9;;;;27342:5;:17;27341:24;;;;;;;;27328:37;;27405:39;27423:5;27437;27405:10;:39;;:::i;:::-;27376:6;;;6219:5;27383;:18;;;;;;;;27376:26;;;;;;;;;;;;;;;;;;;;:68;;;;;;;27474:2;27466:5;:10;27455:8;;:21;;;;;;;27494:4;27487:12;;;;;;;26815:692;;;;;:::o;5649:22::-;;;;;;:::o;622:23::-;;;;;;:::o;2981:412::-;3076:6;1567:1;1560:4;:8;1541;;:15;;:27;;1534:35;;;;;;3091:15:::1;3109:7;;;:14;3117:5;3109:14;;;;;;;;;;;;;;;;;:26;3124:10;3109:26;;;;;;;;;;;;;;;;;;3091:44;;3142:21;3157:5;3142:14;:21;;:::i;:::-;3170:19;3185:3;3170:14;:19;;:::i;:::-;3212:25;3230:6;3212:8;;;:13;3221:3;3212:13;;;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;3196:8;;;:13;3205:3;3196:13;;;;;;;;;;;;;;;;:41;;;;;;;3262:27;3282:6;3262:8;;;:15;3271:5;3262:15;;;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;3244:8;;;:15;3253:5;3244:15;;;;;;;;;;;;;;;;:45;;;;;;;3325:22;3340:6;3325:10;:14;;:22;;;;:::i;:::-;3296:7;;;:14;3304:5;3296:14;;;;;;;;;;;;;;;;;:26;3311:10;3296:26;;;;;;;;;;;;;;;;:51;;;;;;;3375:3;3359:28;;3368:5;3359:28;;;3380:6;3359:28;;;;;;;;;;;;;;;;;;1577:1;;2981:412:::0;;;;;:::o;22562:174::-;22624:4;22648:80;22691:10;22702:12;22674:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22664:52;;;;;;22659:58;;22719:8;22648:10;:80;;:::i;:::-;22641:87;;;;22562:174;;;;:::o;22850:1357::-;22924:4;22941:5;:3;:5;;:::i;:::-;22988:14;23012:5;22988:30;;23050:7;23037:9;:20;;:46;;;;;23073:10;;;;23061:9;:22;23037:46;23029:55;;;;;;;;23110:1;23098:9;:13;23095:1027;;;23143:1;23130:11;;;;:14;23127:156;;;23250:2;23238:9;:14;;;;;;;;23209:9;;;23219:14;;;;23209:25;;;;;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;;;;23127:156;23320:1;23300:22;;:8;:22;;;;23297:208;;;23343:8;23366:3;23354:9;:15;;;;;;;;23343:26;;23405:3;23388:13;;:20;;;;;;;;;;;;;;;23464:3;23427:7;;;:17;23435:8;23427:17;;;;;;;;;;;;;;;;;:25;;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23297:208;;23548:1;23533:12;:16;23522:8;;;;:27;23519:401;;;23596:1;23581:12;:16;23570:8;;:27;;;;;;;23629:9;23616:10;;:22;;;;;;;23519:401;;;23707:10;;;;23694;;;;:23;23691:214;;;23742:8;;:10;;;;;;;;;;;;;;;;;23788:9;23775:10;;:22;;;;;;;23691:214;;;23876:9;23862:10;;:23;;;;;;;;;;;;;;;23691:214;23519:401;23953:86;;;;;;;;23973:9;23953:86;;;;;;24001:7;23994:15;;23953:86;;;;;;24028:8;;;;23953:86;;;;;;;23934:4;;;:16;23939:10;23934:16;;;;;;;;;;;;;;;;:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24066:10;24059:51;;;24082:7;24077:13;;24091:8;;;;24100:9;24059:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23095:1027;24132:9;:7;:9;;:::i;:::-;;24190:8;;;;24183:16;;;;;22850:1357;;;;;;:::o;4633:33::-;4665:1;4633:33;:::o;683:23::-;;;;;;;;;;;;;:::o;6185:39::-;6219:5;6185:39;:::o;24355:559::-;24402:4;24440:1;24427:9;;;;:14;:27;;;;;24453:1;24445:5;:9;24427:27;:50;;;;;6219:5;24458;:19;;24427:50;24419:59;;;;;;;;24489:6;24514:5;24498:6;;;:13;;;;:21;24489:30;;6219:5;24533:1;:14;24530:59;;;6219:5;24563:14;;;;24530:59;24603:6;24610;;;:13;;;;24603:20;;24599:99;24626:1;24624;:3;24599:99;;;24672:6;;;24684:1;24672:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24599:99;24628:3;;;;;;;24599:99;;;;6219:5;24711:6;;;:13;;;;:25;;24708:167;;;24825:2;24810:12;:17;;;;;;;;24793:12;:35;24781:9;;:47;;;;;;;24854:9;;;;24843:8;;:20;;;;;;;24708:167;24892:6;;;:13;;;;24885:21;;;;;24355:559;;;;;:::o;9127:362::-;9177:4;9211:1;9197:11;;;;:15;9194:56;;;9236:1;9229:9;;;;9194:56;9260:11;6219:5;9304:2;:15;9290:9;;;;9275:12;:24;9274:46;;;;;;;;9260:60;;9343:14;;;;9334:6;:23;9331:64;;;9381:1;9374:9;;;;;9331:64;6219:5;9463:2;:15;9449:9;;;;9434:12;:24;9433:46;;;;;;;;6219:5;9413:2;:15;9412:68;9405:76;;;;;9127:362;;;:::o;8407:115::-;8466:4;8495;;;:12;8500:6;8495:12;;;;;;;;;;;;;;;;;:18;;;;;;;;;;;;8490:24;;8483:31;;;;8407:115;;;;:::o;9917:199::-;7046:8;;;;;;;;;;;7032:22;;:10;:22;;;7025:30;;;;;;10011:1:::1;9995:18;;:4;:18;;;;9988:26;;;;;;10025;10040:10;10025:14;:26;;:::i;:::-;10062:20;10077:4;10062:14;:20;;:::i;:::-;10104:4;10093:8;;:15;;;;;;;;;;;;;;;;;;7066:1;9917:199:::0;;:::o;27613:173::-;27663:6;27670:1;27663:8;;27682:97;27689:4;27687:1;:6;27682:97;;;27717:9;:7;:9;;:::i;:::-;27716:10;27713:55;;;27746:7;;;27713:55;27682:97;27694:3;;;;;;;27682:97;;;27613:173;;;:::o;18474:840::-;18526:4;18544:17;;:::i;:::-;18564:4;;;:10;18569:4;18564:10;;;;;;;;;;;;;;;;;18544:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18604:1;18590:6;:12;;;:15;;;18589:54;;;;18641:1;18624:6;:15;;;:18;;;;18589:54;:101;;;;18674:6;:15;;;18661:28;;:12;:28;18589:101;:169;;;;6219:5;18741:2;:15;18722:6;:15;;;:35;;;18708:12;:49;;18589:169;18585:210;;;18781:1;18774:9;;;;;18585:210;18837:3;18821:6;:15;;;:19;18808:32;;:12;:32;18805:174;;;18909:57;18918:6;18947;:15;;;18937:26;;;18932:32;;18909:8;:57;;:::i;:::-;18902:65;;;;;18805:174;19002:1;18992:9;;;;:11;18989:298;;;19019:11;19033:24;19041:6;:15;;;19033:24;;:7;:24;;:::i;:::-;19019:38;;19083:9;19075:4;:17;;;19072:211;;;19163:6;:12;;;19158:18;;19151:26;;;;;;19072:211;;;19237:29;19246:6;19260:4;19237:8;:29;;:::i;:::-;19230:37;;;;;;19072:211;18989:298;;19304:1;19297:9;;;;;18474:840;;;;;:::o;10716:110::-;6956:5;;;;;;;;;;;6942:19;;:10;:19;;;6935:27;;;;;;10792:1:::1;10777:12;:16;10766:8;;:27;;;;;;;10817:1;10804:10;;:14;;;;;;;6973:1;10716:110:::0;:::o;6035:20::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7652:125::-;7716:4;7745:7;;;:15;7753:6;7745:15;;;;;;;;;;;;;;;;;:23;;;;;;;;;;;;7740:29;;7733:36;;;;7652:125;;;;:::o;5699:25::-;;;;;;:::o;2468:115::-;2533:12;2561:8;;;:16;2570:6;2561:16;;;;;;;;;;;;;;;;;;2554:23;;;;2468:115;;;;:::o;7442:98::-;7489:4;7518:6;;;:13;;;;7506:26;;;;7442:98;;:::o;5834:24::-;;;;;;:::o;8171:133::-;8233:4;8262:7;;;:15;8270:6;8262:15;;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;8257:39;;8250:46;;;;8171:133;;;;:::o;5542:23::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;650:20::-;;;;;;;;;;;;;:::o;8906:124::-;8971:4;9000;;;:12;9005:6;9000:12;;;;;;;;;;;;;;;;;:21;;;;;;;;;;;;8995:27;;8988:34;;;;8906:124;;;;:::o;8656:116::-;8714:4;8743;;;:12;8748:6;8743:12;;;;;;;;;;;;;;;;;:20;;;;;;;;;;;;8738:26;;8731:33;;;;8656:116;;;;:::o;4588:38::-;;;;;;;;;;;;;;;;;;;;;:::o;12541:319::-;12613:1;12583:7;;;:19;12591:10;12583:19;;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;:31;;;:88;;;;;12659:12;12618:7;;;:19;12626:10;12618:19;;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;:53;;;;12583:88;12580:273;;;12687:12;12702:7;;;:19;12710:10;12702:19;;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;12687:42;;;;12774:1;12744:7;;;:19;12752:10;12744:19;;;;;;;;;;;;;;;;;:27;;;:31;;;;;;;;;;;;;;;;;;12807:7;12790:13;;:24;;;;;;;;;;;;;;;12829:12;12833:7;12829:3;:12;;:::i;:::-;12580:273;;12541:319;:::o;5287:27::-;;;;;;:::o;9622:190::-;6956:5;;;;;;;;;;;6942:19;;:10;:19;;;6935:27;;;;;;9710:1:::1;9694:18;;:4;:18;;;;9687:26;;;;;;9724;9739:10;9724:14;:26;;:::i;:::-;9761:20;9776:4;9761:14;:20;;:::i;:::-;9800:4;9792:5;;:12;;;;;;;;;;;;;;;;;;6973:1;9622:190:::0;;:::o;1743:513::-;1819:6;1567:1;1560:4;:8;1541;;:15;;:27;;1534:35;;;;;;1834:26:::1;1849:10;1834:14;:26;;:::i;:::-;1890:32;1915:6;1890:8;;;:20;1899:10;1890:20;;;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;1867:8;;;:20;1876:10;1867:20;;;;;;;;;;;;;;;;:55;;;;;;;1947:4;1932:20;;:3;:20;;;1929:322;;;1965:21;1980:5;;;;;;;;;;;1965:14;:21;;:::i;:::-;2015:27;2035:6;2015:8;;;:15;2024:5;;;;;;;;;;;2015:15;;;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;1997:8;;;:15;2006:5;;;;;;;;;;;1997:15;;;;;;;;;;;;;;;;:45;;;;;;;2079:5;;;;;;;;;;;2058:35;;2067:10;2058:35;;;2086:6;2058:35;;;;;;;;;;;;;;;;;;1929:322;;;2123:19;2138:3;2123:14;:19;;:::i;:::-;2169:25;2187:6;2169:8;;;:13;2178:3;2169:13;;;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2153:8;;;:13;2162:3;2153:13;;;;;;;;;;;;;;;;:41;;;;;;;2231:3;2210:33;;2219:10;2210:33;;;2236:6;2210:33;;;;;;;;;;;;;;;;;;1929:322;1577:1;1743:513:::0;;;;:::o;24997:89::-;25039:4;25063:14;25073:3;25063:9;:14;;:::i;:::-;25056:22;;;;24997:89;;:::o;5773:24::-;;;;;;:::o;11673:70::-;11721:14;:12;:14;;:::i;:::-;11673:70;:::o;5966:32::-;;;;;;:::o;13567:73::-;13619:13;13626:5;;;;;;;;;;;13619:6;:13;;:::i;:::-;13567:73;:::o;5436:43::-;;;;;;:::o;5192:29::-;;;;;;:::o;11119:484::-;6956:5;;;;;;;;;;;6942:19;;:10;:19;;;6935:27;;;;;;11182:14:::1;:12;:14;;:::i;:::-;11225:1;11215:7;:11;:90;;;;;11298:7;11282:13;;;;11276:2;11272:1;11256:13;;;;:17;:22;;;;;;;;11255:40;:50;11230:21;:75;;11215:90;11207:99;;;;;;;;11356:1;11337:16;;;;:20;;;;;;;;11320:13;;;;:37;;11317:201;;;11450:3;11426:21;:27;;;;;;;;11415:7;:38;;11414:91;;;;;11493:12;11474:15;11458:13;;;;:31;:47;;11414:91;11406:100;;;;;;;;11317:201;11528:10;:19;;:28;11548:7;11528:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11583:12;11567:13;;:28;;;;;;;6973:1;11119:484:::0;;:::o;6253:29::-;;;;;;:::o;11832:628::-;11891:1;11877:11;;;;:15;:65;;;;;11940:1;6219:5;11927:14;11912:11;;;;:30;11896:12;:46;;11877:65;11874:579;;;11987:1;11973:11;;:15;;;;;;;11874:579;;;12072:1;12060:9;;;;:13;12057:385;;;12087:11;6219:5;12131:2;:15;12117:9;;;;12102:12;:24;12101:47;;;;;;;;12087:61;;12198:1;12179:9;;;:16;;;;:20;12170:6;:29;12167:94;;;12224:9;;;12239:1;12224:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12167:94;12291:14;;;;12282:6;:23;:43;;;;;12324:1;12309:11;;;;:16;12282:43;:84;;;;;12365:1;12346:9;;;:16;;;;:20;12329:14;;;;:37;12282:84;12279:148;;;12391:14;;:16;;;;;;;;;;;;;;;;;12279:148;12057:385;;11874:579;11832:628;:::o;4269:144::-;4352:14;4382:7;;;:15;4390:6;4382:15;;;;;;;;;;;;;;;;;:25;4398:8;4382:25;;;;;;;;;;;;;;;;;;4375:32;;;;4269:144;;;;;:::o;5900:26::-;;;;;;:::o;16433:136::-;16500:1;16485:11;;;;:16;16477:25;;;;;;;;16513:26;16528:10;16513:14;:26;;:::i;:::-;16550:11;:9;:11;;:::i;:::-;16433:136;:::o;5374:29::-;;;;;;:::o;15874:499::-;15938:1;15923:11;;;;:16;15915:25;;;;;;;;15951:26;15966:10;15951:14;:26;;:::i;:::-;15988:22;16036:6;16013:8;;;:20;16022:10;16013:20;;;;;;;;;;;;;;;;;;:29;15988:54;;16086:1;16058:52;;16067:10;16058:52;;;16089:8;;;:20;16098:10;16089:20;;;;;;;;;;;;;;;;;;16058:52;;;;;;;;;;;;;;;;;;16145:8;;;:20;16154:10;16145:20;;;;;;;;;;;;;;;;16138:27;;;;16249:17;16232:13;;:34;;;;;;;;;;;;;;;16340:2;16336:1;16316:17;:21;:26;;;;;;;;16277:7;;;:19;16285:10;16277:19;;;;;;;;;;;;;;;;;:27;;;:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16354:11;:9;:11;;:::i;:::-;15874:499;;:::o;5505:30::-;;;;;;:::o;7902:135::-;7965:4;7994:7;;;:15;8002:6;7994:15;;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;7989:40;;7982:47;;;;7902:135;;;;:::o;10226:170::-;6956:5;;;;;;;;;;;6942:19;;:10;:19;;;6935:27;;;;;;10315:1:::1;10300:11;;;;:16;:33;;;;;10332:1;10320:9;;;;:13;10300:33;:57;;;;;10352:5;10337:12;:20;10300:57;10292:66;;;;;;;;10383:5;10369:11;;:19;;;;;;;6973:1;10226:170:::0;;:::o;352:104::-;404:4;429:1;424;:6;;417:14;;;;;;449:1;445;:5;438:12;;;;352:104;;;;;:::o;17462:949::-;17536:4;17573:14;17597:7;:15;;;17573:40;;17624:10;17647:5;17637:7;:15;17624:28;;17663:14;17939:1;17926:8;17920:3;:14;17919:21;;;:29;;17947:1;17919:29;;;17943:1;17919:29;17891:1;17879:7;17873:3;:13;17872:20;;;:28;;17899:1;17872:28;;;17895:1;17872:28;17844:1;17833:6;17827:3;:12;17826:19;;;:27;;17852:1;17826:27;;;17848:1;17826:27;17798:1;17788:5;17782:3;:11;17781:18;;;:26;;17806:1;17781:26;;;17802:1;17781:26;17753:1;17744:4;17738:3;:10;17737:17;;;:25;;17761:1;17737:25;;;17757:1;17737:25;17709:1;17701:3;17695;:9;17694:16;;;:24;;17717:1;17694:24;;;17713:1;17694:24;17693:71;:116;:162;:209;:257;17663:287;;;;17975:1;17964:7;:12;;;17961:80;;;18021:7;18004;:13;;;17999:19;;:29;17992:37;;;;;;;17961:80;18065:1;18054:7;:12;;;18051:78;;;18111:5;18094:7;:13;;;18089:19;;:27;18082:35;;;;;;;18051:78;18153:1;18142:7;:12;;;18139:76;;;18199:3;18182:7;:13;;;18177:19;;:25;18170:33;;;;;;;18139:76;18239:1;18228:7;:12;;;18225:75;;;18285:2;18268:7;:13;;;18263:19;;:24;18256:32;;;;;;;18225:75;18324:1;18313:7;:12;;;18310:74;;;18370:1;18353:7;:13;;;18348:19;;:23;18341:31;;;;;;;18310:74;18401:1;18394:9;;;;;;;17462:949;;;;;;;;:::o;26353:408::-;26405:6;26424:10;26460:2;26447:9;;;;26438:6;:18;26437:25;;;;;;;;26424:38;;26473:9;26485:6;;;6219:5;26492;:18;;;;;;;;26485:26;;;;;;;;;;;;;;;;;;;;;;26473:38;;26555:3;26547:4;:11;;6219:5;26525;:18;;;;;;;;:33;;26522:123;;;26582:9;26575:17;;;;;;26522:123;26655:10;26691:2;26678:9;;;;26669:6;:18;26668:25;;;;;;;;26655:38;;26743:8;26733:5;26728:2;:10;26719:4;:20;;26718:33;26704:49;;;;;;;26353:408;;;;;;;:::o;12868:619::-;12914:11;12952:1;12928:21;:25;;;;;;;;12914:39;;12977:7;12967:6;:17;;12964:516;;;13001:10;:19;;:28;13021:7;13001:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13057:8;13047:7;:18;13044:72;;;13086:14;:12;:14;;:::i;:::-;13044:72;12964:516;;;13157:16;13186:6;13176:7;:16;13157:35;;13224:11;13207:13;;:28;;;;;;;;;;;;;;;13289:11;13250:7;;;:19;13258:10;13250:19;;;;;;;;;;;;;;;;;:27;;;:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13378:16;13363:12;:31;13316:7;;;:19;13324:10;13316:19;;;;;;;;;;;;;;;;;:37;;;:79;;;;;;;;;;;;;;;;;;13441:10;:19;;:27;13461:6;13441:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12964:516;;12868:619;;;:::o;25094:1251::-;25166:4;26332:3;6219:5;26307:6;26302:12;;:25;;;;;;;;26300:35;;26277:3;26263:8;26257:1;26250:6;:8;26240:19;;;26235:25;;:36;26233:47;;26164:3;26150:8;26144:1;26137:6;:8;26127:19;;;26122:25;;:36;26120:47;;26051:3;26037:8;26031:1;26024:6;:8;26014:19;;;26009:25;;:36;26007:47;;25938:3;25924:8;25918:1;25911:6;:8;25901:19;;;25896:25;;:36;25894:47;;25825:3;25811:8;25805:1;25798:6;:8;25788:19;;;25783:25;;:36;25781:47;;25713:2;25699:8;25693:1;25686:6;:8;25676:19;;;25671:25;;:36;25669:46;;25601:2;25587:8;25581:1;25574:6;:8;25564:19;;;25559:25;;:36;25557:46;;25489:2;25475:8;25469:1;25462:6;:8;25452:19;;;25447:25;;:36;25445:46;;25377:2;25363:8;25357:1;25350:6;:8;25340:19;;;25335:25;;:36;25333:46;;25263:8;25250:6;25240:19;;;25235:25;;:36;25233:148;:260;:372;:484;:597;:710;:823;:936;:1049;:1103;25225:1112;;;;25094:1251;;;;;:::o;460:121::-;512:4;525:6;538:1;534;:5;525:14;;558:1;553;:6;;546:14;;;;;;574:1;567:8;;;;;460:121;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betsize\",\"type\":\"uint256\"}],\"name\":\"LogBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"LogDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlockNumber\",\"type\":\"uint256\"}],\"name\":\"LogLate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"LogLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRecordWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"LogWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sadd\",\"type\":\"uint256\"}],\"name\":\"addHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addHashes128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betBlockNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betHashOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"betOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeAnimator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"coldStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coldStoreLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashBetMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashBetSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashFirst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashesSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hotStore\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseKeeping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investBalanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"play\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"playRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"playSystem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"putHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"putHashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxsum\",\"type\":\"uint256\"}],\"name\":\"setBetMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"setInvestStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletBlockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletPeriodOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"won\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addHashes(uint256)\":{\"details\":\"Create hash data swap space\",\"params\":{\"_sadd\":\"Number of hashes to add (<=256)\"}},\"addHashes128()\":{\"details\":\"Create hash data swap space, add 128 hashes\"},\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens than an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"remaining\":\"A uint specifing the amount of tokens still avaible for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint representing the amount owned by the passed address.\"}},\"betBlockNumberOf(address)\":{\"details\":\"Show block number of lottery run for the bet.\",\"params\":{\"_owner\":\"The address of the player.\"}},\"betHashOf(address)\":{\"details\":\"Show block number of lottery run for the bet.\",\"params\":{\"_owner\":\"The address of the player.\"}},\"betOf(address)\":{\"details\":\"Check if won in lottery\"},\"betValueOf(address)\":{\"details\":\"Show bet size.\",\"params\":{\"_owner\":\"The address of the player.\"}},\"changeAnimator(address)\":{\"details\":\"Change animator.\",\"params\":{\"_who\":\"The address of new animator.\"}},\"changeOwner(address)\":{\"details\":\"Change owner.\",\"params\":{\"_who\":\"The address of new owner.\"}},\"coldStore(uint256)\":{\"details\":\"Move funds to cold storageinvestBalance and walletBalance is protected from withdraw by ownerif funding is > 50% admin can withdraw only 0.25% of balance weakly\",\"params\":{\"_amount\":\"The amount of wei to move to cold storage\"}},\"disinvest()\":{\"details\":\"Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\"},\"dividendsBlocks()\":{\"details\":\"Print number of block till next expected dividend payment\"},\"hashesLength()\":{\"details\":\"Show length of allocated swap space\"},\"hotStore()\":{\"details\":\"Move funds to contract jackpot\"},\"houseKeeping()\":{\"details\":\"Update accounting\"},\"invest(address)\":{\"details\":\"Buy tokens with affiliate partner\",\"params\":{\"_partner\":\"Affiliate partner\"}},\"investDirect()\":{\"details\":\"Buy tokens\"},\"payDividends()\":{\"details\":\"Pay unpaid dividends\"},\"payWallet()\":{\"details\":\"Pay balance from wallet\"},\"play()\":{\"details\":\"Play in lottery\"},\"playRandom(address)\":{\"details\":\"Play in lottery with random numbers\",\"params\":{\"_partner\":\"Affiliate partner\"}},\"playSystem(uint256,address)\":{\"details\":\"Play in lottery with own numbers\",\"params\":{\"_partner\":\"Affiliate partner\"}},\"putHash()\":{\"details\":\"Fill hash data\"},\"putHashes(uint256)\":{\"details\":\"Fill hash data many times\",\"params\":{\"_num\":\"Number of iterations\"}},\"resetBet()\":{\"details\":\"Reset bet size accounting, to increase bet volume above safe limits\"},\"setBetMax(uint256)\":{\"details\":\"Set maximum bet size per block\",\"params\":{\"_maxsum\":\"The maximum bet size in wei.\"}},\"setInvestStart(uint256)\":{\"details\":\"Set ICO Start block.\",\"params\":{\"_when\":\"The block number of the ICO.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint the amout of tokens to be transfered\"}},\"walletBalanceOf(address)\":{\"details\":\"Show balance of wallet\",\"params\":{\"_owner\":\"The address of the account.\"}},\"walletBlockOf(address)\":{\"details\":\"Show block number when withdraw can continue\",\"params\":{\"_owner\":\"The address of the account.\"}},\"walletPeriodOf(address)\":{\"details\":\"Show last dividend period processed\",\"params\":{\"_owner\":\"The address of the account.\"}},\"won()\":{\"details\":\"Check if won in lottery\"}},\"title\":\"SmartBillions contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"SmartBillions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.6, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 525,562,699,701,703,705,707,709,711,713,715,717\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        msg.sender.transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            msg.sender.transfer(_amount);\\r\\n            if(_amount > 1 finney) {\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            msg.sender.transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5c9f1252b5d6ddf3a78d547090c931424b867fccaf9f2adaa7da50cd6a3525ff\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"StandardToken":{"evm":{"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens than an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"remaining\":\"A uint specifing the amount of tokens still avaible for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint representing the amount owned by the passed address.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint the amout of tokens to be transfered\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"StandardToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.6, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 525,562,699,701,703,705,707,709,711,713,715,717\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        msg.sender.transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            msg.sender.transfer(_amount);\\r\\n            if(_amount > 1 finney) {\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            msg.sender.transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5c9f1252b5d6ddf3a78d547090c931424b867fccaf9f2adaa7da50cd6a3525ff\",\"license\":\"UNLICENSED\"}},\"version\":1}"}}},"errors":[{"component":"general","errorCode":"3628","formattedMessage":"SmartBillions.sol:120:1: Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.\ncontract SmartBillions is StandardToken {\n^ (Relevant source part starts here and spans across multiple lines).\nSmartBillions.sol:600:5: The payable fallback function is defined here.\n    fallback() external payable {\n    ^ (Relevant source part starts here and spans across multiple lines).\n","message":"This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.","secondarySourceLocations":[{"end":22236,"file":"SmartBillions.sol","message":"The payable fallback function is defined here.","start":21665}],"severity":"warning","sourceLocation":{"end":27791,"file":"SmartBillions.sol","start":4464},"type":"Warning"}],"sources":{"SmartBillions.sol":{"id":0}}}
