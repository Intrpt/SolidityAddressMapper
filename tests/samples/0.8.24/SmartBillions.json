{"contracts":{"SmartBillions.sol":{"BasicToken":{"evm":{"deployedBytecode":{"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint representing the amount owned by the passed address.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"BasicToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 527,564,701,703,705,707,709,711,713,715,717,719\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  using SafeMath for uint;\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n            if(_amount > 1e6 gwei) { // 1 finney\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            payable(msg.sender).transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            payable(msg.sender).transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6c1185b99d1808e67a47878ea61ef0cd3dc5bc8c21a5f58fc02521a138e0d618\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"ERC20":{"evm":{"deployedBytecode":{"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"ERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 527,564,701,703,705,707,709,711,713,715,717,719\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  using SafeMath for uint;\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n            if(_amount > 1e6 gwei) { // 1 finney\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            payable(msg.sender).transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            payable(msg.sender).transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6c1185b99d1808e67a47878ea61ef0cd3dc5bc8c21a5f58fc02521a138e0d618\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"ERC20Basic":{"evm":{"deployedBytecode":{"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"ERC20Basic\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 527,564,701,703,705,707,709,711,713,715,717,719\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  using SafeMath for uint;\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n            if(_amount > 1e6 gwei) { // 1 finney\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            payable(msg.sender).transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            payable(msg.sender).transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6c1185b99d1808e67a47878ea61ef0cd3dc5bc8c21a5f58fc02521a138e0d618\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"SafeMath":{"evm":{"deployedBytecode":{"object":"730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212205a5c8e700b12c16a60e5e9d9fb966210e9eec08c84099a0766b9a8a95ffb353964736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS TLOAD DUP15 PUSH17 0xB12C16A60E5E9D9FB966210E9EEC08C84 MULMOD SWAP11 SMOD PUSH7 0xB9A8A95FFB3539 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"330:254:0:-:0;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"SafeMath\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 527,564,701,703,705,707,709,711,713,715,717,719\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  using SafeMath for uint;\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n            if(_amount > 1e6 gwei) { // 1 finney\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            payable(msg.sender).transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            payable(msg.sender).transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6c1185b99d1808e67a47878ea61ef0cd3dc5bc8c21a5f58fc02521a138e0d618\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"SmartBillions":{"evm":{"deployedBytecode":{"object":"60806040526004361061036e575f3560e01c8063814b3fe0116101c5578063c27509cf116100f6578063de46907111610094578063df1ead821161006e578063df1ead8214610cb3578063e4cc98a514610cc9578063e73cc2eb14610cf3578063e76ece0114610d2f5761036f565b8063de46907114610c49578063de88a34214610c73578063df12b94e14610c895761036f565b8063cd88333e116100d0578063cd88333e14610ba5578063d6d2500814610bcd578063d9fa933514610bf7578063dd62ed3e14610c0d5761036f565b8063c27509cf14610b47578063c416436514610b51578063cd0a314b14610b7b5761036f565b8063a367d99a11610163578063b3470e971161013d578063b3470e9714610abf578063bc85171814610ae9578063be1eefbf14610b13578063bfba902914610b1d5761036f565b8063a367d99a14610a45578063a6f9dae114610a6f578063a9059cbb14610a975761036f565b8063904d22481161019f578063904d2248146109ab57806393e84cd9146109e757806395d89b4114610a055780639ce962ca14610a2f5761036f565b8063814b3fe0146109095780638da5cb5b146109455780638eecddcf1461096f5761036f565b8063380f30871161029f578063501895ae1161023d57806370a082311161021757806370a082311461083d57806370ccd928146108795780637227c7ce146108a3578063785ce7ca146108cd5761036f565b8063501895ae1461079b57806366ce3bd2146107d75780636b486818146108135761036f565b806340c73d171161027957806340c73d17146106f9578063413e90e7146107215780634288d7591461074957806343146f36146107855761036f565b8063380f3087146106575780633de8d340146106935780633e43b652146106bd5761036f565b806318160ddd1161030c57806326699576116102e657806326699576146105a9578063313ce567146105d957806331c2b6e61461060357806337c430881461062d5761036f565b806318160ddd1461052757806323b872dd146105515780632406e9fa146105795761036f565b8063095ea7b311610348578063095ea7b31461049557806312c8052f146104bd57806313e4b51f146104d357806316d190e3146104fd5761036f565b806303f9c7931461042757806306fdde03146104435780630751076d1461046d5761036f565b5b5f3411156103c057600160085411156103b1576103ac60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610d57565b6103bb565b6103b96115ee565b505b610425565b5f60085414801561040d57505f60035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054115b1561041c5761041b33611628565b5b61042461197f565b5b005b610441600480360381019061043c9190614873565b610d57565b005b34801561044e575f80fd5b5061045761221d565b6040516104649190614928565b60405180910390f35b348015610478575f80fd5b50610493600480360381019061048e919061497b565b612256565b005b3480156104a0575f80fd5b506104bb60048036038101906104b691906149a6565b6122bd565b005b3480156104c8575f80fd5b506104d161197f565b005b3480156104de575f80fd5b506104e7612439565b6040516104f491906149fe565b60405180910390f35b348015610508575f80fd5b50610511612529565b60405161051e9190614a26565b60405180910390f35b348015610532575f80fd5b5061053b61252f565b6040516105489190614a26565b60405180910390f35b34801561055c575f80fd5b5061057760048036038101906105729190614a3f565b612534565b005b610593600480360381019061058e9190614873565b612801565b6040516105a09190614a26565b60405180910390f35b6105c360048036038101906105be9190614a8f565b61283d565b6040516105d09190614a26565b60405180910390f35b3480156105e4575f80fd5b506105ed612be4565b6040516105fa9190614a26565b60405180910390f35b34801561060e575f80fd5b50610617612be8565b6040516106249190614adc565b60405180910390f35b348015610638575f80fd5b50610641612c0d565b60405161064e9190614a26565b60405180910390f35b348015610662575f80fd5b5061067d6004803603810190610678919061497b565b612c13565b60405161068a9190614a26565b60405180910390f35b34801561069e575f80fd5b506106a7612ce9565b6040516106b49190614a26565b60405180910390f35b3480156106c8575f80fd5b506106e360048036038101906106de9190614873565b612d80565b6040516106f09190614a26565b60405180910390f35b348015610704575f80fd5b5061071f600480360381019061071a9190614873565b612e05565b005b34801561072c575f80fd5b506107476004803603810190610742919061497b565b612ef3565b005b348015610754575f80fd5b5061076f600480360381019061076a9190614873565b612f21565b60405161077c9190614a26565b60405180910390f35b348015610790575f80fd5b50610799613150565b005b3480156107a6575f80fd5b506107c160048036038101906107bc919061497b565b6131c9565b6040516107ce9190614a26565b60405180910390f35b3480156107e2575f80fd5b506107fd60048036038101906107f89190614873565b6131e9565b60405161080a9190614a26565b60405180910390f35b34801561081e575f80fd5b50610827613272565b6040516108349190614a26565b60405180910390f35b348015610848575f80fd5b50610863600480360381019061085e9190614873565b613278565b6040516108709190614a26565b60405180910390f35b348015610884575f80fd5b5061088d6132be565b60405161089a9190614a26565b60405180910390f35b3480156108ae575f80fd5b506108b76132ca565b6040516108c49190614a26565b60405180910390f35b3480156108d8575f80fd5b506108f360048036038101906108ee9190614873565b6132d0565b6040516109009190614a26565b60405180910390f35b348015610914575f80fd5b5061092f600480360381019061092a919061497b565b61332e565b60405161093c9190614a26565b60405180910390f35b348015610950575f80fd5b5061095961334e565b6040516109669190614adc565b60405180910390f35b34801561097a575f80fd5b5061099560048036038101906109909190614873565b613373565b6040516109a29190614a26565b60405180910390f35b3480156109b6575f80fd5b506109d160048036038101906109cc9190614873565b6133d1565b6040516109de9190614a26565b60405180910390f35b6109ef6115ee565b6040516109fc9190614a26565b60405180910390f35b348015610a10575f80fd5b50610a1961342f565b604051610a269190614928565b60405180910390f35b348015610a3a575f80fd5b50610a43613468565b005b348015610a50575f80fd5b50610a59613683565b604051610a669190614a26565b60405180910390f35b348015610a7a575f80fd5b50610a956004803603810190610a909190614873565b613689565b005b348015610aa2575f80fd5b50610abd6004803603810190610ab891906149a6565b613777565b005b348015610aca575f80fd5b50610ad3613af3565b604051610ae09190614a26565b60405180910390f35b348015610af4575f80fd5b50610afd613b03565b604051610b0a9190614a26565b60405180910390f35b610b1b613b09565b005b348015610b28575f80fd5b50610b31613b13565b604051610b3e9190614a26565b60405180910390f35b610b4f613b19565b005b348015610b5c575f80fd5b50610b65613b45565b604051610b729190614a26565b60405180910390f35b348015610b86575f80fd5b50610b8f613b4b565b604051610b9c9190614a26565b60405180910390f35b348015610bb0575f80fd5b50610bcb6004803603810190610bc6919061497b565b613b51565b005b348015610bd8575f80fd5b50610be1613c98565b604051610bee9190614a26565b60405180910390f35b348015610c02575f80fd5b50610c0b613c9e565b005b348015610c18575f80fd5b50610c336004803603810190610c2e9190614af5565b613da2565b604051610c409190614a26565b60405180910390f35b348015610c54575f80fd5b50610c5d613e24565b604051610c6a9190614a26565b60405180910390f35b348015610c7e575f80fd5b50610c87613e2a565b005b348015610c94575f80fd5b50610c9d613e4a565b604051610caa9190614a26565b60405180910390f35b348015610cbe575f80fd5b50610cc7613e50565b005b348015610cd4575f80fd5b50610cdd614093565b604051610cea9190614a26565b60405180910390f35b348015610cfe575f80fd5b50610d196004803603810190610d149190614873565b614099565b604051610d269190614a26565b60405180910390f35b348015610d3a575f80fd5b50610d556004803603810190610d50919061497b565b6140f3565b005b6001600854118015610d8357506005614000610d739190614b60565b600854610d809190614ba1565b43105b8015610d925750600a54600954105b610d9a575f80fd5b5f349050600954600a54610dae9190614bd4565b811115610e3257600954600a54610dc59190614bd4565b9050600a546009819055505f6008819055503373ffffffffffffffffffffffffffffffffffffffff166108fc610e04833461418090919063ffffffff16565b90811502906040515f60405180830381858888f19350505050158015610e2c573d5f803e3d5ffd5b50610e4b565b8060095f828254610e439190614ba1565b925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480610ed1575060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15610fe957600a81610ee39190614c34565b60075f828254610ef39190614ba1565b92505081905550600a81610f079190614c34565b60055f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f8282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff16610f9a9190614c89565b92506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055506111f1565b60026064600583610ffa9190614b60565b6110049190614c34565b61100e9190614b60565b60075f82825461101e9190614ba1565b9250508190555060646005826110349190614b60565b61103e9190614c34565b60055f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f8282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff166110d19190614c89565b92506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550606460058261112a9190614b60565b6111349190614c34565b60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f8282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff166111a69190614c89565b92506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055505b600b5460055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01601a6101000a81548161ffff021916908361ffff1602179055505f66038d7ea4c68000826112619190614c34565b90505f67016345785d8a000060108461127a9190614b60565b6112849190614c34565b90505f67016345785d8a0000600a8561129d9190614b60565b6112a79190614c34565b90508260035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546112f59190614ba1565b925050819055508160035f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546113699190614ba1565b925050819055508060035f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546113dd9190614ba1565b925050819055508082846113f19190614ba1565b6113fb9190614ba1565b5f8082825461140a9190614ba1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161146e9190614a26565b60405180910390a360015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516114f49190614a26565b60405180910390a360025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161157a9190614a26565b60405180910390a38473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f36a013c86c271c703c54dee591bc768e347954a0a9a1937dd17f5a29e9a8e645866040516115df9190614a26565b60405180910390a35050505050565b5f6116233343604051602001611605929190614d3b565b604051602081830303815290604052805190602001205f1c5f61283d565b905090565b5f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01601a9054906101000a900461ffff1661ffff1690505f60035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205414806116c757505f81145b1561172e57600b5460055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01601a6101000a81548161ffff021916908361ffff1602179055505061197c565b600b54810361173d575061197c565b5f805463ffffffff60035f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461178d9190614b60565b6117979190614c34565b90505f5b600b548310156117e757600c83815481106117b9576117b8614d66565b5b905f5260205f200154826117cd9190614b60565b816117d89190614ba1565b9050828060010193505061179b565b63ffffffff816117f79190614c34565b90508060075f82825461180a9190614ba1565b925050819055508060055f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f8282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff166118849190614c89565b92506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055508260055f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01601a6101000a81548161ffff021916908361ffff1602179055508373ffffffffffffffffffffffffffffffffffffffff167fe1e87f40e4de2a6b68365d854f85940aad44d84933d399007702c6d340da445f8285604051611970929190614d93565b60405180910390a25050505b50565b5f60065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060600160405290815f82015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020015f820160189054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020015f8201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090505f816040015163ffffffff1603611ba55760405180606001604052805f77ffffffffffffffffffffffffffffffffffffffffffffffff1681526020015f63ffffffff168152602001600163ffffffff1681525060065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055506020820151815f0160186101000a81548163ffffffff021916908363ffffffff1602179055506040820151815f01601c6101000a81548163ffffffff021916908363ffffffff1602179055509050505061221b565b5f815f015177ffffffffffffffffffffffffffffffffffffffffffffffff161480611bda57506001816040015163ffffffff16145b15611bed57611be7613468565b5061221b565b806040015163ffffffff164311611c02575f80fd5b43614000600a611c129190614b60565b826040015163ffffffff16611c279190614ba1565b11611da0573373ffffffffffffffffffffffffffffffffffffffff167f770d64c654906ebab085526dd881064f61f0e5990caa94c94167eb29bc4645c6826040015143604051611c78929190614e02565b60405180910390a260405180606001604052805f77ffffffffffffffffffffffffffffffffffffffffffffffff1681526020015f63ffffffff168152602001600163ffffffff1681525060065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055506020820151815f0160186101000a81548163ffffffff021916908363ffffffff1602179055506040820151815f01601c6101000a81548163ffffffff021916908363ffffffff1602179055509050505061221b565b5f806101008360400151611db49190614e29565b63ffffffff16431015611de757826040015163ffffffff16405f1c62ffffff169050611de083826141a6565b9150611fc5565b5f600e541115611e4e57611e04836040015163ffffffff166143d9565b905063010000008163ffffffff1603611e3c57825f015177ffffffffffffffffffffffffffffffffffffffffffffffff169150611e49565b611e4683826141a6565b91505b611fc4565b3373ffffffffffffffffffffffffffffffffffffffff167f770d64c654906ebab085526dd881064f61f0e5990caa94c94167eb29bc4645c6846040015143604051611e9a929190614e02565b60405180910390a260405180606001604052805f77ffffffffffffffffffffffffffffffffffffffffffffffff1681526020015f63ffffffff168152602001600163ffffffff1681525060065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055506020820151815f0160186101000a81548163ffffffff021916908363ffffffff1602179055506040820151815f01601c6101000a81548163ffffffff021916908363ffffffff16021790555090505050505061221b565b5b60405180606001604052805f77ffffffffffffffffffffffffffffffffffffffffffffffff1681526020015f63ffffffff168152602001600163ffffffff1681525060065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055506020820151815f0160186101000a81548163ffffffff021916908363ffffffff1602179055506040820151815f01601c6101000a81548163ffffffff021916908363ffffffff1602179055509050505f8211156121b6573373ffffffffffffffffffffffffffffffffffffffff167e362509948ea59afac5c6fa93fea5327b624bc705a6574f4e9f26e9d8bd7ccc846020015163ffffffff168363ffffffff168560405161214093929190614e60565b60405180910390a2600d548211156121a85781600d819055503373ffffffffffffffffffffffffffffffffffffffff167f955214d16f858518f04c701d01a6e2f5668548b6be3c6f2f0f8981f77f2cfc068360405161219f9190614a26565b60405180910390a25b6121b182614487565b612217565b3373ffffffffffffffffffffffffffffffffffffffff167f7375ed8230669ea9d64a9db629d7ce9501779604a67c95c0111377cf09f5b9b9846020015163ffffffff168363ffffffff1660405161220e929190614d93565b60405180910390a25b5050505b565b6040518060400160405280601381526020017f536d61727442696c6c696f6e7320546f6b656e0000000000000000000000000081525081565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122b3576122b2614e95565b5b8060128190555050565b5f811415801561234557505f60045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205414155b1561235357612352614e95565b5b8060045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161242d9190614a26565b60405180910390a35050565b5f80600f5490505f81148061245a5750600a816124569190614ba1565b4311155b15612468575f915050612526565b5f61010043101561247b575f905061248c565b610100436124899190614bd4565b90505b808210156124b7575f819050600a816124a59190614ec2565b816124b09190614ba1565b9050809250505b5f600a600e54846124c89190614bd4565b6124d29190614c34565b90506124de8382614699565b6013614000836124ee9190614ec2565b815481106124ff576124fe614d66565b5b905f5260205f200181905550600a836125189190614ba1565b600f81905550600193505050505b90565b600d5481565b5f5481565b60606004816125439190614ba1565b5f369050101561255657612555614e95565b5b5f60045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490506125db85611628565b6125e484611628565b6126348360035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546147ea90919063ffffffff16565b60035f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055506126c58360035f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461418090919063ffffffff16565b60035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550612719838261418090919063ffffffff16565b60045f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516127f29190614a26565b60405180910390a35050505050565b5f6128363343604051602001612818929190614d3b565b604051602081830303815290604052805190602001205f1c8361283d565b9050919050565b5f61284661197f565b5f839050670de0b6b3a76400003411158015612863575060125434105b61286b575f80fd5b5f341115612bcf575f600854036128bd576014346128899190614c34565b600c600b548154811061289f5761289e614d66565b5b905f5260205f20015f8282546128b59190614ba1565b925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146129d7575f6064346128fe9190614c34565b90508060075f8282546129119190614ba1565b925050819055508060055f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f8282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff1661298b9190614c89565b92506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550505b6003436129e49190614ba1565b6010541015612a0c576003436129fa9190614ba1565b60108190555034601181905550612a55565b6012546011541115612a3b5760105f815480929190612a2a90614ef2565b919050555034601181905550612a54565b3460115f828254612a4c9190614ba1565b925050819055505b5b60405180606001604052803477ffffffffffffffffffffffffffffffffffffffffffffffff1681526020018262ffffff1663ffffffff16815260200160105463ffffffff1681525060065f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055506020820151815f0160186101000a81548163ffffffff021916908363ffffffff1602179055506040820151815f01601c6101000a81548163ffffffff021916908363ffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff167f063f4540040cf99a22f577ef321c170763020e6277e47275ed9b3d17ec14e13d8262ffffff1660105434604051612bc693929190614e60565b60405180910390a25b612bd7612439565b5060105491505092915050565b5f81565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61400081565b5f80600e54148015612c2457505f82115b8015612c3257506140008211155b612c3a575f80fd5b5f82601380549050612c4c9190614ba1565b9050614000811115612c5e5761400090505b5f60138054905090505b81811015612ca45760136001908060018154018082558091505060019003905f5260205f20015f90919091909150558080600101915050612c68565b5061400060138054905010612cdb57600a43612cc09190614ec2565b43612ccb9190614bd4565b600e81905550600e54600f819055505b601380549050915050919050565b5f806008541115612cfc575f9050612d7d565b5f614000600a612d0c9190614b60565b600e5443612d1a9190614bd4565b612d249190614c34565b9050600b54811115612d39575f915050612d7d565b614000600a612d489190614b60565b600e5443612d569190614bd4565b612d609190614ec2565b614000600a612d6f9190614b60565b612d799190614bd4565b9150505b90565b5f60065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff169050919050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612e6257612e61614e95565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612e9e57612e9d614e95565b5b612ea733611628565b612eb081611628565b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f5b81811015612f1c57612f05612439565b612f0f5750612f1e565b8080600101915050612ef5565b505b50565b5f8060065f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060600160405290815f82015f9054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020015f820160189054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020015f8201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090505f815f015177ffffffffffffffffffffffffffffffffffffffffffffffff16148061304d57506001816040015163ffffffff1611155b806130615750806040015163ffffffff1643105b8061308f5750614000600a6130769190614b60565b816040015163ffffffff1661308b9190614ba1565b4310155b1561309d575f91505061314b565b61010081604001516130af9190614e29565b63ffffffff164310156130db576130d381826040015163ffffffff16405f1c6141a6565b91505061314b565b5f600e541115613146575f6130f9826040015163ffffffff166143d9565b905063010000008163ffffffff160361313357815f015177ffffffffffffffffffffffffffffffffffffffffffffffff169250505061314b565b61313d82826141a6565b9250505061314b565b5f9150505b919050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146131ad576131ac614e95565b5b6003436131ba9190614ba1565b6010819055505f601181905550565b601381815481106131d8575f80fd5b905f5260205f20015f915090505481565b5f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff1679ffffffffffffffffffffffffffffffffffffffffffffffffffff169050919050565b600e5481565b5f60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f601380549050905090565b60105481565b5f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01601c9054906101000a900463ffffffff1663ffffffff169050919050565b600c818154811061333d575f80fd5b905f5260205f20015f915090505481565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01601c9054906101000a900463ffffffff1663ffffffff169050919050565b5f60065f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f0160189054906101000a900463ffffffff1663ffffffff169050919050565b6040518060400160405280600481526020017f504c41590000000000000000000000000000000000000000000000000000000081525081565b5f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff1679ffffffffffffffffffffffffffffffffffffffffffffffffffff1611801561354c57504360055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01601c9054906101000a900463ffffffff1663ffffffff1611155b15613681575f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff1679ffffffffffffffffffffffffffffffffffffffffffffffffffff1690505f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f6101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055508060075f82825461366f9190614bd4565b9250508190555061367f81614487565b505b565b60085481565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146136e6576136e5614e95565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361372257613721614e95565b5b61372b33611628565b61373481611628565b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60406004816137869190614ba1565b5f369050101561379957613798614e95565b5b6137a233611628565b6137f28260035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461418090919063ffffffff16565b60035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036139ee5761389060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611628565b6139018260035f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546147ea90919063ffffffff16565b60035f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516139e19190614a26565b60405180910390a3613aee565b6139f783611628565b613a478260035f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546147ea90919063ffffffff16565b60035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051613ae59190614a26565b60405180910390a35b505050565b5f613afe6080612c13565b905090565b600f5481565b613b11613c9e565b565b60125481565b613b4360015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610d57565b565b600a5481565b60075481565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613bae57613bad614e95565b5b613bb6613c9e565b5f81118015613bf6575080600754600a60098054613bd49190614b60565b613bde9190614c34565b613be89190614ba1565b613bf29190614ba1565b4710155b613bfe575f80fd5b6002600a54613c0d9190614c34565b60095410613c4a5761019047613c239190614c34565b8111158015613c41575043619d80601454613c3e9190614ba1565b11155b613c49575f80fd5b5b3373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015613c8d573d5f803e3d5ffd5b504360148190555050565b60145481565b6001600854118015613ccb57506005614000613cba9190614b60565b600854613cc79190614ba1565b4310155b15613cdc575f600881905550613da0565b5f600e541115613d9f575f614000600a613cf69190614b60565b600e5443613d049190614bd4565b613d0e9190614c34565b90506002600c80549050613d229190614bd4565b811115613d5057600c5f908060018154018082558091505060019003905f5260205f20015f90919091909150555b600b5481118015613d6257505f600854145b8015613d8057506001600c80549050613d7b9190614bd4565b600b54105b15613d9d57600b5f815480929190613d9790614ef2565b91905055505b505b5b565b5f60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b60115481565b5f60085414613e37575f80fd5b613e4033611628565b613e48613468565b565b60095481565b5f60085414613e5d575f80fd5b613e6633611628565b5f66038d7ea4c6800060035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054613eb79190614b60565b90505f73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054604051613f539190614a26565b60405180910390a360035f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f90558060095f828254613fac9190614bd4565b92505081905550600a600982613fc29190614b60565b613fcc9190614c34565b60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f8282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff1661403e9190614c89565b92506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550614090613468565b50565b600b5481565b5f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01601a9054906101000a900461ffff1661ffff169050919050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146141505761414f614e95565b5b600160085414801561416357505f600e54115b801561416e57508043105b614176575f80fd5b8060088190555050565b5f8282111561419257614191614e95565b5b818361419e9190614bd4565b905092915050565b5f80836020015190505f83821890505f8062f00000831662ffffff16146141cd575f6141d0565b60015b5f620f0000841662ffffff16146141e7575f6141ea565b60015b5f61f000851662ffffff1614614200575f614203565b60015b5f610f00861662ffffff1614614219575f61421c565b60015b5f60f0871662ffffff1614614231575f614234565b60015b5f600f881662ffffff1614614249575f61424c565b60015b6142569190614f45565b6142609190614f45565b61426a9190614f45565b6142749190614f45565b61427e9190614f45565b60ff16905060068162ffffff16036142c657626acfc0865f015177ffffffffffffffffffffffffffffffffffffffffffffffff166142bc9190614b60565b93505050506143d3565b60058162ffffff160361430857614e20865f015177ffffffffffffffffffffffffffffffffffffffffffffffff166142fe9190614b60565b93505050506143d3565b60048162ffffff160361434a576101f4865f015177ffffffffffffffffffffffffffffffffffffffffffffffff166143409190614b60565b93505050506143d3565b60038162ffffff160361438b576019865f015177ffffffffffffffffffffffffffffffffffffffffffffffff166143819190614b60565b93505050506143d3565b60028162ffffff16036143cc576003865f015177ffffffffffffffffffffffffffffffffffffffffffffffff166143c29190614b60565b93505050506143d3565b5f93505050505b92915050565b5f80600a600e54846143eb9190614bd4565b6143f59190614c34565b90505f6013614000836144089190614ec2565b8154811061441957614418614d66565b5b905f5260205f200154905060f081901c614000836144379190614c34565b1461444a57630100000092505050614482565b5f600a600e548661445b9190614bd4565b6144659190614ec2565b905062ffffff8160186144789190614b60565b83901c1693505050505b919050565b5f6002476144959190614c34565b90508181106144ff573373ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f193505050501580156144e1573d5f803e3d5ffd5b5066038d7ea4c680008211156144fa576144f9613c9e565b5b614695565b5f818361450c9190614bd4565b90508060075f82825461451f9190614ba1565b925050819055508060055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f8282829054906101000a900479ffffffffffffffffffffffffffffffffffffffffffffffffffff166145999190614c89565b92506101000a81548179ffffffffffffffffffffffffffffffffffffffffffffffffffff021916908379ffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055506202a300436145f29190614ba1565b60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01601c6101000a81548163ffffffff021916908363ffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff166108fc8390811502906040515f60405180830381858888f19350505050158015614692573d5f803e3d5ffd5b50505b5050565b5f60f06140008363ffffffff166146b09190614c34565b901b60d862ffffff6009866146c59190614e29565b63ffffffff16405f1c16901b60c062ffffff6008876146e49190614e29565b63ffffffff16405f1c16901b60a862ffffff6007886147039190614e29565b63ffffffff16405f1c16901b609062ffffff6006896147229190614e29565b63ffffffff16405f1c16901b607862ffffff60058a6147419190614e29565b63ffffffff16405f1c16901b606062ffffff60048b6147609190614e29565b63ffffffff16405f1c16901b604862ffffff60038c61477f9190614e29565b63ffffffff16405f1c16901b603062ffffff60028d61479e9190614e29565b63ffffffff16405f1c16901b601862ffffff60018e6147bd9190614e29565b63ffffffff16405f1c16901b62ffffff8d63ffffffff16405f1c1617171717171717171717905092915050565b5f8082846147f89190614ba1565b90508381101561480b5761480a614e95565b5b8091505092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61484282614819565b9050919050565b61485281614838565b811461485c575f80fd5b50565b5f8135905061486d81614849565b92915050565b5f6020828403121561488857614887614815565b5b5f6148958482850161485f565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156148d55780820151818401526020810190506148ba565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6148fa8261489e565b61490481856148a8565b93506149148185602086016148b8565b61491d816148e0565b840191505092915050565b5f6020820190508181035f83015261494081846148f0565b905092915050565b5f819050919050565b61495a81614948565b8114614964575f80fd5b50565b5f8135905061497581614951565b92915050565b5f602082840312156149905761498f614815565b5b5f61499d84828501614967565b91505092915050565b5f80604083850312156149bc576149bb614815565b5b5f6149c98582860161485f565b92505060206149da85828601614967565b9150509250929050565b5f8115159050919050565b6149f8816149e4565b82525050565b5f602082019050614a115f8301846149ef565b92915050565b614a2081614948565b82525050565b5f602082019050614a395f830184614a17565b92915050565b5f805f60608486031215614a5657614a55614815565b5b5f614a638682870161485f565b9350506020614a748682870161485f565b9250506040614a8586828701614967565b9150509250925092565b5f8060408385031215614aa557614aa4614815565b5b5f614ab285828601614967565b9250506020614ac38582860161485f565b9150509250929050565b614ad681614838565b82525050565b5f602082019050614aef5f830184614acd565b92915050565b5f8060408385031215614b0b57614b0a614815565b5b5f614b188582860161485f565b9250506020614b298582860161485f565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f614b6a82614948565b9150614b7583614948565b9250828202614b8381614948565b91508282048414831517614b9a57614b99614b33565b5b5092915050565b5f614bab82614948565b9150614bb683614948565b9250828201905080821115614bce57614bcd614b33565b5b92915050565b5f614bde82614948565b9150614be983614948565b9250828203905081811115614c0157614c00614b33565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f614c3e82614948565b9150614c4983614948565b925082614c5957614c58614c07565b5b828204905092915050565b5f79ffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b5f614c9382614c64565b9150614c9e83614c64565b9250828201905079ffffffffffffffffffffffffffffffffffffffffffffffffffff811115614cd057614ccf614b33565b5b92915050565b5f8160601b9050919050565b5f614cec82614cd6565b9050919050565b5f614cfd82614ce2565b9050919050565b614d15614d1082614838565b614cf3565b82525050565b5f819050919050565b614d35614d3082614948565b614d1b565b82525050565b5f614d468285614d04565b601482019150614d568284614d24565b6020820191508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f604082019050614da65f830185614a17565b614db36020830184614a17565b9392505050565b5f63ffffffff82169050919050565b5f819050919050565b5f614dec614de7614de284614dba565b614dc9565b614948565b9050919050565b614dfc81614dd2565b82525050565b5f604082019050614e155f830185614df3565b614e226020830184614a17565b9392505050565b5f614e3382614dba565b9150614e3e83614dba565b9250828201905063ffffffff811115614e5a57614e59614b33565b5b92915050565b5f606082019050614e735f830186614a17565b614e806020830185614a17565b614e8d6040830184614a17565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b5f614ecc82614948565b9150614ed783614948565b925082614ee757614ee6614c07565b5b828206905092915050565b5f614efc82614948565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614f2e57614f2d614b33565b5b600182019050919050565b5f60ff82169050919050565b5f614f4f82614f39565b9150614f5a83614f39565b9250828201905060ff811115614f7357614f72614b33565b5b9291505056fea26469706673582212202d48bbd13e762bb8c818ce11641f4a3fd8d6aaeb63012f36024f86cb2931675a64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36E JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x814B3FE0 GT PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xC27509CF GT PUSH2 0xF6 JUMPI DUP1 PUSH4 0xDE469071 GT PUSH2 0x94 JUMPI DUP1 PUSH4 0xDF1EAD82 GT PUSH2 0x6E JUMPI DUP1 PUSH4 0xDF1EAD82 EQ PUSH2 0xCB3 JUMPI DUP1 PUSH4 0xE4CC98A5 EQ PUSH2 0xCC9 JUMPI DUP1 PUSH4 0xE73CC2EB EQ PUSH2 0xCF3 JUMPI DUP1 PUSH4 0xE76ECE01 EQ PUSH2 0xD2F JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0xDE469071 EQ PUSH2 0xC49 JUMPI DUP1 PUSH4 0xDE88A342 EQ PUSH2 0xC73 JUMPI DUP1 PUSH4 0xDF12B94E EQ PUSH2 0xC89 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0xCD88333E GT PUSH2 0xD0 JUMPI DUP1 PUSH4 0xCD88333E EQ PUSH2 0xBA5 JUMPI DUP1 PUSH4 0xD6D25008 EQ PUSH2 0xBCD JUMPI DUP1 PUSH4 0xD9FA9335 EQ PUSH2 0xBF7 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0xC0D JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0xC27509CF EQ PUSH2 0xB47 JUMPI DUP1 PUSH4 0xC4164365 EQ PUSH2 0xB51 JUMPI DUP1 PUSH4 0xCD0A314B EQ PUSH2 0xB7B JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0xA367D99A GT PUSH2 0x163 JUMPI DUP1 PUSH4 0xB3470E97 GT PUSH2 0x13D JUMPI DUP1 PUSH4 0xB3470E97 EQ PUSH2 0xABF JUMPI DUP1 PUSH4 0xBC851718 EQ PUSH2 0xAE9 JUMPI DUP1 PUSH4 0xBE1EEFBF EQ PUSH2 0xB13 JUMPI DUP1 PUSH4 0xBFBA9029 EQ PUSH2 0xB1D JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0xA367D99A EQ PUSH2 0xA45 JUMPI DUP1 PUSH4 0xA6F9DAE1 EQ PUSH2 0xA6F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xA97 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x904D2248 GT PUSH2 0x19F JUMPI DUP1 PUSH4 0x904D2248 EQ PUSH2 0x9AB JUMPI DUP1 PUSH4 0x93E84CD9 EQ PUSH2 0x9E7 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0xA05 JUMPI DUP1 PUSH4 0x9CE962CA EQ PUSH2 0xA2F JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x814B3FE0 EQ PUSH2 0x909 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x945 JUMPI DUP1 PUSH4 0x8EECDDCF EQ PUSH2 0x96F JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x380F3087 GT PUSH2 0x29F JUMPI DUP1 PUSH4 0x501895AE GT PUSH2 0x23D JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x217 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x83D JUMPI DUP1 PUSH4 0x70CCD928 EQ PUSH2 0x879 JUMPI DUP1 PUSH4 0x7227C7CE EQ PUSH2 0x8A3 JUMPI DUP1 PUSH4 0x785CE7CA EQ PUSH2 0x8CD JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x501895AE EQ PUSH2 0x79B JUMPI DUP1 PUSH4 0x66CE3BD2 EQ PUSH2 0x7D7 JUMPI DUP1 PUSH4 0x6B486818 EQ PUSH2 0x813 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x40C73D17 GT PUSH2 0x279 JUMPI DUP1 PUSH4 0x40C73D17 EQ PUSH2 0x6F9 JUMPI DUP1 PUSH4 0x413E90E7 EQ PUSH2 0x721 JUMPI DUP1 PUSH4 0x4288D759 EQ PUSH2 0x749 JUMPI DUP1 PUSH4 0x43146F36 EQ PUSH2 0x785 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x380F3087 EQ PUSH2 0x657 JUMPI DUP1 PUSH4 0x3DE8D340 EQ PUSH2 0x693 JUMPI DUP1 PUSH4 0x3E43B652 EQ PUSH2 0x6BD JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x30C JUMPI DUP1 PUSH4 0x26699576 GT PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x26699576 EQ PUSH2 0x5A9 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x5D9 JUMPI DUP1 PUSH4 0x31C2B6E6 EQ PUSH2 0x603 JUMPI DUP1 PUSH4 0x37C43088 EQ PUSH2 0x62D JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x18160DDD EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x551 JUMPI DUP1 PUSH4 0x2406E9FA EQ PUSH2 0x579 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x348 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x495 JUMPI DUP1 PUSH4 0x12C8052F EQ PUSH2 0x4BD JUMPI DUP1 PUSH4 0x13E4B51F EQ PUSH2 0x4D3 JUMPI DUP1 PUSH4 0x16D190E3 EQ PUSH2 0x4FD JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x3F9C793 EQ PUSH2 0x427 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0x751076D EQ PUSH2 0x46D JUMPI PUSH2 0x36F JUMP JUMPDEST JUMPDEST PUSH0 CALLVALUE GT ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x1 PUSH1 0x8 SLOAD GT ISZERO PUSH2 0x3B1 JUMPI PUSH2 0x3AC PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD57 JUMP JUMPDEST PUSH2 0x3BB JUMP JUMPDEST PUSH2 0x3B9 PUSH2 0x15EE JUMP JUMPDEST POP JUMPDEST PUSH2 0x425 JUMP JUMPDEST PUSH0 PUSH1 0x8 SLOAD EQ DUP1 ISZERO PUSH2 0x40D JUMPI POP PUSH0 PUSH1 0x3 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD GT JUMPDEST ISZERO PUSH2 0x41C JUMPI PUSH2 0x41B CALLER PUSH2 0x1628 JUMP JUMPDEST JUMPDEST PUSH2 0x424 PUSH2 0x197F JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 0x441 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x43C SWAP2 SWAP1 PUSH2 0x4873 JUMP JUMPDEST PUSH2 0xD57 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44E JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x457 PUSH2 0x221D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x464 SWAP2 SWAP1 PUSH2 0x4928 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x478 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x493 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x48E SWAP2 SWAP1 PUSH2 0x497B JUMP JUMPDEST PUSH2 0x2256 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A0 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4B6 SWAP2 SWAP1 PUSH2 0x49A6 JUMP JUMPDEST PUSH2 0x22BD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C8 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D1 PUSH2 0x197F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x4E7 PUSH2 0x2439 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4F4 SWAP2 SWAP1 PUSH2 0x49FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x508 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x511 PUSH2 0x2529 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51E SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x532 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x53B PUSH2 0x252F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x548 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x577 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x572 SWAP2 SWAP1 PUSH2 0x4A3F JUMP JUMPDEST PUSH2 0x2534 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x593 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x58E SWAP2 SWAP1 PUSH2 0x4873 JUMP JUMPDEST PUSH2 0x2801 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A0 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5BE SWAP2 SWAP1 PUSH2 0x4A8F JUMP JUMPDEST PUSH2 0x283D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D0 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x5ED PUSH2 0x2BE4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5FA SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60E JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x617 PUSH2 0x2BE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x624 SWAP2 SWAP1 PUSH2 0x4ADC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x638 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x641 PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x64E SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x662 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x67D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x678 SWAP2 SWAP1 PUSH2 0x497B JUMP JUMPDEST PUSH2 0x2C13 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x68A SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69E JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A7 PUSH2 0x2CE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6B4 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C8 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6DE SWAP2 SWAP1 PUSH2 0x4873 JUMP JUMPDEST PUSH2 0x2D80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6F0 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x704 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x71F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x71A SWAP2 SWAP1 PUSH2 0x4873 JUMP JUMPDEST PUSH2 0x2E05 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x747 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x742 SWAP2 SWAP1 PUSH2 0x497B JUMP JUMPDEST PUSH2 0x2EF3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x754 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x76F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x76A SWAP2 SWAP1 PUSH2 0x4873 JUMP JUMPDEST PUSH2 0x2F21 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x77C SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x790 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x799 PUSH2 0x3150 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A6 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x7C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7BC SWAP2 SWAP1 PUSH2 0x497B JUMP JUMPDEST PUSH2 0x31C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7CE SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7E2 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x7FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7F8 SWAP2 SWAP1 PUSH2 0x4873 JUMP JUMPDEST PUSH2 0x31E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x80A SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x81E JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x827 PUSH2 0x3272 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x834 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x848 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x863 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x85E SWAP2 SWAP1 PUSH2 0x4873 JUMP JUMPDEST PUSH2 0x3278 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x870 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x884 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x88D PUSH2 0x32BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x89A SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8AE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x8B7 PUSH2 0x32CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C4 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D8 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x8F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x8EE SWAP2 SWAP1 PUSH2 0x4873 JUMP JUMPDEST PUSH2 0x32D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x900 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x914 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x92F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x92A SWAP2 SWAP1 PUSH2 0x497B JUMP JUMPDEST PUSH2 0x332E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x93C SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x950 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x959 PUSH2 0x334E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x966 SWAP2 SWAP1 PUSH2 0x4ADC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x97A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x995 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x990 SWAP2 SWAP1 PUSH2 0x4873 JUMP JUMPDEST PUSH2 0x3373 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9A2 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9B6 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x9D1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x9CC SWAP2 SWAP1 PUSH2 0x4873 JUMP JUMPDEST PUSH2 0x33D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9DE SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9EF PUSH2 0x15EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9FC SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xA19 PUSH2 0x342F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA26 SWAP2 SWAP1 PUSH2 0x4928 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA3A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xA43 PUSH2 0x3468 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA50 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xA59 PUSH2 0x3683 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA66 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA7A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xA95 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA90 SWAP2 SWAP1 PUSH2 0x4873 JUMP JUMPDEST PUSH2 0x3689 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAA2 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xABD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAB8 SWAP2 SWAP1 PUSH2 0x49A6 JUMP JUMPDEST PUSH2 0x3777 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xACA JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xAD3 PUSH2 0x3AF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAE0 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAF4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xAFD PUSH2 0x3B03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB0A SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB1B PUSH2 0x3B09 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB28 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xB31 PUSH2 0x3B13 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB3E SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB4F PUSH2 0x3B19 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB5C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xB65 PUSH2 0x3B45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB72 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB86 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xB8F PUSH2 0x3B4B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB9C SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBB0 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xBCB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xBC6 SWAP2 SWAP1 PUSH2 0x497B JUMP JUMPDEST PUSH2 0x3B51 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBD8 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xBE1 PUSH2 0x3C98 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBEE SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC02 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xC0B PUSH2 0x3C9E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC18 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xC33 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC2E SWAP2 SWAP1 PUSH2 0x4AF5 JUMP JUMPDEST PUSH2 0x3DA2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC40 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC54 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xC5D PUSH2 0x3E24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC6A SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC7E JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xC87 PUSH2 0x3E2A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC94 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xC9D PUSH2 0x3E4A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCAA SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCBE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xCC7 PUSH2 0x3E50 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xCDD PUSH2 0x4093 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCEA SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCFE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xD19 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD14 SWAP2 SWAP1 PUSH2 0x4873 JUMP JUMPDEST PUSH2 0x4099 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD26 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD3A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0xD55 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD50 SWAP2 SWAP1 PUSH2 0x497B JUMP JUMPDEST PUSH2 0x40F3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x8 SLOAD GT DUP1 ISZERO PUSH2 0xD83 JUMPI POP PUSH1 0x5 PUSH2 0x4000 PUSH2 0xD73 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0xD80 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST NUMBER LT JUMPDEST DUP1 ISZERO PUSH2 0xD92 JUMPI POP PUSH1 0xA SLOAD PUSH1 0x9 SLOAD LT JUMPDEST PUSH2 0xD9A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLVALUE SWAP1 POP PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH2 0xDAE SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0xE32 JUMPI PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH2 0xDC5 SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST SWAP1 POP PUSH1 0xA SLOAD PUSH1 0x9 DUP2 SWAP1 SSTORE POP PUSH0 PUSH1 0x8 DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0xE04 DUP4 CALLVALUE PUSH2 0x4180 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xE2C JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP PUSH2 0xE4B JUMP JUMPDEST DUP1 PUSH1 0x9 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xE43 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xED1 JUMPI POP PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xFE9 JUMPI PUSH1 0xA DUP2 PUSH2 0xEE3 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST PUSH1 0x7 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xEF3 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0xA DUP2 PUSH2 0xF07 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST PUSH1 0x5 PUSH0 PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xF9A SWAP2 SWAP1 PUSH2 0x4C89 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x11F1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x64 PUSH1 0x5 DUP4 PUSH2 0xFFA SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH2 0x1004 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST PUSH2 0x100E SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH1 0x7 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x101E SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x64 PUSH1 0x5 DUP3 PUSH2 0x1034 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH2 0x103E SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST PUSH1 0x5 PUSH0 PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x10D1 SWAP2 SWAP1 PUSH2 0x4C89 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x64 PUSH1 0x5 DUP3 PUSH2 0x112A SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH2 0x1134 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST PUSH1 0x5 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11A6 SWAP2 SWAP1 PUSH2 0x4C89 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x5 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH1 0x1A PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH0 PUSH7 0x38D7EA4C68000 DUP3 PUSH2 0x1261 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH8 0x16345785D8A0000 PUSH1 0x10 DUP5 PUSH2 0x127A SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH2 0x1284 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH8 0x16345785D8A0000 PUSH1 0xA DUP6 PUSH2 0x129D SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH2 0x12A7 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x3 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x12F5 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x3 PUSH0 PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1369 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH0 PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x13DD SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP3 DUP5 PUSH2 0x13F1 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST PUSH2 0x13FB SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST PUSH0 DUP1 DUP3 DUP3 SLOAD PUSH2 0x140A SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD PUSH2 0x146E SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x14F4 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x157A SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x36A013C86C271C703C54DEE591BC768E347954A0A9A1937DD17F5A29E9A8E645 DUP7 PUSH1 0x40 MLOAD PUSH2 0x15DF SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1623 CALLER NUMBER PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1605 SWAP3 SWAP2 SWAP1 PUSH2 0x4D3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH0 SHR PUSH0 PUSH2 0x283D JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH1 0x1A SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND SWAP1 POP PUSH0 PUSH1 0x3 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD EQ DUP1 PUSH2 0x16C7 JUMPI POP PUSH0 DUP2 EQ JUMPDEST ISZERO PUSH2 0x172E JUMPI PUSH1 0xB SLOAD PUSH1 0x5 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH1 0x1A PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x197C JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 SUB PUSH2 0x173D JUMPI POP PUSH2 0x197C JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x3 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH2 0x178D SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH2 0x1797 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST SWAP1 POP PUSH0 JUMPDEST PUSH1 0xB SLOAD DUP4 LT ISZERO PUSH2 0x17E7 JUMPI PUSH1 0xC DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x17B9 JUMPI PUSH2 0x17B8 PUSH2 0x4D66 JUMP JUMPDEST JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD SLOAD DUP3 PUSH2 0x17CD SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST DUP2 PUSH2 0x17D8 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP1 POP DUP3 DUP1 PUSH1 0x1 ADD SWAP4 POP POP PUSH2 0x179B JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 PUSH2 0x17F7 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x7 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x180A SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1884 SWAP2 SWAP1 PUSH2 0x4C89 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x5 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH1 0x1A PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE1E87F40E4DE2A6B68365D854F85940AAD44D84933D399007702C6D340DA445F DUP3 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1970 SWAP3 SWAP2 SWAP1 PUSH2 0x4D93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH1 0x6 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH0 DUP3 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP3 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH0 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND SUB PUSH2 0x1BA5 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x6 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP PUSH2 0x221B JUMP JUMPDEST PUSH0 DUP2 PUSH0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1BDA JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1BED JUMPI PUSH2 0x1BE7 PUSH2 0x3468 JUMP JUMPDEST POP PUSH2 0x221B JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND NUMBER GT PUSH2 0x1C02 JUMPI PUSH0 DUP1 REVERT JUMPDEST NUMBER PUSH2 0x4000 PUSH1 0xA PUSH2 0x1C12 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x1C27 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST GT PUSH2 0x1DA0 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x770D64C654906EBAB085526DD881064F61F0E5990CAA94C94167EB29BC4645C6 DUP3 PUSH1 0x40 ADD MLOAD NUMBER PUSH1 0x40 MLOAD PUSH2 0x1C78 SWAP3 SWAP2 SWAP1 PUSH2 0x4E02 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x6 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP PUSH2 0x221B JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x100 DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x1DB4 SWAP2 SWAP1 PUSH2 0x4E29 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND NUMBER LT ISZERO PUSH2 0x1DE7 JUMPI DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH0 SHR PUSH3 0xFFFFFF AND SWAP1 POP PUSH2 0x1DE0 DUP4 DUP3 PUSH2 0x41A6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FC5 JUMP JUMPDEST PUSH0 PUSH1 0xE SLOAD GT ISZERO PUSH2 0x1E4E JUMPI PUSH2 0x1E04 DUP4 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x43D9 JUMP JUMPDEST SWAP1 POP PUSH4 0x1000000 DUP2 PUSH4 0xFFFFFFFF AND SUB PUSH2 0x1E3C JUMPI DUP3 PUSH0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH2 0x1E49 JUMP JUMPDEST PUSH2 0x1E46 DUP4 DUP3 PUSH2 0x41A6 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x1FC4 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x770D64C654906EBAB085526DD881064F61F0E5990CAA94C94167EB29BC4645C6 DUP5 PUSH1 0x40 ADD MLOAD NUMBER PUSH1 0x40 MLOAD PUSH2 0x1E9A SWAP3 SWAP2 SWAP1 PUSH2 0x4E02 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x6 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP PUSH2 0x221B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x6 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH0 DUP3 GT ISZERO PUSH2 0x21B6 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH31 0x362509948EA59AFAC5C6FA93FEA5327B624BC705A6574F4E9F26E9D8BD7CCC DUP5 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x2140 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4E60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0xD SLOAD DUP3 GT ISZERO PUSH2 0x21A8 JUMPI DUP2 PUSH1 0xD DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x955214D16F858518F04C701D01A6E2F5668548B6BE3C6F2F0F8981F77F2CFC06 DUP4 PUSH1 0x40 MLOAD PUSH2 0x219F SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH2 0x21B1 DUP3 PUSH2 0x4487 JUMP JUMPDEST PUSH2 0x2217 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7375ED8230669EA9D64A9DB629D7CE9501779604A67C95C0111377CF09F5B9B9 DUP5 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0x40 MLOAD PUSH2 0x220E SWAP3 SWAP2 SWAP1 PUSH2 0x4D93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536D61727442696C6C696F6E7320546F6B656E00000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x22B3 JUMPI PUSH2 0x22B2 PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x12 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x2345 JUMPI POP PUSH0 PUSH1 0x4 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0x2353 JUMPI PUSH2 0x2352 PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x4 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x242D SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0xF SLOAD SWAP1 POP PUSH0 DUP2 EQ DUP1 PUSH2 0x245A JUMPI POP PUSH1 0xA DUP2 PUSH2 0x2456 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST NUMBER GT ISZERO JUMPDEST ISZERO PUSH2 0x2468 JUMPI PUSH0 SWAP2 POP POP PUSH2 0x2526 JUMP JUMPDEST PUSH0 PUSH2 0x100 NUMBER LT ISZERO PUSH2 0x247B JUMPI PUSH0 SWAP1 POP PUSH2 0x248C JUMP JUMPDEST PUSH2 0x100 NUMBER PUSH2 0x2489 SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x24B7 JUMPI PUSH0 DUP2 SWAP1 POP PUSH1 0xA DUP2 PUSH2 0x24A5 SWAP2 SWAP1 PUSH2 0x4EC2 JUMP JUMPDEST DUP2 PUSH2 0x24B0 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP1 POP DUP1 SWAP3 POP POP JUMPDEST PUSH0 PUSH1 0xA PUSH1 0xE SLOAD DUP5 PUSH2 0x24C8 SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST PUSH2 0x24D2 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST SWAP1 POP PUSH2 0x24DE DUP4 DUP3 PUSH2 0x4699 JUMP JUMPDEST PUSH1 0x13 PUSH2 0x4000 DUP4 PUSH2 0x24EE SWAP2 SWAP1 PUSH2 0x4EC2 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x24FF JUMPI PUSH2 0x24FE PUSH2 0x4D66 JUMP JUMPDEST JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP PUSH1 0xA DUP4 PUSH2 0x2518 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST PUSH1 0xF DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP4 POP POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP2 PUSH2 0x2543 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST PUSH0 CALLDATASIZE SWAP1 POP LT ISZERO PUSH2 0x2556 JUMPI PUSH2 0x2555 PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST PUSH0 PUSH1 0x4 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x25DB DUP6 PUSH2 0x1628 JUMP JUMPDEST PUSH2 0x25E4 DUP5 PUSH2 0x1628 JUMP JUMPDEST PUSH2 0x2634 DUP4 PUSH1 0x3 PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH2 0x47EA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x26C5 DUP4 PUSH1 0x3 PUSH0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH2 0x4180 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x2719 DUP4 DUP3 PUSH2 0x4180 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD PUSH2 0x27F2 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2836 CALLER NUMBER PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2818 SWAP3 SWAP2 SWAP1 PUSH2 0x4D3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH0 SHR DUP4 PUSH2 0x283D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x2846 PUSH2 0x197F JUMP JUMPDEST PUSH0 DUP4 SWAP1 POP PUSH8 0xDE0B6B3A7640000 CALLVALUE GT ISZERO DUP1 ISZERO PUSH2 0x2863 JUMPI POP PUSH1 0x12 SLOAD CALLVALUE LT JUMPDEST PUSH2 0x286B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLVALUE GT ISZERO PUSH2 0x2BCF JUMPI PUSH0 PUSH1 0x8 SLOAD SUB PUSH2 0x28BD JUMPI PUSH1 0x14 CALLVALUE PUSH2 0x2889 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST PUSH1 0xC PUSH1 0xB SLOAD DUP2 SLOAD DUP2 LT PUSH2 0x289F JUMPI PUSH2 0x289E PUSH2 0x4D66 JUMP JUMPDEST JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x28B5 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x29D7 JUMPI PUSH0 PUSH1 0x64 CALLVALUE PUSH2 0x28FE SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x7 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x2911 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x298B SWAP2 SWAP1 PUSH2 0x4C89 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x3 NUMBER PUSH2 0x29E4 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST PUSH1 0x10 SLOAD LT ISZERO PUSH2 0x2A0C JUMPI PUSH1 0x3 NUMBER PUSH2 0x29FA SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST PUSH1 0x10 DUP2 SWAP1 SSTORE POP CALLVALUE PUSH1 0x11 DUP2 SWAP1 SSTORE POP PUSH2 0x2A55 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x11 SLOAD GT ISZERO PUSH2 0x2A3B JUMPI PUSH1 0x10 PUSH0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x2A2A SWAP1 PUSH2 0x4EF2 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLVALUE PUSH1 0x11 DUP2 SWAP1 SSTORE POP PUSH2 0x2A54 JUMP JUMPDEST CALLVALUE PUSH1 0x11 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x2A4C SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 CALLVALUE PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH3 0xFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x10 SLOAD PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x6 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x63F4540040CF99A22F577EF321C170763020E6277E47275ED9B3D17EC14E13D DUP3 PUSH3 0xFFFFFF AND PUSH1 0x10 SLOAD CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x2BC6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4E60 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH2 0x2BD7 PUSH2 0x2439 JUMP JUMPDEST POP PUSH1 0x10 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x4000 DUP2 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0xE SLOAD EQ DUP1 ISZERO PUSH2 0x2C24 JUMPI POP PUSH0 DUP3 GT JUMPDEST DUP1 ISZERO PUSH2 0x2C32 JUMPI POP PUSH2 0x4000 DUP3 GT ISZERO JUMPDEST PUSH2 0x2C3A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP3 PUSH1 0x13 DUP1 SLOAD SWAP1 POP PUSH2 0x2C4C SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP1 POP PUSH2 0x4000 DUP2 GT ISZERO PUSH2 0x2C5E JUMPI PUSH2 0x4000 SWAP1 POP JUMPDEST PUSH0 PUSH1 0x13 DUP1 SLOAD SWAP1 POP SWAP1 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2CA4 JUMPI PUSH1 0x13 PUSH1 0x1 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2C68 JUMP JUMPDEST POP PUSH2 0x4000 PUSH1 0x13 DUP1 SLOAD SWAP1 POP LT PUSH2 0x2CDB JUMPI PUSH1 0xA NUMBER PUSH2 0x2CC0 SWAP2 SWAP1 PUSH2 0x4EC2 JUMP JUMPDEST NUMBER PUSH2 0x2CCB SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST PUSH1 0xE DUP2 SWAP1 SSTORE POP PUSH1 0xE SLOAD PUSH1 0xF DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x13 DUP1 SLOAD SWAP1 POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x8 SLOAD GT ISZERO PUSH2 0x2CFC JUMPI PUSH0 SWAP1 POP PUSH2 0x2D7D JUMP JUMPDEST PUSH0 PUSH2 0x4000 PUSH1 0xA PUSH2 0x2D0C SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH1 0xE SLOAD NUMBER PUSH2 0x2D1A SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST PUSH2 0x2D24 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST SWAP1 POP PUSH1 0xB SLOAD DUP2 GT ISZERO PUSH2 0x2D39 JUMPI PUSH0 SWAP2 POP POP PUSH2 0x2D7D JUMP JUMPDEST PUSH2 0x4000 PUSH1 0xA PUSH2 0x2D48 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH1 0xE SLOAD NUMBER PUSH2 0x2D56 SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST PUSH2 0x2D60 SWAP2 SWAP1 PUSH2 0x4EC2 JUMP JUMPDEST PUSH2 0x4000 PUSH1 0xA PUSH2 0x2D6F SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH2 0x2D79 SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x6 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2E62 JUMPI PUSH2 0x2E61 PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2E9E JUMPI PUSH2 0x2E9D PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST PUSH2 0x2EA7 CALLER PUSH2 0x1628 JUMP JUMPDEST PUSH2 0x2EB0 DUP2 PUSH2 0x1628 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2F1C JUMPI PUSH2 0x2F05 PUSH2 0x2439 JUMP JUMPDEST PUSH2 0x2F0F JUMPI POP PUSH2 0x2F1E JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2EF5 JUMP JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x6 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH0 DUP3 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP3 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH0 DUP2 PUSH0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x304D JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST DUP1 PUSH2 0x3061 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND NUMBER LT JUMPDEST DUP1 PUSH2 0x308F JUMPI POP PUSH2 0x4000 PUSH1 0xA PUSH2 0x3076 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x308B SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST NUMBER LT ISZERO JUMPDEST ISZERO PUSH2 0x309D JUMPI PUSH0 SWAP2 POP POP PUSH2 0x314B JUMP JUMPDEST PUSH2 0x100 DUP2 PUSH1 0x40 ADD MLOAD PUSH2 0x30AF SWAP2 SWAP1 PUSH2 0x4E29 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND NUMBER LT ISZERO PUSH2 0x30DB JUMPI PUSH2 0x30D3 DUP2 DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH0 SHR PUSH2 0x41A6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x314B JUMP JUMPDEST PUSH0 PUSH1 0xE SLOAD GT ISZERO PUSH2 0x3146 JUMPI PUSH0 PUSH2 0x30F9 DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x43D9 JUMP JUMPDEST SWAP1 POP PUSH4 0x1000000 DUP2 PUSH4 0xFFFFFFFF AND SUB PUSH2 0x3133 JUMPI DUP2 PUSH0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 POP POP POP PUSH2 0x314B JUMP JUMPDEST PUSH2 0x313D DUP3 DUP3 PUSH2 0x41A6 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x314B JUMP JUMPDEST PUSH0 SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x31AD JUMPI PUSH2 0x31AC PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST PUSH1 0x3 NUMBER PUSH2 0x31BA SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST PUSH1 0x10 DUP2 SWAP1 SSTORE POP PUSH0 PUSH1 0x11 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x13 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x31D8 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x3 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x13 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xC DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x333D JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x6 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x6 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x504C415900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT DUP1 ISZERO PUSH2 0x354C JUMPI POP NUMBER PUSH1 0x5 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x3681 JUMPI PUSH0 PUSH1 0x5 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH0 PUSH1 0x5 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x7 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x366F SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x367F DUP2 PUSH2 0x4487 JUMP JUMPDEST POP JUMPDEST JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x36E6 JUMPI PUSH2 0x36E5 PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x3722 JUMPI PUSH2 0x3721 PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST PUSH2 0x372B CALLER PUSH2 0x1628 JUMP JUMPDEST PUSH2 0x3734 DUP2 PUSH2 0x1628 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x40 PUSH1 0x4 DUP2 PUSH2 0x3786 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST PUSH0 CALLDATASIZE SWAP1 POP LT ISZERO PUSH2 0x3799 JUMPI PUSH2 0x3798 PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST PUSH2 0x37A2 CALLER PUSH2 0x1628 JUMP JUMPDEST PUSH2 0x37F2 DUP3 PUSH1 0x3 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH2 0x4180 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x39EE JUMPI PUSH2 0x3890 PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1628 JUMP JUMPDEST PUSH2 0x3901 DUP3 PUSH1 0x3 PUSH0 PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH2 0x47EA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH0 PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x39E1 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x3AEE JUMP JUMPDEST PUSH2 0x39F7 DUP4 PUSH2 0x1628 JUMP JUMPDEST PUSH2 0x3A47 DUP3 PUSH1 0x3 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH2 0x47EA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x3AE5 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x3AFE PUSH1 0x80 PUSH2 0x2C13 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3B11 PUSH2 0x3C9E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x12 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3B43 PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD57 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3BAE JUMPI PUSH2 0x3BAD PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST PUSH2 0x3BB6 PUSH2 0x3C9E JUMP JUMPDEST PUSH0 DUP2 GT DUP1 ISZERO PUSH2 0x3BF6 JUMPI POP DUP1 PUSH1 0x7 SLOAD PUSH1 0xA PUSH1 0x9 DUP1 SLOAD PUSH2 0x3BD4 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH2 0x3BDE SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST PUSH2 0x3BE8 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST PUSH2 0x3BF2 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SELFBALANCE LT ISZERO JUMPDEST PUSH2 0x3BFE JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xA SLOAD PUSH2 0x3C0D SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST PUSH1 0x9 SLOAD LT PUSH2 0x3C4A JUMPI PUSH2 0x190 SELFBALANCE PUSH2 0x3C23 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST DUP2 GT ISZERO DUP1 ISZERO PUSH2 0x3C41 JUMPI POP NUMBER PUSH2 0x9D80 PUSH1 0x14 SLOAD PUSH2 0x3C3E SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST GT ISZERO JUMPDEST PUSH2 0x3C49 JUMPI PUSH0 DUP1 REVERT JUMPDEST JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x3C8D JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP NUMBER PUSH1 0x14 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x14 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x8 SLOAD GT DUP1 ISZERO PUSH2 0x3CCB JUMPI POP PUSH1 0x5 PUSH2 0x4000 PUSH2 0x3CBA SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x3CC7 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST NUMBER LT ISZERO JUMPDEST ISZERO PUSH2 0x3CDC JUMPI PUSH0 PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0x3DA0 JUMP JUMPDEST PUSH0 PUSH1 0xE SLOAD GT ISZERO PUSH2 0x3D9F JUMPI PUSH0 PUSH2 0x4000 PUSH1 0xA PUSH2 0x3CF6 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH1 0xE SLOAD NUMBER PUSH2 0x3D04 SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST PUSH2 0x3D0E SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 PUSH1 0xC DUP1 SLOAD SWAP1 POP PUSH2 0x3D22 SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x3D50 JUMPI PUSH1 0xC PUSH0 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE JUMPDEST PUSH1 0xB SLOAD DUP2 GT DUP1 ISZERO PUSH2 0x3D62 JUMPI POP PUSH0 PUSH1 0x8 SLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 0x3D80 JUMPI POP PUSH1 0x1 PUSH1 0xC DUP1 SLOAD SWAP1 POP PUSH2 0x3D7B SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST PUSH1 0xB SLOAD LT JUMPDEST ISZERO PUSH2 0x3D9D JUMPI PUSH1 0xB PUSH0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x3D97 SWAP1 PUSH2 0x4EF2 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMPDEST POP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x4 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x8 SLOAD EQ PUSH2 0x3E37 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x3E40 CALLER PUSH2 0x1628 JUMP JUMPDEST PUSH2 0x3E48 PUSH2 0x3468 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x8 SLOAD EQ PUSH2 0x3E5D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x3E66 CALLER PUSH2 0x1628 JUMP JUMPDEST PUSH0 PUSH7 0x38D7EA4C68000 PUSH1 0x3 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH2 0x3EB7 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x3 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH2 0x3F53 SWAP2 SWAP1 PUSH2 0x4A26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x3 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SSTORE DUP1 PUSH1 0x9 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x3FAC SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0xA PUSH1 0x9 DUP3 PUSH2 0x3FC2 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST PUSH2 0x3FCC SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST PUSH1 0x5 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x403E SWAP2 SWAP1 PUSH2 0x4C89 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x4090 PUSH2 0x3468 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH1 0x1A SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4150 JUMPI PUSH2 0x414F PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x8 SLOAD EQ DUP1 ISZERO PUSH2 0x4163 JUMPI POP PUSH0 PUSH1 0xE SLOAD GT JUMPDEST DUP1 ISZERO PUSH2 0x416E JUMPI POP DUP1 NUMBER LT JUMPDEST PUSH2 0x4176 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x8 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 GT ISZERO PUSH2 0x4192 JUMPI PUSH2 0x4191 PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST DUP2 DUP4 PUSH2 0x419E SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH0 DUP4 DUP3 XOR SWAP1 POP PUSH0 DUP1 PUSH3 0xF00000 DUP4 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x41CD JUMPI PUSH0 PUSH2 0x41D0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH0 PUSH3 0xF0000 DUP5 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x41E7 JUMPI PUSH0 PUSH2 0x41EA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH0 PUSH2 0xF000 DUP6 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4200 JUMPI PUSH0 PUSH2 0x4203 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH0 PUSH2 0xF00 DUP7 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4219 JUMPI PUSH0 PUSH2 0x421C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH0 PUSH1 0xF0 DUP8 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4231 JUMPI PUSH0 PUSH2 0x4234 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH0 PUSH1 0xF DUP9 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4249 JUMPI PUSH0 PUSH2 0x424C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4256 SWAP2 SWAP1 PUSH2 0x4F45 JUMP JUMPDEST PUSH2 0x4260 SWAP2 SWAP1 PUSH2 0x4F45 JUMP JUMPDEST PUSH2 0x426A SWAP2 SWAP1 PUSH2 0x4F45 JUMP JUMPDEST PUSH2 0x4274 SWAP2 SWAP1 PUSH2 0x4F45 JUMP JUMPDEST PUSH2 0x427E SWAP2 SWAP1 PUSH2 0x4F45 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x6 DUP2 PUSH3 0xFFFFFF AND SUB PUSH2 0x42C6 JUMPI PUSH3 0x6ACFC0 DUP7 PUSH0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x42BC SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x43D3 JUMP JUMPDEST PUSH1 0x5 DUP2 PUSH3 0xFFFFFF AND SUB PUSH2 0x4308 JUMPI PUSH2 0x4E20 DUP7 PUSH0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x42FE SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x43D3 JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH3 0xFFFFFF AND SUB PUSH2 0x434A JUMPI PUSH2 0x1F4 DUP7 PUSH0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4340 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x43D3 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH3 0xFFFFFF AND SUB PUSH2 0x438B JUMPI PUSH1 0x19 DUP7 PUSH0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4381 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x43D3 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH3 0xFFFFFF AND SUB PUSH2 0x43CC JUMPI PUSH1 0x3 DUP7 PUSH0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x43C2 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x43D3 JUMP JUMPDEST PUSH0 SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0xA PUSH1 0xE SLOAD DUP5 PUSH2 0x43EB SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST PUSH2 0x43F5 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x13 PUSH2 0x4000 DUP4 PUSH2 0x4408 SWAP2 SWAP1 PUSH2 0x4EC2 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x4419 JUMPI PUSH2 0x4418 PUSH2 0x4D66 JUMP JUMPDEST JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD SLOAD SWAP1 POP PUSH1 0xF0 DUP2 SWAP1 SHR PUSH2 0x4000 DUP4 PUSH2 0x4437 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST EQ PUSH2 0x444A JUMPI PUSH4 0x1000000 SWAP3 POP POP POP PUSH2 0x4482 JUMP JUMPDEST PUSH0 PUSH1 0xA PUSH1 0xE SLOAD DUP7 PUSH2 0x445B SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST PUSH2 0x4465 SWAP2 SWAP1 PUSH2 0x4EC2 JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF DUP2 PUSH1 0x18 PUSH2 0x4478 SWAP2 SWAP1 PUSH2 0x4B60 JUMP JUMPDEST DUP4 SWAP1 SHR AND SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SELFBALANCE PUSH2 0x4495 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT PUSH2 0x44FF JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x44E1 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP PUSH7 0x38D7EA4C68000 DUP3 GT ISZERO PUSH2 0x44FA JUMPI PUSH2 0x44F9 PUSH2 0x3C9E JUMP JUMPDEST JUMPDEST PUSH2 0x4695 JUMP JUMPDEST PUSH0 DUP2 DUP4 PUSH2 0x450C SWAP2 SWAP1 PUSH2 0x4BD4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x7 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x451F SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4599 SWAP2 SWAP1 PUSH2 0x4C89 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH3 0x2A300 NUMBER PUSH2 0x45F2 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST PUSH1 0x5 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4692 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0xF0 PUSH2 0x4000 DUP4 PUSH4 0xFFFFFFFF AND PUSH2 0x46B0 SWAP2 SWAP1 PUSH2 0x4C34 JUMP JUMPDEST SWAP1 SHL PUSH1 0xD8 PUSH3 0xFFFFFF PUSH1 0x9 DUP7 PUSH2 0x46C5 SWAP2 SWAP1 PUSH2 0x4E29 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH0 SHR AND SWAP1 SHL PUSH1 0xC0 PUSH3 0xFFFFFF PUSH1 0x8 DUP8 PUSH2 0x46E4 SWAP2 SWAP1 PUSH2 0x4E29 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH0 SHR AND SWAP1 SHL PUSH1 0xA8 PUSH3 0xFFFFFF PUSH1 0x7 DUP9 PUSH2 0x4703 SWAP2 SWAP1 PUSH2 0x4E29 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH0 SHR AND SWAP1 SHL PUSH1 0x90 PUSH3 0xFFFFFF PUSH1 0x6 DUP10 PUSH2 0x4722 SWAP2 SWAP1 PUSH2 0x4E29 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH0 SHR AND SWAP1 SHL PUSH1 0x78 PUSH3 0xFFFFFF PUSH1 0x5 DUP11 PUSH2 0x4741 SWAP2 SWAP1 PUSH2 0x4E29 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH0 SHR AND SWAP1 SHL PUSH1 0x60 PUSH3 0xFFFFFF PUSH1 0x4 DUP12 PUSH2 0x4760 SWAP2 SWAP1 PUSH2 0x4E29 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH0 SHR AND SWAP1 SHL PUSH1 0x48 PUSH3 0xFFFFFF PUSH1 0x3 DUP13 PUSH2 0x477F SWAP2 SWAP1 PUSH2 0x4E29 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH0 SHR AND SWAP1 SHL PUSH1 0x30 PUSH3 0xFFFFFF PUSH1 0x2 DUP14 PUSH2 0x479E SWAP2 SWAP1 PUSH2 0x4E29 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH0 SHR AND SWAP1 SHL PUSH1 0x18 PUSH3 0xFFFFFF PUSH1 0x1 DUP15 PUSH2 0x47BD SWAP2 SWAP1 PUSH2 0x4E29 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH0 SHR AND SWAP1 SHL PUSH3 0xFFFFFF DUP14 PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH0 SHR AND OR OR OR OR OR OR OR OR OR OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 DUP5 PUSH2 0x47F8 SWAP2 SWAP1 PUSH2 0x4BA1 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x480B JUMPI PUSH2 0x480A PUSH2 0x4E95 JUMP JUMPDEST JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x4842 DUP3 PUSH2 0x4819 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4852 DUP2 PUSH2 0x4838 JUMP JUMPDEST DUP2 EQ PUSH2 0x485C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x486D DUP2 PUSH2 0x4849 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4888 JUMPI PUSH2 0x4887 PUSH2 0x4815 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x4895 DUP5 DUP3 DUP6 ADD PUSH2 0x485F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x48D5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x48BA JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x48FA DUP3 PUSH2 0x489E JUMP JUMPDEST PUSH2 0x4904 DUP2 DUP6 PUSH2 0x48A8 JUMP JUMPDEST SWAP4 POP PUSH2 0x4914 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x48B8 JUMP JUMPDEST PUSH2 0x491D DUP2 PUSH2 0x48E0 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x4940 DUP2 DUP5 PUSH2 0x48F0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x495A DUP2 PUSH2 0x4948 JUMP JUMPDEST DUP2 EQ PUSH2 0x4964 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x4975 DUP2 PUSH2 0x4951 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4990 JUMPI PUSH2 0x498F PUSH2 0x4815 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x499D DUP5 DUP3 DUP6 ADD PUSH2 0x4967 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x49BC JUMPI PUSH2 0x49BB PUSH2 0x4815 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x49C9 DUP6 DUP3 DUP7 ADD PUSH2 0x485F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x49DA DUP6 DUP3 DUP7 ADD PUSH2 0x4967 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x49F8 DUP2 PUSH2 0x49E4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4A11 PUSH0 DUP4 ADD DUP5 PUSH2 0x49EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4A20 DUP2 PUSH2 0x4948 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4A39 PUSH0 DUP4 ADD DUP5 PUSH2 0x4A17 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4A56 JUMPI PUSH2 0x4A55 PUSH2 0x4815 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x4A63 DUP7 DUP3 DUP8 ADD PUSH2 0x485F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x4A74 DUP7 DUP3 DUP8 ADD PUSH2 0x485F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x4A85 DUP7 DUP3 DUP8 ADD PUSH2 0x4967 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4AA5 JUMPI PUSH2 0x4AA4 PUSH2 0x4815 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x4AB2 DUP6 DUP3 DUP7 ADD PUSH2 0x4967 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x4AC3 DUP6 DUP3 DUP7 ADD PUSH2 0x485F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x4AD6 DUP2 PUSH2 0x4838 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4AEF PUSH0 DUP4 ADD DUP5 PUSH2 0x4ACD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4B0B JUMPI PUSH2 0x4B0A PUSH2 0x4815 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x4B18 DUP6 DUP3 DUP7 ADD PUSH2 0x485F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x4B29 DUP6 DUP3 DUP7 ADD PUSH2 0x485F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x4B6A DUP3 PUSH2 0x4948 JUMP JUMPDEST SWAP2 POP PUSH2 0x4B75 DUP4 PUSH2 0x4948 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x4B83 DUP2 PUSH2 0x4948 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x4B9A JUMPI PUSH2 0x4B99 PUSH2 0x4B33 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4BAB DUP3 PUSH2 0x4948 JUMP JUMPDEST SWAP2 POP PUSH2 0x4BB6 DUP4 PUSH2 0x4948 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x4BCE JUMPI PUSH2 0x4BCD PUSH2 0x4B33 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4BDE DUP3 PUSH2 0x4948 JUMP JUMPDEST SWAP2 POP PUSH2 0x4BE9 DUP4 PUSH2 0x4948 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x4C01 JUMPI PUSH2 0x4C00 PUSH2 0x4B33 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x4C3E DUP3 PUSH2 0x4948 JUMP JUMPDEST SWAP2 POP PUSH2 0x4C49 DUP4 PUSH2 0x4948 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4C59 JUMPI PUSH2 0x4C58 PUSH2 0x4C07 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x4C93 DUP3 PUSH2 0x4C64 JUMP JUMPDEST SWAP2 POP PUSH2 0x4C9E DUP4 PUSH2 0x4C64 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4CD0 JUMPI PUSH2 0x4CCF PUSH2 0x4B33 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x4CEC DUP3 PUSH2 0x4CD6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x4CFD DUP3 PUSH2 0x4CE2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4D15 PUSH2 0x4D10 DUP3 PUSH2 0x4838 JUMP JUMPDEST PUSH2 0x4CF3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4D35 PUSH2 0x4D30 DUP3 PUSH2 0x4948 JUMP JUMPDEST PUSH2 0x4D1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4D46 DUP3 DUP6 PUSH2 0x4D04 JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP PUSH2 0x4D56 DUP3 DUP5 PUSH2 0x4D24 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x4DA6 PUSH0 DUP4 ADD DUP6 PUSH2 0x4A17 JUMP JUMPDEST PUSH2 0x4DB3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4A17 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x4DEC PUSH2 0x4DE7 PUSH2 0x4DE2 DUP5 PUSH2 0x4DBA JUMP JUMPDEST PUSH2 0x4DC9 JUMP JUMPDEST PUSH2 0x4948 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4DFC DUP2 PUSH2 0x4DD2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x4E15 PUSH0 DUP4 ADD DUP6 PUSH2 0x4DF3 JUMP JUMPDEST PUSH2 0x4E22 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4A17 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4E33 DUP3 PUSH2 0x4DBA JUMP JUMPDEST SWAP2 POP PUSH2 0x4E3E DUP4 PUSH2 0x4DBA JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x4E5A JUMPI PUSH2 0x4E59 PUSH2 0x4B33 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x4E73 PUSH0 DUP4 ADD DUP7 PUSH2 0x4A17 JUMP JUMPDEST PUSH2 0x4E80 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x4A17 JUMP JUMPDEST PUSH2 0x4E8D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4A17 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x4ECC DUP3 PUSH2 0x4948 JUMP JUMPDEST SWAP2 POP PUSH2 0x4ED7 DUP4 PUSH2 0x4948 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4EE7 JUMPI PUSH2 0x4EE6 PUSH2 0x4C07 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4EFC DUP3 PUSH2 0x4948 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x4F2E JUMPI PUSH2 0x4F2D PUSH2 0x4B33 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x4F4F DUP3 PUSH2 0x4F39 JUMP JUMPDEST SWAP2 POP PUSH2 0x4F5A DUP4 PUSH2 0x4F39 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0x4F73 JUMPI PUSH2 0x4F72 PUSH2 0x4B33 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D BASEFEE 0xBB 0xD1 RETURNDATACOPY PUSH23 0x2BB8C818CE11641F4A3FD8D6AAEB63012F36024F86CB29 BALANCE PUSH8 0x5A64736F6C634300 ADDMOD XOR STOP CALLER ","sourceMap":"4492:23398:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21818:1;21806:9;:13;21803:312;;;21850:1;21838:11;;:13;21835:248;;;21934:13;21941:5;;;;;;;;;;;21934:6;:13::i;:::-;21835:248;;;22061:6;:4;:6::i;:::-;;21835:248;22097:7;;21803:312;22191:1;22176:11;;:16;:42;;;;;22217:1;22196:8;:20;22205:10;22196:20;;;;;;;;;;;;;;;;:22;22176:42;22173:89;;;22234:26;22249:10;22234:14;:26::i;:::-;22173:89;22272:5;:3;:5::i;:::-;21764:571;4492:23398;13845:1997;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4588:51;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10569:91;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3657:311;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;19476:2114;;;;;;;;;;;;;:::i;:::-;;26914:692;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5707:22;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;622:23;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3009:412;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;22661:174;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;22949:1357;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4691:33;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;683:23;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6243:39;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;24454:559;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9178:362;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8458:115;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9968:199;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;27712:173;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;18573:840;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10767:110;;;;;;;;;;;;;:::i;:::-;;6093:20;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7703:125;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5757:25;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2468:115;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7493:98;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5892:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8222:133;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5600:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;650:20;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8957:124;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8707:116;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;22390:154;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4646:38;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;12601:319;;;;;;;;;;;;;:::i;:::-;;5345:27;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9673:190;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1743:513;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;25096:89;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5831:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;11733:70;;;:::i;:::-;;6024:32;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;13657:73;;;:::i;:::-;;5494:43;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5250:29;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;11170:493;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6311:29;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;11892:628;;;;;;;;;;;;;:::i;:::-;;4297:144;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5958:26;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;16532:136;;;;;;;;;;;;;:::i;:::-;;5432:29;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;15973:499;;;;;;;;;;;;;:::i;:::-;;5563:30;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7953:135;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10277:170;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;13845:1997;14002:1;13988:11;;:15;:64;;;;;14050:1;6277:5;14037:14;;;;:::i;:::-;14022:11;;:30;;;;:::i;:::-;14007:12;:45;13988:64;:100;;;;;14072:16;;14056:13;;:32;13988:100;13980:109;;;;;;14100:14;14117:9;14100:26;;14171:13;;14152:16;;:32;;;;:::i;:::-;14140:9;:44;14137:390;;;14232:13;;14213:16;;:32;;;;:::i;:::-;14201:44;;14276:16;;14260:13;:32;;;;14321:1;14307:11;:15;;;;14371:10;14363:28;;:54;14392:24;14406:9;14392;:13;;:24;;;;:::i;:::-;14363:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14137:390;;;14506:9;14489:13;;:26;;;;;;;:::i;:::-;;;;;;;;14137:390;14560:1;14540:22;;:8;:22;;;:43;;;;14578:5;;;;;;;;;;;14566:17;;:8;:17;;;14540:43;14537:441;;;14628:2;14616:9;:14;;;;:::i;:::-;14599:13;;:31;;;;;;;:::i;:::-;;;;;;;;14691:2;14679:9;:14;;;;:::i;:::-;14645:7;:14;14653:5;;;;;;;;;;;14645:14;;;;;;;;;;;;;;;:22;;;:49;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;14537:441;;;14804:1;14797:3;14793:1;14781:9;:13;;;;:::i;:::-;:19;;;;:::i;:::-;14780:25;;;;:::i;:::-;14763:13;;:42;;;;;;;:::i;:::-;;;;;;;;14870:3;14866:1;14854:9;:13;;;;:::i;:::-;:19;;;;:::i;:::-;14820:7;:14;14828:5;;;;;;;;;;;14820:14;;;;;;;;;;;;;;;:22;;;:54;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;14972:3;14968:1;14956:9;:13;;;;:::i;:::-;:19;;;;:::i;:::-;14919:7;:17;14927:8;14919:17;;;;;;;;;;;;;;;:25;;;:57;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;14537:441;15057:14;;15009:7;:19;15017:10;15009:19;;;;;;;;;;;;;;;:38;;;:63;;;;;;;;;;;;;;;;;;15115:18;15148:6;15136:9;:18;;;;:::i;:::-;15115:39;;15165:17;15202:6;15197:2;15185:9;:14;;;;:::i;:::-;:23;;;;:::i;:::-;15165:43;;15221:20;15261:6;15256:2;15244:9;:14;;;;:::i;:::-;:23;;;;:::i;:::-;15221:46;;15304:13;15280:8;:20;15289:10;15280:20;;;;;;;;;;;;;;;;:37;;;;;;;:::i;:::-;;;;;;;;15347:12;15328:8;:15;15337:5;;;;;;;;;;;15328:15;;;;;;;;;;;;;;;;:31;;;;;;;:::i;:::-;;;;;;;;15427:15;15405:8;:18;15414:8;;;;;;;;;;;15405:18;;;;;;;;;;;;;;;;:37;;;;;;;:::i;:::-;;;;;;;;15531:15;15516:12;15500:13;:28;;;;:::i;:::-;:46;;;;:::i;:::-;15485:11;;:61;;;;;;;:::i;:::-;;;;;;;;15582:10;15562:45;;15579:1;15562:45;;;15593:13;15562:45;;;;;;:::i;:::-;;;;;;;;15660:5;;;;;;;;;;;15640:39;;15657:1;15640:39;;;15666:12;15640:39;;;;;;:::i;:::-;;;;;;;;15732:8;;;;;;;;;;;15712:45;;15729:1;15712:45;;;15741:15;15712:45;;;;;;:::i;:::-;;;;;;;;15815:8;15790:44;;15804:10;15790:44;;;15824:9;15790:44;;;;;;:::i;:::-;;;;;;;;13894:1948;;;;13845:1997;:::o;22390:154::-;22430:4;22454:82;22497:10;22508:12;22480:41;;;;;;;;;:::i;:::-;;;;;;;;;;;;;22470:52;;;;;;22465:58;;22533:1;22454:10;:82::i;:::-;22447:89;;22390:154;:::o;16760:766::-;16827:9;16839:7;:13;16847:4;16839:13;;;;;;;;;;;;;;;:32;;;;;;;;;;;;16827:44;;;;16902:1;16886:8;:14;16895:4;16886:14;;;;;;;;;;;;;;;;:17;16885:32;;;;16915:1;16909:4;:7;16885:32;16882:139;;;16973:14;;16933:7;:13;16941:4;16933:13;;;;;;;;;;;;;;;:32;;;:55;;;;;;;;;;;;;;;;;;17003:7;;;16882:139;17040:14;;17034:4;:20;17031:58;;17071:7;;;17031:58;17099:10;17142:11;;17129:10;17112:8;:14;17121:4;17112:14;;;;;;;;;;;;;;;;:27;;;;:::i;:::-;:41;;;;:::i;:::-;17099:54;;17164:12;17191:94;17201:14;;17196:4;:19;17191:94;;;17258:9;17268:4;17258:15;;;;;;;;:::i;:::-;;;;;;;;;;17250:5;:23;;;;:::i;:::-;17239:34;;;;;:::i;:::-;;;17216:6;;;;;;;17191:94;;;17316:10;17306:7;:20;;;;:::i;:::-;17295:32;;17355:7;17338:13;;:24;;;;;;;:::i;:::-;;;;;;;;17406:7;17373;:13;17381:4;17373:13;;;;;;;;;;;;;;;:21;;;:41;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;17467:4;17425:7;:13;17433:4;17425:13;;;;;;;;;;;;;;;:32;;;:47;;;;;;;;;;;;;;;;;;17500:4;17488:30;;;17505:7;17513:4;17488:30;;;;;;;:::i;:::-;;;;;;;;16816:710;;;16760:766;;:::o;19476:2114::-;19509:17;19529:4;:16;19534:10;19529:16;;;;;;;;;;;;;;;19509:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19576:1;19559:6;:15;;;:18;;;19556:152;;19635:40;;;;;;;;19647:1;19635:40;;;;;;19659:1;19635:40;;;;;;19672:1;19635:40;;;;;19616:4;:16;19621:10;19616:16;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19690:7;;;19556:152;19736:1;19722:6;:12;;;:15;;;19721:41;;;;19760:1;19743:6;:15;;;:18;;;19721:41;19718:104;;;19778:11;:9;:11::i;:::-;19804:7;;;19718:104;19853:6;:15;;;19840:28;;:12;:28;19832:37;;;;;;19960:12;6277:5;19940:2;:15;;;;:::i;:::-;19921:6;:15;;;:35;;;;;;:::i;:::-;:51;19918:263;;20034:10;20026:48;;;20045:6;:15;;;20061:12;20026:48;;;;;;;:::i;:::-;;;;;;;;20108:40;;;;;;;;20120:1;20108:40;;;;;;20132:1;20108:40;;;;;;20145:1;20108:40;;;;;20089:4;:16;20094:10;20089:16;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20163:7;;;19918:263;20191:10;20216:11;20274:3;20258:6;:15;;;:19;;;;:::i;:::-;20245:32;;:12;:32;20242:904;;;20368:6;:15;;;20358:26;;;20353:32;;20339:47;;;;20409:29;20418:6;20432:4;20409:8;:29::i;:::-;20401:37;;20242:904;;;20493:1;20483:9;;:11;20480:655;;;20642:24;20650:6;:15;;;20642:24;;:7;:24::i;:::-;20635:31;;20696:9;20688:4;:17;;;20685:231;;20781:6;:12;;;20776:18;;20768:26;;20685:231;;;20867:29;20876:6;20890:4;20867:8;:29::i;:::-;20859:37;;20685:231;20480:655;;;20974:10;20966:48;;;20985:6;:15;;;21001:12;20966:48;;;;;;;:::i;:::-;;;;;;;;21052:40;;;;;;;;21064:1;21052:40;;;;;;21076:1;21052:40;;;;;;21089:1;21052:40;;;;;21033:4;:16;21038:10;21033:16;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21111:8;;;;;20480:655;20242:904;21175:40;;;;;;;;21187:1;21175:40;;;;;;21199:1;21175:40;;;;;;21212:1;21175:40;;;;;21156:4;:16;21161:10;21156:16;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21235:1;21229:5;:7;21226:357;;;21265:10;21258:56;;;21281:6;:14;;;21276:20;;21302:4;21297:10;;21308:5;21258:56;;;;;;;;:::i;:::-;;;;;;;;21340:6;;21332:5;:14;21329:121;;;21375:5;21366:6;:14;;;;21417:10;21404:30;;;21428:5;21404:30;;;;;;:::i;:::-;;;;;;;;21329:121;21464:10;21468:5;21464:3;:10::i;:::-;21226:357;;;21528:10;21520:51;;;21544:6;:14;;;21539:20;;21565:4;21560:10;;21520:51;;;;;;;:::i;:::-;;;;;;;;21226:357;19498:2092;;;19476:2114;:::o;4588:51::-;;;;;;;;;;;;;;;;;;;:::o;10569:91::-;7014:5;;;;;;;;;;;7000:19;;:10;:19;;;6993:27;;;;:::i;:::-;;10645:7:::1;10632:10;:20;;;;10569:91:::0;:::o;3657:311::-;3823:1;3813:6;:11;;3812:53;;;;;3863:1;3830:7;:19;3838:10;3830:19;;;;;;;;;;;;;;;:29;3850:8;3830:29;;;;;;;;;;;;;;;;:34;;3812:53;3810:56;3803:64;;;;:::i;:::-;;3906:6;3874:7;:19;3882:10;3874:19;;;;;;;;;;;;;;;:29;3894:8;3874:29;;;;;;;;;;;;;;;:38;;;;3945:8;3924:38;;3933:10;3924:38;;;3955:6;3924:38;;;;;;:::i;:::-;;;;;;;;3657:311;;:::o;26914:692::-;26949:4;26966:10;26979:8;;26966:21;;27010:1;27001:5;:10;:40;;;;27039:2;27031:5;:10;;;;:::i;:::-;27015:12;:26;;27001:40;26998:85;;;27065:5;27058:13;;;;;26998:85;27093:14;27134:3;27121:12;:16;27118:164;;;27198:1;27186:13;;27118:164;;;27267:3;27252:12;:18;;;;:::i;:::-;27240:30;;27118:164;27303:9;27295:5;:17;27292:125;;;27329:8;27340:9;27329:20;;27377:2;27371:3;:8;;;;:::i;:::-;27364:15;;;;;:::i;:::-;;;27402:3;27394:11;;27314:103;27292:125;27427:10;27462:2;27449:9;;27441:5;:17;;;;:::i;:::-;27440:24;;;;:::i;:::-;27427:37;;27504:39;27522:5;27536;27504:10;:39::i;:::-;27475:6;6277:5;27482;:18;;;;:::i;:::-;27475:26;;;;;;;;:::i;:::-;;;;;;;;;:68;;;;27573:2;27565:5;:10;;;;:::i;:::-;27554:8;:21;;;;27593:4;27586:12;;;;;26914:692;;:::o;5707:22::-;;;;:::o;622:23::-;;;;:::o;3009:412::-;3104:6;1567:1;1560:4;:8;;;;:::i;:::-;1541;;:15;;:27;;1534:35;;;;:::i;:::-;;3119:15:::1;3137:7;:14;3145:5;3137:14;;;;;;;;;;;;;;;:26;3152:10;3137:26;;;;;;;;;;;;;;;;3119:44;;3170:21;3185:5;3170:14;:21::i;:::-;3198:19;3213:3;3198:14;:19::i;:::-;3240:25;3258:6;3240:8;:13;3249:3;3240:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;3224:8;:13;3233:3;3224:13;;;;;;;;;;;;;;;:41;;;;3290:27;3310:6;3290:8;:15;3299:5;3290:15;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;3272:8;:15;3281:5;3272:15;;;;;;;;;;;;;;;:45;;;;3353:22;3368:6;3353:10;:14;;:22;;;;:::i;:::-;3324:7;:14;3332:5;3324:14;;;;;;;;;;;;;;;:26;3339:10;3324:26;;;;;;;;;;;;;;;:51;;;;3403:3;3387:28;;3396:5;3387:28;;;3408:6;3387:28;;;;;;:::i;:::-;;;;;;;;3112:309;3009:412:::0;;;;:::o;22661:174::-;22723:4;22747:80;22790:10;22801:12;22773:41;;;;;;;;;:::i;:::-;;;;;;;;;;;;;22763:52;;;;;;22758:58;;22818:8;22747:10;:80::i;:::-;22740:87;;22661:174;;;:::o;22949:1357::-;23023:4;23040:5;:3;:5::i;:::-;23087:14;23111:5;23087:30;;23149:7;23136:9;:20;;:46;;;;;23172:10;;23160:9;:22;23136:46;23128:55;;;;;;23209:1;23197:9;:13;23194:1027;;;23242:1;23229:11;;:14;23226:156;;23349:2;23337:9;:14;;;;:::i;:::-;23308:9;23318:14;;23308:25;;;;;;;;:::i;:::-;;;;;;;;;;:43;;;;;;;:::i;:::-;;;;;;;;23226:156;23419:1;23399:22;;:8;:22;;;23396:208;;23442:8;23465:3;23453:9;:15;;;;:::i;:::-;23442:26;;23504:3;23487:13;;:20;;;;;;;:::i;:::-;;;;;;;;23563:3;23526:7;:17;23534:8;23526:17;;;;;;;;;;;;;;;:25;;;:41;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;23423:181;23396:208;23647:1;23632:12;:16;;;;:::i;:::-;23621:8;;:27;23618:401;;;23695:1;23680:12;:16;;;;:::i;:::-;23669:8;:27;;;;23728:9;23715:10;:22;;;;23618:401;;;23806:10;;23793;;:23;23790:214;;;23841:8;;:10;;;;;;;;;:::i;:::-;;;;;;23887:9;23874:10;:22;;;;23790:214;;;23975:9;23961:10;;:23;;;;;;;:::i;:::-;;;;;;;;23790:214;23618:401;24052:86;;;;;;;;24072:9;24052:86;;;;;;24100:7;24093:15;;24052:86;;;;;;24127:8;;24052:86;;;;;24033:4;:16;24038:10;24033:16;;;;;;;;;;;;;;;:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24165:10;24158:51;;;24181:7;24176:13;;24190:8;;24199:9;24158:51;;;;;;;;:::i;:::-;;;;;;;;23194:1027;24231:9;:7;:9::i;:::-;;24289:8;;24282:16;;;22949:1357;;;;:::o;4691:33::-;4723:1;4691:33;:::o;683:23::-;;;;;;;;;;;;;:::o;6243:39::-;6277:5;6243:39;:::o;24454:559::-;24501:4;24539:1;24526:9;;:14;:27;;;;;24552:1;24544:5;:9;24526:27;:50;;;;;6277:5;24557;:19;;24526:50;24518:59;;;;;;24588:6;24613:5;24597:6;:13;;;;:21;;;;:::i;:::-;24588:30;;6277:5;24632:1;:14;24629:59;;;6277:5;24662:14;;24629:59;24702:6;24709;:13;;;;24702:20;;24698:99;24725:1;24723;:3;24698:99;;;24771:6;24783:1;24771:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24727:3;;;;;;;24698:99;;;;6277:5;24810:6;:13;;;;:25;24807:167;;24924:2;24909:12;:17;;;;:::i;:::-;24892:12;:35;;;;:::i;:::-;24880:9;:47;;;;24953:9;;24942:8;:20;;;;24807:167;24991:6;:13;;;;24984:21;;;24454:559;;;:::o;9178:362::-;9228:4;9262:1;9248:11;;:15;9245:56;;;9287:1;9280:9;;;;9245:56;9311:11;6277:5;9355:2;:15;;;;:::i;:::-;9341:9;;9326:12;:24;;;;:::i;:::-;9325:46;;;;:::i;:::-;9311:60;;9394:14;;9385:6;:23;9382:64;;;9432:1;9425:9;;;;;9382:64;6277:5;9514:2;:15;;;;:::i;:::-;9500:9;;9485:12;:24;;;;:::i;:::-;9484:46;;;;:::i;:::-;6277:5;9464:2;:15;;;;:::i;:::-;9463:68;;;;:::i;:::-;9456:76;;;9178:362;;:::o;8458:115::-;8517:4;8546;:12;8551:6;8546:12;;;;;;;;;;;;;;;:18;;;;;;;;;;;;8541:24;;8534:31;;8458:115;;;:::o;9968:199::-;7104:8;;;;;;;;;;;7090:22;;:10;:22;;;7083:30;;;;:::i;:::-;;10062:1:::1;10046:18;;:4;:18;;::::0;10039:26:::1;;;;:::i;:::-;;10076;10091:10;10076:14;:26::i;:::-;10113:20;10128:4;10113:14;:20::i;:::-;10155:4;10144:8;;:15;;;;;;;;;;;;;;;;;;9968:199:::0;:::o;27712:173::-;27762:6;27781:97;27788:4;27786:1;:6;27781:97;;;27816:9;:7;:9::i;:::-;27812:55;;27845:7;;;27812:55;27793:3;;;;;;;27781:97;;;27751:134;27712:173;;:::o;18573:840::-;18625:4;18643:17;18663:4;:10;18668:4;18663:10;;;;;;;;;;;;;;;18643:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18703:1;18689:6;:12;;;:15;;;18688:54;;;;18740:1;18723:6;:15;;;:18;;;;18688:54;:101;;;;18773:6;:15;;;18760:28;;:12;:28;18688:101;:169;;;;6277:5;18840:2;:15;;;;:::i;:::-;18821:6;:15;;;:35;;;;;;:::i;:::-;18807:12;:49;;18688:169;18684:210;;;18880:1;18873:9;;;;;18684:210;18936:3;18920:6;:15;;;:19;;;;:::i;:::-;18907:32;;:12;:32;18904:174;;;19008:57;19017:6;19046;:15;;;19036:26;;;19031:32;;19008:8;:57::i;:::-;19001:65;;;;;18904:174;19101:1;19091:9;;:11;19088:298;;;19118:11;19132:24;19140:6;:15;;;19132:24;;:7;:24::i;:::-;19118:38;;19182:9;19174:4;:17;;;19171:211;;19262:6;:12;;;19257:18;;19250:26;;;;;;19171:211;19336:29;19345:6;19359:4;19336:8;:29::i;:::-;19329:37;;;;;;19088:298;19403:1;19396:9;;;18573:840;;;;:::o;10767:110::-;7014:5;;;;;;;;;;;7000:19;;:10;:19;;;6993:27;;;;:::i;:::-;;10843:1:::1;10828:12;:16;;;;:::i;:::-;10817:8;:27;;;;10868:1;10855:10;:14;;;;10767:110::o:0;6093:20::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7703:125::-;7767:4;7796:7;:15;7804:6;7796:15;;;;;;;;;;;;;;;:23;;;;;;;;;;;;7791:29;;7784:36;;7703:125;;;:::o;5757:25::-;;;;:::o;2468:115::-;2533:12;2561:8;:16;2570:6;2561:16;;;;;;;;;;;;;;;;2554:23;;2468:115;;;:::o;7493:98::-;7540:4;7569:6;:13;;;;7557:26;;7493:98;:::o;5892:24::-;;;;:::o;8222:133::-;8284:4;8313:7;:15;8321:6;8313:15;;;;;;;;;;;;;;;:33;;;;;;;;;;;;8308:39;;8301:46;;8222:133;;;:::o;5600:23::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;650:20::-;;;;;;;;;;;;;:::o;8957:124::-;9022:4;9051;:12;9056:6;9051:12;;;;;;;;;;;;;;;:21;;;;;;;;;;;;9046:27;;9039:34;;8957:124;;;:::o;8707:116::-;8765:4;8794;:12;8799:6;8794:12;;;;;;;;;;;;;;;:20;;;;;;;;;;;;8789:26;;8782:33;;8707:116;;;:::o;4646:38::-;;;;;;;;;;;;;;;;;;;:::o;12601:319::-;12673:1;12643:7;:19;12651:10;12643:19;;;;;;;;;;;;;;;:27;;;;;;;;;;;;:31;;;:88;;;;;12719:12;12678:7;:19;12686:10;12678:19;;;;;;;;;;;;;;;:37;;;;;;;;;;;;:53;;;;12643:88;12640:273;;;12747:12;12762:7;:19;12770:10;12762:19;;;;;;;;;;;;;;;:27;;;;;;;;;;;;12747:42;;;;12834:1;12804:7;:19;12812:10;12804:19;;;;;;;;;;;;;;;:27;;;:31;;;;;;;;;;;;;;;;;;12867:7;12850:13;;:24;;;;;;;:::i;:::-;;;;;;;;12889:12;12893:7;12889:3;:12::i;:::-;12732:181;12640:273;12601:319::o;5345:27::-;;;;:::o;9673:190::-;7014:5;;;;;;;;;;;7000:19;;:10;:19;;;6993:27;;;;:::i;:::-;;9761:1:::1;9745:18;;:4;:18;;::::0;9738:26:::1;;;;:::i;:::-;;9775;9790:10;9775:14;:26::i;:::-;9812:20;9827:4;9812:14;:20::i;:::-;9851:4;9843:5;;:12;;;;;;;;;;;;;;;;;;9673:190:::0;:::o;1743:513::-;1819:6;1567:1;1560:4;:8;;;;:::i;:::-;1541;;:15;;:27;;1534:35;;;;:::i;:::-;;1834:26:::1;1849:10;1834:14;:26::i;:::-;1890:32;1915:6;1890:8;:20;1899:10;1890:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;1867:8;:20;1876:10;1867:20;;;;;;;;;;;;;;;:55;;;;1947:4;1932:20;;:3;:20;;::::0;1929:322:::1;;1965:21;1980:5;;;;;;;;;;;1965:14;:21::i;:::-;2015:27;2035:6;2015:8;:15;2024:5;;;;;;;;;;;2015:15;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;1997:8;:15;2006:5;;;;;;;;;;;1997:15;;;;;;;;;;;;;;;:45;;;;2079:5;;;;;;;;;;;2058:35;;2067:10;2058:35;;;2086:6;2058:35;;;;;;:::i;:::-;;;;;;;;1929:322;;;2123:19;2138:3;2123:14;:19::i;:::-;2169:25;2187:6;2169:8;:13;2178:3;2169:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2153:8;:13;2162:3;2153:13;;;;;;;;;;;;;;;:41;;;;2231:3;2210:33;;2219:10;2210:33;;;2236:6;2210:33;;;;;;:::i;:::-;;;;;;;;1929:322;1743:513:::0;;;:::o;25096:89::-;25138:4;25162:14;25172:3;25162:9;:14::i;:::-;25155:22;;25096:89;:::o;5831:24::-;;;;:::o;11733:70::-;11781:14;:12;:14::i;:::-;11733:70::o;6024:32::-;;;;:::o;13657:73::-;13709:13;13716:5;;;;;;;;;;;13709:6;:13::i;:::-;13657:73::o;5494:43::-;;;;:::o;5250:29::-;;;;:::o;11170:493::-;7014:5;;;;;;;;;;;7000:19;;:10;:19;;;6993:27;;;;:::i;:::-;;11233:14:::1;:12;:14::i;:::-;11276:1;11266:7;:11;:90;;;;;11349:7;11333:13;;11327:2;11323:1;11307:13:::0;::::1;:17;;;;:::i;:::-;:22;;;;:::i;:::-;11306:40;;;;:::i;:::-;:50;;;;:::i;:::-;11281:21;:75;;11266:90;11258:99;;;::::0;::::1;;11407:1;11388:16;;:20;;;;:::i;:::-;11371:13;;:37;11368:201;;11501:3;11477:21;:27;;;;:::i;:::-;11466:7;:38;;11465:91;;;;;11544:12;11525:15;11509:13;;:31;;;;:::i;:::-;:47;;11465:91;11457:100;;;::::0;::::1;;11368:201;11587:10;11579:28;;:37;11608:7;11579:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;11643:12;11627:13;:28;;;;11170:493:::0;:::o;6311:29::-;;;;:::o;11892:628::-;11951:1;11937:11;;:15;:65;;;;;12000:1;6277:5;11987:14;;;;:::i;:::-;11972:11;;:30;;;;:::i;:::-;11956:12;:46;;11937:65;11934:579;;;12047:1;12033:11;:15;;;;11934:579;;;12132:1;12120:9;;:13;12117:385;;;12147:11;6277:5;12191:2;:15;;;;:::i;:::-;12177:9;;12162:12;:24;;;;:::i;:::-;12161:47;;;;:::i;:::-;12147:61;;12258:1;12239:9;:16;;;;:20;;;;:::i;:::-;12230:6;:29;12227:94;;;12284:9;12299:1;12284:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12227:94;12351:14;;12342:6;:23;:43;;;;;12384:1;12369:11;;:16;12342:43;:84;;;;;12425:1;12406:9;:16;;;;:20;;;;:::i;:::-;12389:14;;:37;12342:84;12339:148;;;12451:14;;:16;;;;;;;;;:::i;:::-;;;;;;12339:148;12134:368;12117:385;11934:579;11892:628::o;4297:144::-;4380:14;4410:7;:15;4418:6;4410:15;;;;;;;;;;;;;;;:25;4426:8;4410:25;;;;;;;;;;;;;;;;4403:32;;4297:144;;;;:::o;5958:26::-;;;;:::o;16532:136::-;16599:1;16584:11;;:16;16576:25;;;;;;16612:26;16627:10;16612:14;:26::i;:::-;16649:11;:9;:11::i;:::-;16532:136::o;5432:29::-;;;;:::o;15973:499::-;16037:1;16022:11;;:16;16014:25;;;;;;16050:26;16065:10;16050:14;:26::i;:::-;16087:22;16135:6;16112:8;:20;16121:10;16112:20;;;;;;;;;;;;;;;;:29;;;;:::i;:::-;16087:54;;16185:1;16157:52;;16166:10;16157:52;;;16188:8;:20;16197:10;16188:20;;;;;;;;;;;;;;;;16157:52;;;;;;:::i;:::-;;;;;;;;16244:8;:20;16253:10;16244:20;;;;;;;;;;;;;;;16237:27;;;16348:17;16331:13;;:34;;;;;;;:::i;:::-;;;;;;;;16439:2;16435:1;16415:17;:21;;;;:::i;:::-;:26;;;;:::i;:::-;16376:7;:19;16384:10;16376:19;;;;;;;;;;;;;;;:27;;;:66;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;16453:11;:9;:11::i;:::-;16003:469;15973:499::o;5563:30::-;;;;:::o;7953:135::-;8016:4;8045:7;:15;8053:6;8045:15;;;;;;;;;;;;;;;:34;;;;;;;;;;;;8040:40;;8033:47;;7953:135;;;:::o;10277:170::-;7014:5;;;;;;;;;;;7000:19;;:10;:19;;;6993:27;;;;:::i;:::-;;10366:1:::1;10351:11;;:16;:33;;;;;10383:1;10371:9;;:13;10351:33;:57;;;;;10403:5;10388:12;:20;10351:57;10343:66;;;::::0;::::1;;10434:5;10420:11;:19;;;;10277:170:::0;:::o;352:104::-;404:4;429:1;424;:6;;417:14;;;;:::i;:::-;;449:1;445;:5;;;;:::i;:::-;438:12;;352:104;;;;:::o;17561:949::-;17635:4;17672:14;17696:7;:15;;;17672:40;;17723:10;17746:5;17736:7;:15;17723:28;;17762:14;18038:1;18025:8;18019:3;:14;18018:21;;;:29;;18046:1;18018:29;;;18042:1;18018:29;17990:1;17978:7;17972:3;:13;17971:20;;;:28;;17998:1;17971:28;;;17994:1;17971:28;17943:1;17932:6;17926:3;:12;17925:19;;;:27;;17951:1;17925:27;;;17947:1;17925:27;17897:1;17887:5;17881:3;:11;17880:18;;;:26;;17905:1;17880:26;;;17901:1;17880:26;17852:1;17843:4;17837:3;:10;17836:17;;;:25;;17860:1;17836:25;;;17856:1;17836:25;17808:1;17800:3;17794;:9;17793:16;;;:24;;17816:1;17793:24;;;17812:1;17793:24;17792:71;;;;:::i;:::-;:116;;;;:::i;:::-;:162;;;;:::i;:::-;:209;;;;:::i;:::-;:257;;;;:::i;:::-;17762:287;;;;18074:1;18063:7;:12;;;18060:80;;18120:7;18103;:13;;;18098:19;;:29;;;;:::i;:::-;18091:37;;;;;;;18060:80;18164:1;18153:7;:12;;;18150:78;;18210:5;18193:7;:13;;;18188:19;;:27;;;;:::i;:::-;18181:35;;;;;;;18150:78;18252:1;18241:7;:12;;;18238:76;;18298:3;18281:7;:13;;;18276:19;;:25;;;;:::i;:::-;18269:33;;;;;;;18238:76;18338:1;18327:7;:12;;;18324:75;;18384:2;18367:7;:13;;;18362:19;;:24;;;;:::i;:::-;18355:32;;;;;;;18324:75;18423:1;18412:7;:12;;;18409:74;;18469:1;18452:7;:13;;;18447:19;;:23;;;;:::i;:::-;18440:31;;;;;;;18409:74;18500:1;18493:9;;;;;17561:949;;;;;:::o;26452:408::-;26504:6;26523:10;26559:2;26546:9;;26537:6;:18;;;;:::i;:::-;26536:25;;;;:::i;:::-;26523:38;;26572:9;26584:6;6277:5;26591;:18;;;;:::i;:::-;26584:26;;;;;;;;:::i;:::-;;;;;;;;;;26572:38;;26654:3;26646:4;:11;;6277:5;26624;:18;;;;:::i;:::-;:33;26621:123;;26681:9;26674:17;;;;;;26621:123;26754:10;26790:2;26777:9;;26768:6;:18;;;;:::i;:::-;26767:25;;;;:::i;:::-;26754:38;;26842:8;26832:5;26827:2;:10;;;;:::i;:::-;26818:4;:20;;26817:33;26803:49;;;;;26452:408;;;;:::o;12928:649::-;12974:11;13012:1;12988:21;:25;;;;:::i;:::-;12974:39;;13037:7;13027:6;:17;13024:546;;13069:10;13061:28;;:37;13090:7;13061:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13126:8;13116:7;:18;13113:84;;;13167:14;:12;:14::i;:::-;13113:84;13024:546;;;13238:16;13267:6;13257:7;:16;;;;:::i;:::-;13238:35;;13305:11;13288:13;;:28;;;;;;;:::i;:::-;;;;;;;;13370:11;13331:7;:19;13339:10;13331:19;;;;;;;;;;;;;;;:27;;;:51;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;13459:16;13444:12;:31;;;;:::i;:::-;13397:7;:19;13405:10;13397:19;;;;;;;;;;;;;;;:37;;;:79;;;;;;;;;;;;;;;;;;13530:10;13522:28;;:36;13551:6;13522:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13223:347;13024:546;12963:614;12928:649;:::o;25193:1251::-;25265:4;26431:3;6277:5;26406:6;26401:12;;:25;;;;:::i;:::-;26399:35;;26376:3;26362:8;26356:1;26349:6;:8;;;;:::i;:::-;26339:19;;;26334:25;;:36;26332:47;;26263:3;26249:8;26243:1;26236:6;:8;;;;:::i;:::-;26226:19;;;26221:25;;:36;26219:47;;26150:3;26136:8;26130:1;26123:6;:8;;;;:::i;:::-;26113:19;;;26108:25;;:36;26106:47;;26037:3;26023:8;26017:1;26010:6;:8;;;;:::i;:::-;26000:19;;;25995:25;;:36;25993:47;;25924:3;25910:8;25904:1;25897:6;:8;;;;:::i;:::-;25887:19;;;25882:25;;:36;25880:47;;25812:2;25798:8;25792:1;25785:6;:8;;;;:::i;:::-;25775:19;;;25770:25;;:36;25768:46;;25700:2;25686:8;25680:1;25673:6;:8;;;;:::i;:::-;25663:19;;;25658:25;;:36;25656:46;;25588:2;25574:8;25568:1;25561:6;:8;;;;:::i;:::-;25551:19;;;25546:25;;:36;25544:46;;25476:2;25462:8;25456:1;25449:6;:8;;;;:::i;:::-;25439:19;;;25434:25;;:36;25432:46;;25362:8;25349:6;25339:19;;;25334:25;;:36;25332:148;:260;:372;:484;:597;:710;:823;:936;:1049;:1103;25324:1112;;25193:1251;;;;:::o;460:121::-;512:4;525:6;538:1;534;:5;;;;:::i;:::-;525:14;;558:1;553;:6;;546:14;;;;:::i;:::-;;574:1;567:8;;;460:121;;;;:::o;88:117:1:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:99::-;1228:6;1262:5;1256:12;1246:22;;1176:99;;;:::o;1281:169::-;1365:11;1399:6;1394:3;1387:19;1439:4;1434:3;1430:14;1415:29;;1281:169;;;;:::o;1456:246::-;1537:1;1547:113;1561:6;1558:1;1555:13;1547:113;;;1646:1;1641:3;1637:11;1631:18;1627:1;1622:3;1618:11;1611:39;1583:2;1580:1;1576:10;1571:15;;1547:113;;;1694:1;1685:6;1680:3;1676:16;1669:27;1518:184;1456:246;;;:::o;1708:102::-;1749:6;1800:2;1796:7;1791:2;1784:5;1780:14;1776:28;1766:38;;1708:102;;;:::o;1816:377::-;1904:3;1932:39;1965:5;1932:39;:::i;:::-;1987:71;2051:6;2046:3;1987:71;:::i;:::-;1980:78;;2067:65;2125:6;2120:3;2113:4;2106:5;2102:16;2067:65;:::i;:::-;2157:29;2179:6;2157:29;:::i;:::-;2152:3;2148:39;2141:46;;1908:285;1816:377;;;;:::o;2199:313::-;2312:4;2350:2;2339:9;2335:18;2327:26;;2399:9;2393:4;2389:20;2385:1;2374:9;2370:17;2363:47;2427:78;2500:4;2491:6;2427:78;:::i;:::-;2419:86;;2199:313;;;;:::o;2518:77::-;2555:7;2584:5;2573:16;;2518:77;;;:::o;2601:122::-;2674:24;2692:5;2674:24;:::i;:::-;2667:5;2664:35;2654:63;;2713:1;2710;2703:12;2654:63;2601:122;:::o;2729:139::-;2775:5;2813:6;2800:20;2791:29;;2829:33;2856:5;2829:33;:::i;:::-;2729:139;;;;:::o;2874:329::-;2933:6;2982:2;2970:9;2961:7;2957:23;2953:32;2950:119;;;2988:79;;:::i;:::-;2950:119;3108:1;3133:53;3178:7;3169:6;3158:9;3154:22;3133:53;:::i;:::-;3123:63;;3079:117;2874:329;;;;:::o;3209:474::-;3277:6;3285;3334:2;3322:9;3313:7;3309:23;3305:32;3302:119;;;3340:79;;:::i;:::-;3302:119;3460:1;3485:53;3530:7;3521:6;3510:9;3506:22;3485:53;:::i;:::-;3475:63;;3431:117;3587:2;3613:53;3658:7;3649:6;3638:9;3634:22;3613:53;:::i;:::-;3603:63;;3558:118;3209:474;;;;;:::o;3689:90::-;3723:7;3766:5;3759:13;3752:21;3741:32;;3689:90;;;:::o;3785:109::-;3866:21;3881:5;3866:21;:::i;:::-;3861:3;3854:34;3785:109;;:::o;3900:210::-;3987:4;4025:2;4014:9;4010:18;4002:26;;4038:65;4100:1;4089:9;4085:17;4076:6;4038:65;:::i;:::-;3900:210;;;;:::o;4116:118::-;4203:24;4221:5;4203:24;:::i;:::-;4198:3;4191:37;4116:118;;:::o;4240:222::-;4333:4;4371:2;4360:9;4356:18;4348:26;;4384:71;4452:1;4441:9;4437:17;4428:6;4384:71;:::i;:::-;4240:222;;;;:::o;4468:619::-;4545:6;4553;4561;4610:2;4598:9;4589:7;4585:23;4581:32;4578:119;;;4616:79;;:::i;:::-;4578:119;4736:1;4761:53;4806:7;4797:6;4786:9;4782:22;4761:53;:::i;:::-;4751:63;;4707:117;4863:2;4889:53;4934:7;4925:6;4914:9;4910:22;4889:53;:::i;:::-;4879:63;;4834:118;4991:2;5017:53;5062:7;5053:6;5042:9;5038:22;5017:53;:::i;:::-;5007:63;;4962:118;4468:619;;;;;:::o;5093:474::-;5161:6;5169;5218:2;5206:9;5197:7;5193:23;5189:32;5186:119;;;5224:79;;:::i;:::-;5186:119;5344:1;5369:53;5414:7;5405:6;5394:9;5390:22;5369:53;:::i;:::-;5359:63;;5315:117;5471:2;5497:53;5542:7;5533:6;5522:9;5518:22;5497:53;:::i;:::-;5487:63;;5442:118;5093:474;;;;;:::o;5573:118::-;5660:24;5678:5;5660:24;:::i;:::-;5655:3;5648:37;5573:118;;:::o;5697:222::-;5790:4;5828:2;5817:9;5813:18;5805:26;;5841:71;5909:1;5898:9;5894:17;5885:6;5841:71;:::i;:::-;5697:222;;;;:::o;5925:474::-;5993:6;6001;6050:2;6038:9;6029:7;6025:23;6021:32;6018:119;;;6056:79;;:::i;:::-;6018:119;6176:1;6201:53;6246:7;6237:6;6226:9;6222:22;6201:53;:::i;:::-;6191:63;;6147:117;6303:2;6329:53;6374:7;6365:6;6354:9;6350:22;6329:53;:::i;:::-;6319:63;;6274:118;5925:474;;;;;:::o;6405:180::-;6453:77;6450:1;6443:88;6550:4;6547:1;6540:15;6574:4;6571:1;6564:15;6591:410;6631:7;6654:20;6672:1;6654:20;:::i;:::-;6649:25;;6688:20;6706:1;6688:20;:::i;:::-;6683:25;;6743:1;6740;6736:9;6765:30;6783:11;6765:30;:::i;:::-;6754:41;;6944:1;6935:7;6931:15;6928:1;6925:22;6905:1;6898:9;6878:83;6855:139;;6974:18;;:::i;:::-;6855:139;6639:362;6591:410;;;;:::o;7007:191::-;7047:3;7066:20;7084:1;7066:20;:::i;:::-;7061:25;;7100:20;7118:1;7100:20;:::i;:::-;7095:25;;7143:1;7140;7136:9;7129:16;;7164:3;7161:1;7158:10;7155:36;;;7171:18;;:::i;:::-;7155:36;7007:191;;;;:::o;7204:194::-;7244:4;7264:20;7282:1;7264:20;:::i;:::-;7259:25;;7298:20;7316:1;7298:20;:::i;:::-;7293:25;;7342:1;7339;7335:9;7327:17;;7366:1;7360:4;7357:11;7354:37;;;7371:18;;:::i;:::-;7354:37;7204:194;;;;:::o;7404:180::-;7452:77;7449:1;7442:88;7549:4;7546:1;7539:15;7573:4;7570:1;7563:15;7590:185;7630:1;7647:20;7665:1;7647:20;:::i;:::-;7642:25;;7681:20;7699:1;7681:20;:::i;:::-;7676:25;;7720:1;7710:35;;7725:18;;:::i;:::-;7710:35;7767:1;7764;7760:9;7755:14;;7590:185;;;;:::o;7781:138::-;7818:7;7858:54;7851:5;7847:66;7836:77;;7781:138;;;:::o;7925:244::-;7965:3;7984:20;8002:1;7984:20;:::i;:::-;7979:25;;8018:20;8036:1;8018:20;:::i;:::-;8013:25;;8061:1;8058;8054:9;8047:16;;8084:54;8079:3;8076:63;8073:89;;;8142:18;;:::i;:::-;8073:89;7925:244;;;;:::o;8175:94::-;8208:8;8256:5;8252:2;8248:14;8227:35;;8175:94;;;:::o;8275:::-;8314:7;8343:20;8357:5;8343:20;:::i;:::-;8332:31;;8275:94;;;:::o;8375:100::-;8414:7;8443:26;8463:5;8443:26;:::i;:::-;8432:37;;8375:100;;;:::o;8481:157::-;8586:45;8606:24;8624:5;8606:24;:::i;:::-;8586:45;:::i;:::-;8581:3;8574:58;8481:157;;:::o;8644:79::-;8683:7;8712:5;8701:16;;8644:79;;;:::o;8729:157::-;8834:45;8854:24;8872:5;8854:24;:::i;:::-;8834:45;:::i;:::-;8829:3;8822:58;8729:157;;:::o;8892:397::-;9032:3;9047:75;9118:3;9109:6;9047:75;:::i;:::-;9147:2;9142:3;9138:12;9131:19;;9160:75;9231:3;9222:6;9160:75;:::i;:::-;9260:2;9255:3;9251:12;9244:19;;9280:3;9273:10;;8892:397;;;;;:::o;9295:180::-;9343:77;9340:1;9333:88;9440:4;9437:1;9430:15;9464:4;9461:1;9454:15;9481:332;9602:4;9640:2;9629:9;9625:18;9617:26;;9653:71;9721:1;9710:9;9706:17;9697:6;9653:71;:::i;:::-;9734:72;9802:2;9791:9;9787:18;9778:6;9734:72;:::i;:::-;9481:332;;;;;:::o;9819:93::-;9855:7;9895:10;9888:5;9884:22;9873:33;;9819:93;;;:::o;9918:60::-;9946:3;9967:5;9960:12;;9918:60;;;:::o;9984:140::-;10033:9;10066:52;10084:33;10093:23;10110:5;10093:23;:::i;:::-;10084:33;:::i;:::-;10066:52;:::i;:::-;10053:65;;9984:140;;;:::o;10130:129::-;10216:36;10246:5;10216:36;:::i;:::-;10211:3;10204:49;10130:129;;:::o;10265:330::-;10385:4;10423:2;10412:9;10408:18;10400:26;;10436:70;10503:1;10492:9;10488:17;10479:6;10436:70;:::i;:::-;10516:72;10584:2;10573:9;10569:18;10560:6;10516:72;:::i;:::-;10265:330;;;;;:::o;10601:197::-;10640:3;10659:19;10676:1;10659:19;:::i;:::-;10654:24;;10692:19;10709:1;10692:19;:::i;:::-;10687:24;;10734:1;10731;10727:9;10720:16;;10757:10;10752:3;10749:19;10746:45;;;10771:18;;:::i;:::-;10746:45;10601:197;;;;:::o;10804:442::-;10953:4;10991:2;10980:9;10976:18;10968:26;;11004:71;11072:1;11061:9;11057:17;11048:6;11004:71;:::i;:::-;11085:72;11153:2;11142:9;11138:18;11129:6;11085:72;:::i;:::-;11167;11235:2;11224:9;11220:18;11211:6;11167:72;:::i;:::-;10804:442;;;;;;:::o;11252:180::-;11300:77;11297:1;11290:88;11397:4;11394:1;11387:15;11421:4;11418:1;11411:15;11438:176;11470:1;11487:20;11505:1;11487:20;:::i;:::-;11482:25;;11521:20;11539:1;11521:20;:::i;:::-;11516:25;;11560:1;11550:35;;11565:18;;:::i;:::-;11550:35;11606:1;11603;11599:9;11594:14;;11438:176;;;;:::o;11620:233::-;11659:3;11682:24;11700:5;11682:24;:::i;:::-;11673:33;;11728:66;11721:5;11718:77;11715:103;;11798:18;;:::i;:::-;11715:103;11845:1;11838:5;11834:13;11827:20;;11620:233;;;:::o;11859:86::-;11894:7;11934:4;11927:5;11923:16;11912:27;;11859:86;;;:::o;11951:188::-;11989:3;12008:18;12024:1;12008:18;:::i;:::-;12003:23;;12040:18;12056:1;12040:18;:::i;:::-;12035:23;;12081:1;12078;12074:9;12067:16;;12104:4;12099:3;12096:13;12093:39;;;12112:18;;:::i;:::-;12093:39;11951:188;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betsize\",\"type\":\"uint256\"}],\"name\":\"LogBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"LogDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlockNumber\",\"type\":\"uint256\"}],\"name\":\"LogLate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"LogLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRecordWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"LogWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sadd\",\"type\":\"uint256\"}],\"name\":\"addHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addHashes128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betBlockNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betHashOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"betOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeAnimator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"coldStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coldStoreLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashBetMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashBetSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashFirst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashesSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hotStore\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseKeeping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investBalanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"play\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"playRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"playSystem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"putHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"putHashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxsum\",\"type\":\"uint256\"}],\"name\":\"setBetMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"setInvestStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletBlockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletPeriodOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"won\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addHashes(uint256)\":{\"details\":\"Create hash data swap space\",\"params\":{\"_sadd\":\"Number of hashes to add (<=256)\"}},\"addHashes128()\":{\"details\":\"Create hash data swap space, add 128 hashes\"},\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens than an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"remaining\":\"A uint specifing the amount of tokens still avaible for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint representing the amount owned by the passed address.\"}},\"betBlockNumberOf(address)\":{\"details\":\"Show block number of lottery run for the bet.\",\"params\":{\"_owner\":\"The address of the player.\"}},\"betHashOf(address)\":{\"details\":\"Show block number of lottery run for the bet.\",\"params\":{\"_owner\":\"The address of the player.\"}},\"betOf(address)\":{\"details\":\"Check if won in lottery\"},\"betValueOf(address)\":{\"details\":\"Show bet size.\",\"params\":{\"_owner\":\"The address of the player.\"}},\"changeAnimator(address)\":{\"details\":\"Change animator.\",\"params\":{\"_who\":\"The address of new animator.\"}},\"changeOwner(address)\":{\"details\":\"Change owner.\",\"params\":{\"_who\":\"The address of new owner.\"}},\"coldStore(uint256)\":{\"details\":\"Move funds to cold storageinvestBalance and walletBalance is protected from withdraw by ownerif funding is > 50% admin can withdraw only 0.25% of balance weakly\",\"params\":{\"_amount\":\"The amount of wei to move to cold storage\"}},\"disinvest()\":{\"details\":\"Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\"},\"dividendsBlocks()\":{\"details\":\"Print number of block till next expected dividend payment\"},\"hashesLength()\":{\"details\":\"Show length of allocated swap space\"},\"hotStore()\":{\"details\":\"Move funds to contract jackpot\"},\"houseKeeping()\":{\"details\":\"Update accounting\"},\"invest(address)\":{\"details\":\"Buy tokens with affiliate partner\",\"params\":{\"_partner\":\"Affiliate partner\"}},\"investDirect()\":{\"details\":\"Buy tokens\"},\"payDividends()\":{\"details\":\"Pay unpaid dividends\"},\"payWallet()\":{\"details\":\"Pay balance from wallet\"},\"play()\":{\"details\":\"Play in lottery\"},\"playRandom(address)\":{\"details\":\"Play in lottery with random numbers\",\"params\":{\"_partner\":\"Affiliate partner\"}},\"playSystem(uint256,address)\":{\"details\":\"Play in lottery with own numbers\",\"params\":{\"_partner\":\"Affiliate partner\"}},\"putHash()\":{\"details\":\"Fill hash data\"},\"putHashes(uint256)\":{\"details\":\"Fill hash data many times\",\"params\":{\"_num\":\"Number of iterations\"}},\"resetBet()\":{\"details\":\"Reset bet size accounting, to increase bet volume above safe limits\"},\"setBetMax(uint256)\":{\"details\":\"Set maximum bet size per block\",\"params\":{\"_maxsum\":\"The maximum bet size in wei.\"}},\"setInvestStart(uint256)\":{\"details\":\"Set ICO Start block.\",\"params\":{\"_when\":\"The block number of the ICO.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint the amout of tokens to be transfered\"}},\"walletBalanceOf(address)\":{\"details\":\"Show balance of wallet\",\"params\":{\"_owner\":\"The address of the account.\"}},\"walletBlockOf(address)\":{\"details\":\"Show block number when withdraw can continue\",\"params\":{\"_owner\":\"The address of the account.\"}},\"walletPeriodOf(address)\":{\"details\":\"Show last dividend period processed\",\"params\":{\"_owner\":\"The address of the account.\"}},\"won()\":{\"details\":\"Check if won in lottery\"}},\"title\":\"SmartBillions contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"SmartBillions\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 527,564,701,703,705,707,709,711,713,715,717,719\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  using SafeMath for uint;\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n            if(_amount > 1e6 gwei) { // 1 finney\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            payable(msg.sender).transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            payable(msg.sender).transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6c1185b99d1808e67a47878ea61ef0cd3dc5bc8c21a5f58fc02521a138e0d618\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"StandardToken":{"evm":{"deployedBytecode":{"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens than an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"remaining\":\"A uint specifing the amount of tokens still avaible for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint representing the amount owned by the passed address.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint the amout of tokens to be transfered\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"StandardToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 527,564,701,703,705,707,709,711,713,715,717,719\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  using SafeMath for uint;\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n            if(_amount > 1e6 gwei) { // 1 finney\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            payable(msg.sender).transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            payable(msg.sender).transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6c1185b99d1808e67a47878ea61ef0cd3dc5bc8c21a5f58fc02521a138e0d618\",\"license\":\"UNLICENSED\"}},\"version\":1}"}}},"errors":[{"component":"general","errorCode":"3628","formattedMessage":"Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.\n   --> SmartBillions.sol:121:1:\n    |\n121 | contract SmartBillions is StandardToken {\n    | ^ (Relevant source part starts here and spans across multiple lines).\nNote: The payable fallback function is defined here.\n   --> SmartBillions.sol:602:5:\n    |\n602 |     fallback() external payable {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.","secondarySourceLocations":[{"end":22335,"file":"SmartBillions.sol","message":"The payable fallback function is defined here.","start":21764}],"severity":"warning","sourceLocation":{"end":27890,"file":"SmartBillions.sol","start":4492},"type":"Warning"}],"sources":{"SmartBillions.sol":{"id":0}}}
