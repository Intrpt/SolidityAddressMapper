{"contracts":{"SmartBillions.sol":{"BasicToken":{"evm":{"deployedBytecode":{"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint representing the amount owned by the passed address.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"BasicToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 527,564,701,703,705,707,709,711,713,715,717,719\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  using SafeMath for uint;\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n            if(_amount > 1e6 gwei) { // 1 finney\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            payable(msg.sender).transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            payable(msg.sender).transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6c1185b99d1808e67a47878ea61ef0cd3dc5bc8c21a5f58fc02521a138e0d618\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"ERC20":{"evm":{"deployedBytecode":{"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 527,564,701,703,705,707,709,711,713,715,717,719\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  using SafeMath for uint;\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n            if(_amount > 1e6 gwei) { // 1 finney\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            payable(msg.sender).transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            payable(msg.sender).transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6c1185b99d1808e67a47878ea61ef0cd3dc5bc8c21a5f58fc02521a138e0d618\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"ERC20Basic":{"evm":{"deployedBytecode":{"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"ERC20Basic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 527,564,701,703,705,707,709,711,713,715,717,719\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  using SafeMath for uint;\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n            if(_amount > 1e6 gwei) { // 1 finney\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            payable(msg.sender).transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            payable(msg.sender).transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6c1185b99d1808e67a47878ea61ef0cd3dc5bc8c21a5f58fc02521a138e0d618\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"SafeMath":{"evm":{"deployedBytecode":{"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f59d40e3056586e84ed4cc2cb6b10d78628606e72ac608c89d1e7c97cf5eed964736f6c634300081a0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x59D40E3056586E84ED4CC2CB6B10D786 0x28 PUSH1 0x6E PUSH19 0xAC608C89D1E7C97CF5EED964736F6C63430008 BYTE STOP CALLER ","sourceMap":"330:254:0:-:0;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 527,564,701,703,705,707,709,711,713,715,717,719\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  using SafeMath for uint;\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n            if(_amount > 1e6 gwei) { // 1 finney\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            payable(msg.sender).transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            payable(msg.sender).transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6c1185b99d1808e67a47878ea61ef0cd3dc5bc8c21a5f58fc02521a138e0d618\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"SmartBillions":{"evm":{"deployedBytecode":{"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x814B3FE0 GT PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xC27509CF GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xDE469071 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDF1EAD82 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xDF1EAD82 EQ PUSH2 0xCE8 JUMPI DUP1 PUSH4 0xE4CC98A5 EQ PUSH2 0xCFF JUMPI DUP1 PUSH4 0xE73CC2EB EQ PUSH2 0xD2A JUMPI DUP1 PUSH4 0xE76ECE01 EQ PUSH2 0xD67 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0xDE469071 EQ PUSH2 0xC7B JUMPI DUP1 PUSH4 0xDE88A342 EQ PUSH2 0xCA6 JUMPI DUP1 PUSH4 0xDF12B94E EQ PUSH2 0xCBD JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0xCD88333E GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCD88333E EQ PUSH2 0xBD3 JUMPI DUP1 PUSH4 0xD6D25008 EQ PUSH2 0xBFC JUMPI DUP1 PUSH4 0xD9FA9335 EQ PUSH2 0xC27 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0xC3E JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0xC27509CF EQ PUSH2 0xB73 JUMPI DUP1 PUSH4 0xC4164365 EQ PUSH2 0xB7D JUMPI DUP1 PUSH4 0xCD0A314B EQ PUSH2 0xBA8 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0xA367D99A GT PUSH2 0x164 JUMPI DUP1 PUSH4 0xB3470E97 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0xB3470E97 EQ PUSH2 0xAE8 JUMPI DUP1 PUSH4 0xBC851718 EQ PUSH2 0xB13 JUMPI DUP1 PUSH4 0xBE1EEFBF EQ PUSH2 0xB3E JUMPI DUP1 PUSH4 0xBFBA9029 EQ PUSH2 0xB48 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0xA367D99A EQ PUSH2 0xA6B JUMPI DUP1 PUSH4 0xA6F9DAE1 EQ PUSH2 0xA96 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xABF JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x904D2248 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x904D2248 EQ PUSH2 0x9CE JUMPI DUP1 PUSH4 0x93E84CD9 EQ PUSH2 0xA0B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0xA29 JUMPI DUP1 PUSH4 0x9CE962CA EQ PUSH2 0xA54 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x814B3FE0 EQ PUSH2 0x929 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x966 JUMPI DUP1 PUSH4 0x8EECDDCF EQ PUSH2 0x991 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x380F3087 GT PUSH2 0x2A0 JUMPI DUP1 PUSH4 0x501895AE GT PUSH2 0x23E JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x218 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x859 JUMPI DUP1 PUSH4 0x70CCD928 EQ PUSH2 0x896 JUMPI DUP1 PUSH4 0x7227C7CE EQ PUSH2 0x8C1 JUMPI DUP1 PUSH4 0x785CE7CA EQ PUSH2 0x8EC JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x501895AE EQ PUSH2 0x7B4 JUMPI DUP1 PUSH4 0x66CE3BD2 EQ PUSH2 0x7F1 JUMPI DUP1 PUSH4 0x6B486818 EQ PUSH2 0x82E JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x40C73D17 GT PUSH2 0x27A JUMPI DUP1 PUSH4 0x40C73D17 EQ PUSH2 0x70E JUMPI DUP1 PUSH4 0x413E90E7 EQ PUSH2 0x737 JUMPI DUP1 PUSH4 0x4288D759 EQ PUSH2 0x760 JUMPI DUP1 PUSH4 0x43146F36 EQ PUSH2 0x79D JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x380F3087 EQ PUSH2 0x669 JUMPI DUP1 PUSH4 0x3DE8D340 EQ PUSH2 0x6A6 JUMPI DUP1 PUSH4 0x3E43B652 EQ PUSH2 0x6D1 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x30D JUMPI DUP1 PUSH4 0x26699576 GT PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x26699576 EQ PUSH2 0x5B8 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x5E8 JUMPI DUP1 PUSH4 0x31C2B6E6 EQ PUSH2 0x613 JUMPI DUP1 PUSH4 0x37C43088 EQ PUSH2 0x63E JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD EQ PUSH2 0x534 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x55F JUMPI DUP1 PUSH4 0x2406E9FA EQ PUSH2 0x588 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x349 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x49E JUMPI DUP1 PUSH4 0x12C8052F EQ PUSH2 0x4C7 JUMPI DUP1 PUSH4 0x13E4B51F EQ PUSH2 0x4DE JUMPI DUP1 PUSH4 0x16D190E3 EQ PUSH2 0x509 JUMPI PUSH2 0x370 JUMP JUMPDEST DUP1 PUSH4 0x3F9C793 EQ PUSH2 0x42E JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x44A JUMPI DUP1 PUSH4 0x751076D EQ PUSH2 0x475 JUMPI PUSH2 0x370 JUMP JUMPDEST JUMPDEST PUSH1 0x0 CALLVALUE GT ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x1 PUSH1 0x8 SLOAD GT ISZERO PUSH2 0x3B4 JUMPI PUSH2 0x3AF PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD90 JUMP JUMPDEST PUSH2 0x3BE JUMP JUMPDEST PUSH2 0x3BC PUSH2 0x1657 JUMP JUMPDEST POP JUMPDEST PUSH2 0x42C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 SLOAD EQ DUP1 ISZERO PUSH2 0x414 JUMPI POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT JUMPDEST ISZERO PUSH2 0x423 JUMPI PUSH2 0x422 CALLER PUSH2 0x1694 JUMP JUMPDEST JUMPDEST PUSH2 0x42B PUSH2 0x1A04 JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 0x448 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x443 SWAP2 SWAP1 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0xD90 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45F PUSH2 0x22D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x46C SWAP2 SWAP1 PUSH2 0x4B02 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x497 SWAP2 SWAP1 PUSH2 0x4B5A JUMP JUMPDEST PUSH2 0x230F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4C0 SWAP2 SWAP1 PUSH2 0x4B87 JUMP JUMPDEST PUSH2 0x2377 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4DC PUSH2 0x1A04 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F3 PUSH2 0x24FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x500 SWAP2 SWAP1 PUSH2 0x4BE2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51E PUSH2 0x25F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x52B SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x549 PUSH2 0x25FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x556 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x581 SWAP2 SWAP1 PUSH2 0x4C27 JUMP JUMPDEST PUSH2 0x2602 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5A2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x59D SWAP2 SWAP1 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x28E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5AF SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5D2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5CD SWAP2 SWAP1 PUSH2 0x4C7A JUMP JUMPDEST PUSH2 0x291F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5DF SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5FD PUSH2 0x2CDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x60A SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x61F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x628 PUSH2 0x2CE3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x635 SWAP2 SWAP1 PUSH2 0x4CC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x653 PUSH2 0x2D09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x660 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x675 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x690 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x68B SWAP2 SWAP1 PUSH2 0x4B5A JUMP JUMPDEST PUSH2 0x2D0F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x69D SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6BB PUSH2 0x2DED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6C8 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6F3 SWAP2 SWAP1 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x2E88 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x705 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x735 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x730 SWAP2 SWAP1 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x2F12 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x743 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x75E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x759 SWAP2 SWAP1 PUSH2 0x4B5A JUMP JUMPDEST PUSH2 0x3003 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x787 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x782 SWAP2 SWAP1 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x3032 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x794 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B2 PUSH2 0x3270 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7D6 SWAP2 SWAP1 PUSH2 0x4B5A JUMP JUMPDEST PUSH2 0x32EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7E8 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x818 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x813 SWAP2 SWAP1 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x330F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x825 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x83A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x843 PUSH2 0x339D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x850 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x865 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x880 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x87B SWAP2 SWAP1 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x33A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x88D SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8AB PUSH2 0x33EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8B8 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8D6 PUSH2 0x33F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E3 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x913 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x90E SWAP2 SWAP1 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x33FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x920 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x935 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x950 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x94B SWAP2 SWAP1 PUSH2 0x4B5A JUMP JUMPDEST PUSH2 0x3461 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x95D SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x972 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x97B PUSH2 0x3485 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x988 SWAP2 SWAP1 PUSH2 0x4CC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x99D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x9B3 SWAP2 SWAP1 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x34AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x9C5 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9F5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x9F0 SWAP2 SWAP1 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x350D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA02 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA13 PUSH2 0x1657 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA20 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA3E PUSH2 0x356F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA4B SWAP2 SWAP1 PUSH2 0x4B02 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA69 PUSH2 0x35A8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA80 PUSH2 0x37D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA8D SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xABD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAB8 SWAP2 SWAP1 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x37DC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xACB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAE1 SWAP2 SWAP1 PUSH2 0x4B87 JUMP JUMPDEST PUSH2 0x38CD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAFD PUSH2 0x3C5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB0A SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB28 PUSH2 0x3C6B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB35 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB46 PUSH2 0x3C71 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB5D PUSH2 0x3C7B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB6A SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB7B PUSH2 0x3C81 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB92 PUSH2 0x3CAE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB9F SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBBD PUSH2 0x3CB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBCA SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBFA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xBF5 SWAP2 SWAP1 PUSH2 0x4B5A JUMP JUMPDEST PUSH2 0x3CBA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC11 PUSH2 0x3E08 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC1E SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC3C PUSH2 0x3E0E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC65 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC60 SWAP2 SWAP1 PUSH2 0x4CE4 JUMP JUMPDEST PUSH2 0x3F1B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC72 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC90 PUSH2 0x3FA2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC9D SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCBB PUSH2 0x3FA8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCD2 PUSH2 0x3FCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCDF SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCFD PUSH2 0x3FD0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD14 PUSH2 0x4223 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD21 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD51 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD4C SWAP2 SWAP1 PUSH2 0x4A45 JUMP JUMPDEST PUSH2 0x4229 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5E SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD8E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD89 SWAP2 SWAP1 PUSH2 0x4B5A JUMP JUMPDEST PUSH2 0x4287 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x8 SLOAD GT DUP1 ISZERO PUSH2 0xDBC JUMPI POP PUSH1 0x5 PUSH2 0x4000 PUSH2 0xDAC SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0xDB9 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST NUMBER LT JUMPDEST DUP1 ISZERO PUSH2 0xDCB JUMPI POP PUSH1 0xA SLOAD PUSH1 0x9 SLOAD LT JUMPDEST PUSH2 0xDD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLVALUE SWAP1 POP PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH2 0xDE9 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0xE71 JUMPI PUSH1 0x9 SLOAD PUSH1 0xA SLOAD PUSH2 0xE00 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST SWAP1 POP PUSH1 0xA SLOAD PUSH1 0x9 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x8 DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0xE40 DUP4 CALLVALUE PUSH2 0x4317 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xE6B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xE8B JUMP JUMPDEST DUP1 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xE83 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xF13 JUMPI POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1031 JUMPI PUSH1 0xA DUP2 PUSH2 0xF25 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF36 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0xA DUP2 PUSH2 0xF4A SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xFE2 SWAP2 SWAP1 PUSH2 0x4E83 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1243 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x64 PUSH1 0x5 DUP4 PUSH2 0x1042 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH2 0x104C SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST PUSH2 0x1056 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1067 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x64 PUSH1 0x5 DUP3 PUSH2 0x107D SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH2 0x1087 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x111F SWAP2 SWAP1 PUSH2 0x4E83 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x64 PUSH1 0x5 DUP3 PUSH2 0x1178 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH2 0x1182 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11F8 SWAP2 SWAP1 PUSH2 0x4E83 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1A PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH7 0x38D7EA4C68000 DUP3 PUSH2 0x12B7 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0x16345785D8A0000 PUSH1 0x10 DUP5 PUSH2 0x12D1 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH2 0x12DB SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0x16345785D8A0000 PUSH1 0xA DUP6 PUSH2 0x12F5 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH2 0x12FF SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1350 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x3 PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x13C8 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1440 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP3 DUP5 PUSH2 0x1454 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST PUSH2 0x145E SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP3 SLOAD PUSH2 0x146E SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD PUSH2 0x14D3 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x155B SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x15E3 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x36A013C86C271C703C54DEE591BC768E347954A0A9A1937DD17F5A29E9A8E645 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1648 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x168F CALLER NUMBER PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x166F SWAP3 SWAP2 SWAP1 PUSH2 0x4F3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR PUSH1 0x0 PUSH2 0x291F JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1A SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ DUP1 PUSH2 0x173B JUMPI POP PUSH1 0x0 DUP2 EQ JUMPDEST ISZERO PUSH2 0x17A5 JUMPI PUSH1 0xB SLOAD PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1A PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x1A01 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 SUB PUSH2 0x17B4 JUMPI POP PUSH2 0x1A01 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1807 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH2 0x1811 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0xB SLOAD DUP4 LT ISZERO PUSH2 0x1864 JUMPI PUSH1 0xC DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1834 JUMPI PUSH2 0x1833 PUSH2 0x4F66 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP3 PUSH2 0x184A SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST DUP2 PUSH2 0x1855 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP1 POP DUP3 DUP1 PUSH1 0x1 ADD SWAP4 POP POP PUSH2 0x1816 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 PUSH2 0x1874 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1888 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1906 SWAP2 SWAP1 PUSH2 0x4E83 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x5 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1A PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE1E87F40E4DE2A6B68365D854F85940AAD44D84933D399007702C6D340DA445F DUP3 DUP6 PUSH1 0x40 MLOAD PUSH2 0x19F5 SWAP3 SWAP2 SWAP1 PUSH2 0x4F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND SUB PUSH2 0x1C3B JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP PUSH2 0x22D4 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1C72 JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1C85 JUMPI PUSH2 0x1C7F PUSH2 0x35A8 JUMP JUMPDEST POP PUSH2 0x22D4 JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND NUMBER GT PUSH2 0x1C9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST NUMBER PUSH2 0x4000 PUSH1 0xA PUSH2 0x1CAB SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x1CC0 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST GT PUSH2 0x1E42 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x770D64C654906EBAB085526DD881064F61F0E5990CAA94C94167EB29BC4645C6 DUP3 PUSH1 0x40 ADD MLOAD NUMBER PUSH1 0x40 MLOAD PUSH2 0x1D11 SWAP3 SWAP2 SWAP1 PUSH2 0x5009 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP PUSH2 0x22D4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100 DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x1E57 SWAP2 SWAP1 PUSH2 0x5032 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND NUMBER LT ISZERO PUSH2 0x1E8B JUMPI DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR PUSH3 0xFFFFFF AND SWAP1 POP PUSH2 0x1E84 DUP4 DUP3 PUSH2 0x433E JUMP JUMPDEST SWAP2 POP PUSH2 0x2074 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE SLOAD GT ISZERO PUSH2 0x1EF4 JUMPI PUSH2 0x1EA9 DUP4 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x4585 JUMP JUMPDEST SWAP1 POP PUSH4 0x1000000 DUP2 PUSH4 0xFFFFFFFF AND SUB PUSH2 0x1EE2 JUMPI DUP3 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH2 0x1EEF JUMP JUMPDEST PUSH2 0x1EEC DUP4 DUP3 PUSH2 0x433E JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x2073 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x770D64C654906EBAB085526DD881064F61F0E5990CAA94C94167EB29BC4645C6 DUP5 PUSH1 0x40 ADD MLOAD NUMBER PUSH1 0x40 MLOAD PUSH2 0x1F40 SWAP3 SWAP2 SWAP1 PUSH2 0x5009 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP PUSH2 0x22D4 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x226F JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH31 0x362509948EA59AFAC5C6FA93FEA5327B624BC705A6574F4E9F26E9D8BD7CCC DUP5 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x21F9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x506A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0xD SLOAD DUP3 GT ISZERO PUSH2 0x2261 JUMPI DUP2 PUSH1 0xD DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x955214D16F858518F04C701D01A6E2F5668548B6BE3C6F2F0F8981F77F2CFC06 DUP4 PUSH1 0x40 MLOAD PUSH2 0x2258 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH2 0x226A DUP3 PUSH2 0x4638 JUMP JUMPDEST PUSH2 0x22D0 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7375ED8230669EA9D64A9DB629D7CE9501779604A67C95C0111377CF09F5B9B9 DUP5 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0x40 MLOAD PUSH2 0x22C7 SWAP3 SWAP2 SWAP1 PUSH2 0x4F95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536D61727442696C6C696F6E7320546F6B656E00000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x236D JUMPI PUSH2 0x236C PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x12 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x2405 JUMPI POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0x2413 JUMPI PUSH2 0x2412 PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x24F1 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xF SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ DUP1 PUSH2 0x2520 JUMPI POP PUSH1 0xA DUP2 PUSH2 0x251C SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST NUMBER GT ISZERO JUMPDEST ISZERO PUSH2 0x252F JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x25F3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 NUMBER LT ISZERO PUSH2 0x2544 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x2555 JUMP JUMPDEST PUSH2 0x100 NUMBER PUSH2 0x2552 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x2581 JUMPI PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0xA DUP2 PUSH2 0x256F SWAP2 SWAP1 PUSH2 0x50D0 JUMP JUMPDEST DUP2 PUSH2 0x257A SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP1 POP DUP1 SWAP3 POP POP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0xE SLOAD DUP5 PUSH2 0x2593 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST PUSH2 0x259D SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST SWAP1 POP PUSH2 0x25A9 DUP4 DUP3 PUSH2 0x485A JUMP JUMPDEST PUSH1 0x13 PUSH2 0x4000 DUP4 PUSH2 0x25B9 SWAP2 SWAP1 PUSH2 0x50D0 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x25CA JUMPI PUSH2 0x25C9 PUSH2 0x4F66 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP PUSH1 0xA DUP4 PUSH2 0x25E5 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST PUSH1 0xF DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP4 POP POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP2 PUSH2 0x2611 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST PUSH1 0x0 CALLDATASIZE SWAP1 POP LT ISZERO PUSH2 0x2625 JUMPI PUSH2 0x2624 PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x26AF DUP6 PUSH2 0x1694 JUMP JUMPDEST PUSH2 0x26B8 DUP5 PUSH2 0x1694 JUMP JUMPDEST PUSH2 0x270A DUP4 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x49B6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x279F DUP4 PUSH1 0x3 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x4317 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x27F5 DUP4 DUP3 PUSH2 0x4317 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD PUSH2 0x28D2 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2918 CALLER NUMBER PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x28F9 SWAP3 SWAP2 SWAP1 PUSH2 0x4F3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR DUP4 PUSH2 0x291F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2929 PUSH2 0x1A04 JUMP JUMPDEST PUSH1 0x0 DUP4 SWAP1 POP PUSH8 0xDE0B6B3A7640000 CALLVALUE GT ISZERO DUP1 ISZERO PUSH2 0x2947 JUMPI POP PUSH1 0x12 SLOAD CALLVALUE LT JUMPDEST PUSH2 0x2950 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLVALUE GT ISZERO PUSH2 0x2CC9 JUMPI PUSH1 0x0 PUSH1 0x8 SLOAD SUB PUSH2 0x29A7 JUMPI PUSH1 0x14 CALLVALUE PUSH2 0x2970 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST PUSH1 0xC PUSH1 0xB SLOAD DUP2 SLOAD DUP2 LT PUSH2 0x2986 JUMPI PUSH2 0x2985 PUSH2 0x4F66 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x299F SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2AC8 JUMPI PUSH1 0x0 PUSH1 0x64 CALLVALUE PUSH2 0x29EA SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x29FE SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2A7C SWAP2 SWAP1 PUSH2 0x4E83 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x3 NUMBER PUSH2 0x2AD5 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST PUSH1 0x10 SLOAD LT ISZERO PUSH2 0x2AFD JUMPI PUSH1 0x3 NUMBER PUSH2 0x2AEB SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST PUSH1 0x10 DUP2 SWAP1 SSTORE POP CALLVALUE PUSH1 0x11 DUP2 SWAP1 SSTORE POP PUSH2 0x2B48 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x11 SLOAD GT ISZERO PUSH2 0x2B2D JUMPI PUSH1 0x10 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x2B1C SWAP1 PUSH2 0x5101 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLVALUE PUSH1 0x11 DUP2 SWAP1 SSTORE POP PUSH2 0x2B47 JUMP JUMPDEST CALLVALUE PUSH1 0x11 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2B3F SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 CALLVALUE PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH3 0xFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x10 SLOAD PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x6 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x63F4540040CF99A22F577EF321C170763020E6277E47275ED9B3D17EC14E13D DUP3 PUSH3 0xFFFFFF AND PUSH1 0x10 SLOAD CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x2CC0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x506A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH2 0x2CD1 PUSH2 0x24FD JUMP JUMPDEST POP PUSH1 0x10 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x4000 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xE SLOAD EQ DUP1 ISZERO PUSH2 0x2D22 JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST DUP1 ISZERO PUSH2 0x2D30 JUMPI POP PUSH2 0x4000 DUP3 GT ISZERO JUMPDEST PUSH2 0x2D39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x13 DUP1 SLOAD SWAP1 POP PUSH2 0x2D4C SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP1 POP PUSH2 0x4000 DUP2 GT ISZERO PUSH2 0x2D5E JUMPI PUSH2 0x4000 SWAP1 POP JUMPDEST PUSH1 0x0 PUSH1 0x13 DUP1 SLOAD SWAP1 POP SWAP1 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2DA8 JUMPI PUSH1 0x13 PUSH1 0x1 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2D69 JUMP JUMPDEST POP PUSH2 0x4000 PUSH1 0x13 DUP1 SLOAD SWAP1 POP LT PUSH2 0x2DDF JUMPI PUSH1 0xA NUMBER PUSH2 0x2DC4 SWAP2 SWAP1 PUSH2 0x50D0 JUMP JUMPDEST NUMBER PUSH2 0x2DCF SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST PUSH1 0xE DUP2 SWAP1 SSTORE POP PUSH1 0xE SLOAD PUSH1 0xF DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x13 DUP1 SLOAD SWAP1 POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x8 SLOAD GT ISZERO PUSH2 0x2E02 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x2E85 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4000 PUSH1 0xA PUSH2 0x2E13 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0xE SLOAD NUMBER PUSH2 0x2E21 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST PUSH2 0x2E2B SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST SWAP1 POP PUSH1 0xB SLOAD DUP2 GT ISZERO PUSH2 0x2E41 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x2E85 JUMP JUMPDEST PUSH2 0x4000 PUSH1 0xA PUSH2 0x2E50 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0xE SLOAD NUMBER PUSH2 0x2E5E SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST PUSH2 0x2E68 SWAP2 SWAP1 PUSH2 0x50D0 JUMP JUMPDEST PUSH2 0x4000 PUSH1 0xA PUSH2 0x2E77 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH2 0x2E81 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2F70 JUMPI PUSH2 0x2F6F PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2FAD JUMPI PUSH2 0x2FAC PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST PUSH2 0x2FB6 CALLER PUSH2 0x1694 JUMP JUMPDEST PUSH2 0x2FBF DUP2 PUSH2 0x1694 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x302D JUMPI PUSH2 0x3016 PUSH2 0x24FD JUMP JUMPDEST PUSH2 0x3020 JUMPI POP PUSH2 0x302F JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x3006 JUMP JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x3167 JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST DUP1 PUSH2 0x317B JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND NUMBER LT JUMPDEST DUP1 PUSH2 0x31A9 JUMPI POP PUSH2 0x4000 PUSH1 0xA PUSH2 0x3190 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x31A5 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST NUMBER LT ISZERO JUMPDEST ISZERO PUSH2 0x31B8 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x326B JUMP JUMPDEST PUSH2 0x100 DUP2 PUSH1 0x40 ADD MLOAD PUSH2 0x31CA SWAP2 SWAP1 PUSH2 0x5032 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND NUMBER LT ISZERO PUSH2 0x31F7 JUMPI PUSH2 0x31EF DUP2 DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR PUSH2 0x433E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x326B JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE SLOAD GT ISZERO PUSH2 0x3265 JUMPI PUSH1 0x0 PUSH2 0x3217 DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x4585 JUMP JUMPDEST SWAP1 POP PUSH4 0x1000000 DUP2 PUSH4 0xFFFFFFFF AND SUB PUSH2 0x3252 JUMPI DUP2 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 POP POP POP PUSH2 0x326B JUMP JUMPDEST PUSH2 0x325C DUP3 DUP3 PUSH2 0x433E JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x326B JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x32CE JUMPI PUSH2 0x32CD PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST PUSH1 0x3 NUMBER PUSH2 0x32DB SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST PUSH1 0x10 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x11 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x13 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x32FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x13 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xC DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x504C415900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT DUP1 ISZERO PUSH2 0x3694 JUMPI POP NUMBER PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x37D4 JUMPI PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x37C2 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x37D2 DUP2 PUSH2 0x4638 JUMP JUMPDEST POP JUMPDEST JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x383A JUMPI PUSH2 0x3839 PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x3877 JUMPI PUSH2 0x3876 PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST PUSH2 0x3880 CALLER PUSH2 0x1694 JUMP JUMPDEST PUSH2 0x3889 DUP2 PUSH2 0x1694 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x40 PUSH1 0x4 DUP2 PUSH2 0x38DC SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST PUSH1 0x0 CALLDATASIZE SWAP1 POP LT ISZERO PUSH2 0x38F0 JUMPI PUSH2 0x38EF PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST PUSH2 0x38F9 CALLER PUSH2 0x1694 JUMP JUMPDEST PUSH2 0x394B DUP3 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x4317 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x3B51 JUMPI PUSH2 0x39EC PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1694 JUMP JUMPDEST PUSH2 0x3A60 DUP3 PUSH1 0x3 PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x49B6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x3B44 SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x3C55 JUMP JUMPDEST PUSH2 0x3B5A DUP4 PUSH2 0x1694 JUMP JUMPDEST PUSH2 0x3BAC DUP3 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x49B6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x3C4C SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C66 PUSH1 0x80 PUSH2 0x2D0F JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3C79 PUSH2 0x3E0E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x12 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3CAC PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD90 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D18 JUMPI PUSH2 0x3D17 PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST PUSH2 0x3D20 PUSH2 0x3E0E JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3D61 JUMPI POP DUP1 PUSH1 0x7 SLOAD PUSH1 0xA PUSH1 0x9 DUP1 SLOAD PUSH2 0x3D3F SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH2 0x3D49 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST PUSH2 0x3D53 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST PUSH2 0x3D5D SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SELFBALANCE LT ISZERO JUMPDEST PUSH2 0x3D6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xA SLOAD PUSH2 0x3D79 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST PUSH1 0x9 SLOAD LT PUSH2 0x3DB7 JUMPI PUSH2 0x190 SELFBALANCE PUSH2 0x3D8F SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST DUP2 GT ISZERO DUP1 ISZERO PUSH2 0x3DAD JUMPI POP NUMBER PUSH2 0x9D80 PUSH1 0x14 SLOAD PUSH2 0x3DAA SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST GT ISZERO JUMPDEST PUSH2 0x3DB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x3DFD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP NUMBER PUSH1 0x14 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x14 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x8 SLOAD GT DUP1 ISZERO PUSH2 0x3E3B JUMPI POP PUSH1 0x5 PUSH2 0x4000 PUSH2 0x3E2A SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x3E37 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST NUMBER LT ISZERO JUMPDEST ISZERO PUSH2 0x3E4D JUMPI PUSH1 0x0 PUSH1 0x8 DUP2 SWAP1 SSTORE POP PUSH2 0x3F19 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE SLOAD GT ISZERO PUSH2 0x3F18 JUMPI PUSH1 0x0 PUSH2 0x4000 PUSH1 0xA PUSH2 0x3E69 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH1 0xE SLOAD NUMBER PUSH2 0x3E77 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST PUSH2 0x3E81 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST SWAP1 POP PUSH1 0x2 PUSH1 0xC DUP1 SLOAD SWAP1 POP PUSH2 0x3E95 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x3EC7 JUMPI PUSH1 0xC PUSH1 0x0 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE JUMPDEST PUSH1 0xB SLOAD DUP2 GT DUP1 ISZERO PUSH2 0x3EDA JUMPI POP PUSH1 0x0 PUSH1 0x8 SLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 0x3EF8 JUMPI POP PUSH1 0x1 PUSH1 0xC DUP1 SLOAD SWAP1 POP PUSH2 0x3EF3 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST PUSH1 0xB SLOAD LT JUMPDEST ISZERO PUSH2 0x3F16 JUMPI PUSH1 0xB PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x3F10 SWAP1 PUSH2 0x5101 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMPDEST POP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 SLOAD EQ PUSH2 0x3FB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3FC0 CALLER PUSH2 0x1694 JUMP JUMPDEST PUSH2 0x3FC8 PUSH2 0x35A8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 SLOAD EQ PUSH2 0x3FDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3FE8 CALLER PUSH2 0x1694 JUMP JUMPDEST PUSH1 0x0 PUSH7 0x38D7EA4C68000 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x403C SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH2 0x40DB SWAP2 SWAP1 PUSH2 0x4C0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE DUP1 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4138 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0xA PUSH1 0x9 DUP3 PUSH2 0x414E SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST PUSH2 0x4158 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x41CE SWAP2 SWAP1 PUSH2 0x4E83 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x4220 PUSH2 0x35A8 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1A SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x42E5 JUMPI PUSH2 0x42E4 PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x8 SLOAD EQ DUP1 ISZERO PUSH2 0x42F9 JUMPI POP PUSH1 0x0 PUSH1 0xE SLOAD GT JUMPDEST DUP1 ISZERO PUSH2 0x4304 JUMPI POP DUP1 NUMBER LT JUMPDEST PUSH2 0x430D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x8 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x432A JUMPI PUSH2 0x4329 PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST DUP2 DUP4 PUSH2 0x4336 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP4 DUP3 XOR SWAP1 POP PUSH1 0x0 DUP1 PUSH3 0xF00000 DUP4 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4369 JUMPI PUSH1 0x0 PUSH2 0x436C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH3 0xF0000 DUP5 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4385 JUMPI PUSH1 0x0 PUSH2 0x4388 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH2 0xF000 DUP6 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x43A0 JUMPI PUSH1 0x0 PUSH2 0x43A3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH2 0xF00 DUP7 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x43BB JUMPI PUSH1 0x0 PUSH2 0x43BE JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH1 0xF0 DUP8 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x43D5 JUMPI PUSH1 0x0 PUSH2 0x43D8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH1 0xF DUP9 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x43EF JUMPI PUSH1 0x0 PUSH2 0x43F2 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x43FC SWAP2 SWAP1 PUSH2 0x5156 JUMP JUMPDEST PUSH2 0x4406 SWAP2 SWAP1 PUSH2 0x5156 JUMP JUMPDEST PUSH2 0x4410 SWAP2 SWAP1 PUSH2 0x5156 JUMP JUMPDEST PUSH2 0x441A SWAP2 SWAP1 PUSH2 0x5156 JUMP JUMPDEST PUSH2 0x4424 SWAP2 SWAP1 PUSH2 0x5156 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x6 DUP2 PUSH3 0xFFFFFF AND SUB PUSH2 0x446D JUMPI PUSH3 0x6ACFC0 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4463 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x457F JUMP JUMPDEST PUSH1 0x5 DUP2 PUSH3 0xFFFFFF AND SUB PUSH2 0x44B0 JUMPI PUSH2 0x4E20 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x44A6 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x457F JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH3 0xFFFFFF AND SUB PUSH2 0x44F3 JUMPI PUSH2 0x1F4 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x44E9 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x457F JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH3 0xFFFFFF AND SUB PUSH2 0x4535 JUMPI PUSH1 0x19 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x452B SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x457F JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH3 0xFFFFFF AND SUB PUSH2 0x4577 JUMPI PUSH1 0x3 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x456D SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x457F JUMP JUMPDEST PUSH1 0x0 SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xA PUSH1 0xE SLOAD DUP5 PUSH2 0x4598 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST PUSH2 0x45A2 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x13 PUSH2 0x4000 DUP4 PUSH2 0x45B6 SWAP2 SWAP1 PUSH2 0x50D0 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x45C7 JUMPI PUSH2 0x45C6 PUSH2 0x4F66 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP PUSH1 0xF0 DUP2 SWAP1 SHR PUSH2 0x4000 DUP4 PUSH2 0x45E7 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST EQ PUSH2 0x45FA JUMPI PUSH4 0x1000000 SWAP3 POP POP POP PUSH2 0x4633 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0xE SLOAD DUP7 PUSH2 0x460C SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST PUSH2 0x4616 SWAP2 SWAP1 PUSH2 0x50D0 JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF DUP2 PUSH1 0x18 PUSH2 0x4629 SWAP2 SWAP1 PUSH2 0x4D53 JUMP JUMPDEST DUP4 SWAP1 SHR AND SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SELFBALANCE PUSH2 0x4647 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT PUSH2 0x46B4 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4696 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH7 0x38D7EA4C68000 DUP3 GT ISZERO PUSH2 0x46AF JUMPI PUSH2 0x46AE PUSH2 0x3E0E JUMP JUMPDEST JUMPDEST PUSH2 0x4856 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x46C2 SWAP2 SWAP1 PUSH2 0x4DC9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x46D6 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4754 SWAP2 SWAP1 PUSH2 0x4E83 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH3 0x2A300 NUMBER PUSH2 0x47AD SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4853 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF0 PUSH2 0x4000 DUP4 PUSH4 0xFFFFFFFF AND PUSH2 0x4872 SWAP2 SWAP1 PUSH2 0x4E2C JUMP JUMPDEST SWAP1 SHL PUSH1 0xD8 PUSH3 0xFFFFFF PUSH1 0x9 DUP7 PUSH2 0x4887 SWAP2 SWAP1 PUSH2 0x5032 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0xC0 PUSH3 0xFFFFFF PUSH1 0x8 DUP8 PUSH2 0x48A7 SWAP2 SWAP1 PUSH2 0x5032 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0xA8 PUSH3 0xFFFFFF PUSH1 0x7 DUP9 PUSH2 0x48C7 SWAP2 SWAP1 PUSH2 0x5032 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x90 PUSH3 0xFFFFFF PUSH1 0x6 DUP10 PUSH2 0x48E7 SWAP2 SWAP1 PUSH2 0x5032 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x78 PUSH3 0xFFFFFF PUSH1 0x5 DUP11 PUSH2 0x4907 SWAP2 SWAP1 PUSH2 0x5032 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x60 PUSH3 0xFFFFFF PUSH1 0x4 DUP12 PUSH2 0x4927 SWAP2 SWAP1 PUSH2 0x5032 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x48 PUSH3 0xFFFFFF PUSH1 0x3 DUP13 PUSH2 0x4947 SWAP2 SWAP1 PUSH2 0x5032 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x30 PUSH3 0xFFFFFF PUSH1 0x2 DUP14 PUSH2 0x4967 SWAP2 SWAP1 PUSH2 0x5032 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x18 PUSH3 0xFFFFFF PUSH1 0x1 DUP15 PUSH2 0x4987 SWAP2 SWAP1 PUSH2 0x5032 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH3 0xFFFFFF DUP14 PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND OR OR OR OR OR OR OR OR OR OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 PUSH2 0x49C5 SWAP2 SWAP1 PUSH2 0x4D95 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x49D8 JUMPI PUSH2 0x49D7 PUSH2 0x50A1 JUMP JUMPDEST JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A12 DUP3 PUSH2 0x49E7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4A22 DUP2 PUSH2 0x4A07 JUMP JUMPDEST DUP2 EQ PUSH2 0x4A2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x4A3F DUP2 PUSH2 0x4A19 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4A5B JUMPI PUSH2 0x4A5A PUSH2 0x49E2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4A69 DUP5 DUP3 DUP6 ADD PUSH2 0x4A30 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4AAC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4A91 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4AD4 DUP3 PUSH2 0x4A72 JUMP JUMPDEST PUSH2 0x4ADE DUP2 DUP6 PUSH2 0x4A7D JUMP JUMPDEST SWAP4 POP PUSH2 0x4AEE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x4A8E JUMP JUMPDEST PUSH2 0x4AF7 DUP2 PUSH2 0x4AB8 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4B1C DUP2 DUP5 PUSH2 0x4AC9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4B37 DUP2 PUSH2 0x4B24 JUMP JUMPDEST DUP2 EQ PUSH2 0x4B42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x4B54 DUP2 PUSH2 0x4B2E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4B70 JUMPI PUSH2 0x4B6F PUSH2 0x49E2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4B7E DUP5 DUP3 DUP6 ADD PUSH2 0x4B45 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4B9E JUMPI PUSH2 0x4B9D PUSH2 0x49E2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4BAC DUP6 DUP3 DUP7 ADD PUSH2 0x4A30 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x4BBD DUP6 DUP3 DUP7 ADD PUSH2 0x4B45 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4BDC DUP2 PUSH2 0x4BC7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4BF7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4BD3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4C06 DUP2 PUSH2 0x4B24 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4C21 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4BFD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4C40 JUMPI PUSH2 0x4C3F PUSH2 0x49E2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C4E DUP7 DUP3 DUP8 ADD PUSH2 0x4A30 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x4C5F DUP7 DUP3 DUP8 ADD PUSH2 0x4A30 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x4C70 DUP7 DUP3 DUP8 ADD PUSH2 0x4B45 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4C91 JUMPI PUSH2 0x4C90 PUSH2 0x49E2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9F DUP6 DUP3 DUP7 ADD PUSH2 0x4B45 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x4CB0 DUP6 DUP3 DUP7 ADD PUSH2 0x4A30 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x4CC3 DUP2 PUSH2 0x4A07 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4CDE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4CBA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4CFB JUMPI PUSH2 0x4CFA PUSH2 0x49E2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4D09 DUP6 DUP3 DUP7 ADD PUSH2 0x4A30 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x4D1A DUP6 DUP3 DUP7 ADD PUSH2 0x4A30 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4D5E DUP3 PUSH2 0x4B24 JUMP JUMPDEST SWAP2 POP PUSH2 0x4D69 DUP4 PUSH2 0x4B24 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x4D77 DUP2 PUSH2 0x4B24 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x4D8E JUMPI PUSH2 0x4D8D PUSH2 0x4D24 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DA0 DUP3 PUSH2 0x4B24 JUMP JUMPDEST SWAP2 POP PUSH2 0x4DAB DUP4 PUSH2 0x4B24 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x4DC3 JUMPI PUSH2 0x4DC2 PUSH2 0x4D24 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4DD4 DUP3 PUSH2 0x4B24 JUMP JUMPDEST SWAP2 POP PUSH2 0x4DDF DUP4 PUSH2 0x4B24 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x4DF7 JUMPI PUSH2 0x4DF6 PUSH2 0x4D24 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4E37 DUP3 PUSH2 0x4B24 JUMP JUMPDEST SWAP2 POP PUSH2 0x4E42 DUP4 PUSH2 0x4B24 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4E52 JUMPI PUSH2 0x4E51 PUSH2 0x4DFD JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E8E DUP3 PUSH2 0x4E5D JUMP JUMPDEST SWAP2 POP PUSH2 0x4E99 DUP4 PUSH2 0x4E5D JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4ECB JUMPI PUSH2 0x4ECA PUSH2 0x4D24 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4EE9 DUP3 PUSH2 0x4ED1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4EFB DUP3 PUSH2 0x4EDE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4F13 PUSH2 0x4F0E DUP3 PUSH2 0x4A07 JUMP JUMPDEST PUSH2 0x4EF0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4F34 PUSH2 0x4F2F DUP3 PUSH2 0x4B24 JUMP JUMPDEST PUSH2 0x4F19 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F46 DUP3 DUP6 PUSH2 0x4F02 JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP PUSH2 0x4F56 DUP3 DUP5 PUSH2 0x4F23 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x4FAA PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x4BFD JUMP JUMPDEST PUSH2 0x4FB7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4BFD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4FF3 PUSH2 0x4FEE PUSH2 0x4FE9 DUP5 PUSH2 0x4FBE JUMP JUMPDEST PUSH2 0x4FCE JUMP JUMPDEST PUSH2 0x4B24 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5003 DUP2 PUSH2 0x4FD8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x501E PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x4FFA JUMP JUMPDEST PUSH2 0x502B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4BFD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x503D DUP3 PUSH2 0x4FBE JUMP JUMPDEST SWAP2 POP PUSH2 0x5048 DUP4 PUSH2 0x4FBE JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x5064 JUMPI PUSH2 0x5063 PUSH2 0x4D24 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x507F PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x4BFD JUMP JUMPDEST PUSH2 0x508C PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x4BFD JUMP JUMPDEST PUSH2 0x5099 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x4BFD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x50DB DUP3 PUSH2 0x4B24 JUMP JUMPDEST SWAP2 POP PUSH2 0x50E6 DUP4 PUSH2 0x4B24 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x50F6 JUMPI PUSH2 0x50F5 PUSH2 0x4DFD JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x510C DUP3 PUSH2 0x4B24 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x513E JUMPI PUSH2 0x513D PUSH2 0x4D24 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5161 DUP3 PUSH2 0x5149 JUMP JUMPDEST SWAP2 POP PUSH2 0x516C DUP4 PUSH2 0x5149 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0x5185 JUMPI PUSH2 0x5184 PUSH2 0x4D24 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB 0xEC 0xCD OR 0xD9 SHR 0xE4 SWAP12 0x25 PUSH30 0x870B5427570F8663AC1085470841CFF5E4FA7F30400864736F6C63430008 BYTE STOP CALLER ","sourceMap":"4492:23398:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21818:1;21806:9;:13;21803:312;;;21850:1;21838:11;;:13;21835:248;;;21934:13;21941:5;;;;;;;;;;;21934:6;:13::i;:::-;21835:248;;;22061:6;:4;:6::i;:::-;;21835:248;22097:7;;21803:312;22191:1;22176:11;;:16;:42;;;;;22217:1;22196:8;:20;22205:10;22196:20;;;;;;;;;;;;;;;;:22;22176:42;22173:89;;;22234:26;22249:10;22234:14;:26::i;:::-;22173:89;22272:5;:3;:5::i;:::-;21764:571;4492:23398;13845:1997;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4588:51;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10569:91;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3657:311;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;19476:2114;;;;;;;;;;;;;:::i;:::-;;26914:692;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5707:22;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;622:23;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3009:412;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;22661:174;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;22949:1357;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4691:33;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;683:23;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6243:39;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;24454:559;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9178:362;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8458:115;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9968:199;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;27712:173;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;18573:840;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10767:110;;;;;;;;;;;;;:::i;:::-;;6093:20;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7703:125;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5757:25;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2468:115;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7493:98;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5892:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8222:133;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5600:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;650:20;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8957:124;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8707:116;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;22390:154;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4646:38;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;12601:319;;;;;;;;;;;;;:::i;:::-;;5345:27;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9673:190;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1743:513;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;25096:89;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5831:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;11733:70;;;:::i;:::-;;6024:32;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;13657:73;;;:::i;:::-;;5494:43;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5250:29;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;11170:493;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6311:29;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;11892:628;;;;;;;;;;;;;:::i;:::-;;4297:144;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5958:26;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;16532:136;;;;;;;;;;;;;:::i;:::-;;5432:29;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;15973:499;;;;;;;;;;;;;:::i;:::-;;5563:30;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7953:135;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10277:170;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;13845:1997;14002:1;13988:11;;:15;:64;;;;;14050:1;6277:5;14037:14;;;;:::i;:::-;14022:11;;:30;;;;:::i;:::-;14007:12;:45;13988:64;:100;;;;;14072:16;;14056:13;;:32;13988:100;13980:109;;;;;;14100:14;14117:9;14100:26;;14171:13;;14152:16;;:32;;;;:::i;:::-;14140:9;:44;14137:390;;;14232:13;;14213:16;;:32;;;;:::i;:::-;14201:44;;14276:16;;14260:13;:32;;;;14321:1;14307:11;:15;;;;14371:10;14363:28;;:54;14392:24;14406:9;14392;:13;;:24;;;;:::i;:::-;14363:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14137:390;;;14506:9;14489:13;;:26;;;;;;;:::i;:::-;;;;;;;;14137:390;14560:1;14540:22;;:8;:22;;;:43;;;;14578:5;;;;;;;;;;;14566:17;;:8;:17;;;14540:43;14537:441;;;14628:2;14616:9;:14;;;;:::i;:::-;14599:13;;:31;;;;;;;:::i;:::-;;;;;;;;14691:2;14679:9;:14;;;;:::i;:::-;14645:7;:14;14653:5;;;;;;;;;;;14645:14;;;;;;;;;;;;;;;:22;;;:49;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;14537:441;;;14804:1;14797:3;14793:1;14781:9;:13;;;;:::i;:::-;:19;;;;:::i;:::-;14780:25;;;;:::i;:::-;14763:13;;:42;;;;;;;:::i;:::-;;;;;;;;14870:3;14866:1;14854:9;:13;;;;:::i;:::-;:19;;;;:::i;:::-;14820:7;:14;14828:5;;;;;;;;;;;14820:14;;;;;;;;;;;;;;;:22;;;:54;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;14972:3;14968:1;14956:9;:13;;;;:::i;:::-;:19;;;;:::i;:::-;14919:7;:17;14927:8;14919:17;;;;;;;;;;;;;;;:25;;;:57;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;14537:441;15057:14;;15009:7;:19;15017:10;15009:19;;;;;;;;;;;;;;;:38;;;:63;;;;;;;;;;;;;;;;;;15115:18;15148:6;15136:9;:18;;;;:::i;:::-;15115:39;;15165:17;15202:6;15197:2;15185:9;:14;;;;:::i;:::-;:23;;;;:::i;:::-;15165:43;;15221:20;15261:6;15256:2;15244:9;:14;;;;:::i;:::-;:23;;;;:::i;:::-;15221:46;;15304:13;15280:8;:20;15289:10;15280:20;;;;;;;;;;;;;;;;:37;;;;;;;:::i;:::-;;;;;;;;15347:12;15328:8;:15;15337:5;;;;;;;;;;;15328:15;;;;;;;;;;;;;;;;:31;;;;;;;:::i;:::-;;;;;;;;15427:15;15405:8;:18;15414:8;;;;;;;;;;;15405:18;;;;;;;;;;;;;;;;:37;;;;;;;:::i;:::-;;;;;;;;15531:15;15516:12;15500:13;:28;;;;:::i;:::-;:46;;;;:::i;:::-;15485:11;;:61;;;;;;;:::i;:::-;;;;;;;;15582:10;15562:45;;15579:1;15562:45;;;15593:13;15562:45;;;;;;:::i;:::-;;;;;;;;15660:5;;;;;;;;;;;15640:39;;15657:1;15640:39;;;15666:12;15640:39;;;;;;:::i;:::-;;;;;;;;15732:8;;;;;;;;;;;15712:45;;15729:1;15712:45;;;15741:15;15712:45;;;;;;:::i;:::-;;;;;;;;15815:8;15790:44;;15804:10;15790:44;;;15824:9;15790:44;;;;;;:::i;:::-;;;;;;;;13894:1948;;;;13845:1997;:::o;22390:154::-;22430:4;22454:82;22497:10;22508:12;22480:41;;;;;;;;;:::i;:::-;;;;;;;;;;;;;22470:52;;;;;;22465:58;;22533:1;22454:10;:82::i;:::-;22447:89;;22390:154;:::o;16760:766::-;16827:9;16839:7;:13;16847:4;16839:13;;;;;;;;;;;;;;;:32;;;;;;;;;;;;16827:44;;;;16902:1;16886:8;:14;16895:4;16886:14;;;;;;;;;;;;;;;;:17;16885:32;;;;16915:1;16909:4;:7;16885:32;16882:139;;;16973:14;;16933:7;:13;16941:4;16933:13;;;;;;;;;;;;;;;:32;;;:55;;;;;;;;;;;;;;;;;;17003:7;;;16882:139;17040:14;;17034:4;:20;17031:58;;17071:7;;;17031:58;17099:10;17142:11;;17129:10;17112:8;:14;17121:4;17112:14;;;;;;;;;;;;;;;;:27;;;;:::i;:::-;:41;;;;:::i;:::-;17099:54;;17164:12;17191:94;17201:14;;17196:4;:19;17191:94;;;17258:9;17268:4;17258:15;;;;;;;;:::i;:::-;;;;;;;;;;17250:5;:23;;;;:::i;:::-;17239:34;;;;;:::i;:::-;;;17216:6;;;;;;;17191:94;;;17316:10;17306:7;:20;;;;:::i;:::-;17295:32;;17355:7;17338:13;;:24;;;;;;;:::i;:::-;;;;;;;;17406:7;17373;:13;17381:4;17373:13;;;;;;;;;;;;;;;:21;;;:41;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;17467:4;17425:7;:13;17433:4;17425:13;;;;;;;;;;;;;;;:32;;;:47;;;;;;;;;;;;;;;;;;17500:4;17488:30;;;17505:7;17513:4;17488:30;;;;;;;:::i;:::-;;;;;;;;16816:710;;;16760:766;;:::o;19476:2114::-;19509:17;19529:4;:16;19534:10;19529:16;;;;;;;;;;;;;;;19509:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19576:1;19559:6;:15;;;:18;;;19556:152;;19635:40;;;;;;;;19647:1;19635:40;;;;;;19659:1;19635:40;;;;;;19672:1;19635:40;;;;;19616:4;:16;19621:10;19616:16;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19690:7;;;19556:152;19736:1;19722:6;:12;;;:15;;;19721:41;;;;19760:1;19743:6;:15;;;:18;;;19721:41;19718:104;;;19778:11;:9;:11::i;:::-;19804:7;;;19718:104;19853:6;:15;;;19840:28;;:12;:28;19832:37;;;;;;19960:12;6277:5;19940:2;:15;;;;:::i;:::-;19921:6;:15;;;:35;;;;;;:::i;:::-;:51;19918:263;;20034:10;20026:48;;;20045:6;:15;;;20061:12;20026:48;;;;;;;:::i;:::-;;;;;;;;20108:40;;;;;;;;20120:1;20108:40;;;;;;20132:1;20108:40;;;;;;20145:1;20108:40;;;;;20089:4;:16;20094:10;20089:16;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20163:7;;;19918:263;20191:10;20216:11;20274:3;20258:6;:15;;;:19;;;;:::i;:::-;20245:32;;:12;:32;20242:904;;;20368:6;:15;;;20358:26;;;20353:32;;20339:47;;;;20409:29;20418:6;20432:4;20409:8;:29::i;:::-;20401:37;;20242:904;;;20493:1;20483:9;;:11;20480:655;;;20642:24;20650:6;:15;;;20642:24;;:7;:24::i;:::-;20635:31;;20696:9;20688:4;:17;;;20685:231;;20781:6;:12;;;20776:18;;20768:26;;20685:231;;;20867:29;20876:6;20890:4;20867:8;:29::i;:::-;20859:37;;20685:231;20480:655;;;20974:10;20966:48;;;20985:6;:15;;;21001:12;20966:48;;;;;;;:::i;:::-;;;;;;;;21052:40;;;;;;;;21064:1;21052:40;;;;;;21076:1;21052:40;;;;;;21089:1;21052:40;;;;;21033:4;:16;21038:10;21033:16;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21111:8;;;;;20480:655;20242:904;21175:40;;;;;;;;21187:1;21175:40;;;;;;21199:1;21175:40;;;;;;21212:1;21175:40;;;;;21156:4;:16;21161:10;21156:16;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21235:1;21229:5;:7;21226:357;;;21265:10;21258:56;;;21281:6;:14;;;21276:20;;21302:4;21297:10;;21308:5;21258:56;;;;;;;;:::i;:::-;;;;;;;;21340:6;;21332:5;:14;21329:121;;;21375:5;21366:6;:14;;;;21417:10;21404:30;;;21428:5;21404:30;;;;;;:::i;:::-;;;;;;;;21329:121;21464:10;21468:5;21464:3;:10::i;:::-;21226:357;;;21528:10;21520:51;;;21544:6;:14;;;21539:20;;21565:4;21560:10;;21520:51;;;;;;;:::i;:::-;;;;;;;;21226:357;19498:2092;;;19476:2114;:::o;4588:51::-;;;;;;;;;;;;;;;;;;;:::o;10569:91::-;7014:5;;;;;;;;;;;7000:19;;:10;:19;;;6993:27;;;;:::i;:::-;;10645:7:::1;10632:10;:20;;;;10569:91:::0;:::o;3657:311::-;3823:1;3813:6;:11;;3812:53;;;;;3863:1;3830:7;:19;3838:10;3830:19;;;;;;;;;;;;;;;:29;3850:8;3830:29;;;;;;;;;;;;;;;;:34;;3812:53;3810:56;3803:64;;;;:::i;:::-;;3906:6;3874:7;:19;3882:10;3874:19;;;;;;;;;;;;;;;:29;3894:8;3874:29;;;;;;;;;;;;;;;:38;;;;3945:8;3924:38;;3933:10;3924:38;;;3955:6;3924:38;;;;;;:::i;:::-;;;;;;;;3657:311;;:::o;26914:692::-;26949:4;26966:10;26979:8;;26966:21;;27010:1;27001:5;:10;:40;;;;27039:2;27031:5;:10;;;;:::i;:::-;27015:12;:26;;27001:40;26998:85;;;27065:5;27058:13;;;;;26998:85;27093:14;27134:3;27121:12;:16;27118:164;;;27198:1;27186:13;;27118:164;;;27267:3;27252:12;:18;;;;:::i;:::-;27240:30;;27118:164;27303:9;27295:5;:17;27292:125;;;27329:8;27340:9;27329:20;;27377:2;27371:3;:8;;;;:::i;:::-;27364:15;;;;;:::i;:::-;;;27402:3;27394:11;;27314:103;27292:125;27427:10;27462:2;27449:9;;27441:5;:17;;;;:::i;:::-;27440:24;;;;:::i;:::-;27427:37;;27504:39;27522:5;27536;27504:10;:39::i;:::-;27475:6;6277:5;27482;:18;;;;:::i;:::-;27475:26;;;;;;;;:::i;:::-;;;;;;;;;:68;;;;27573:2;27565:5;:10;;;;:::i;:::-;27554:8;:21;;;;27593:4;27586:12;;;;;26914:692;;:::o;5707:22::-;;;;:::o;622:23::-;;;;:::o;3009:412::-;3104:6;1567:1;1560:4;:8;;;;:::i;:::-;1541;;:15;;:27;;1534:35;;;;:::i;:::-;;3119:15:::1;3137:7;:14;3145:5;3137:14;;;;;;;;;;;;;;;:26;3152:10;3137:26;;;;;;;;;;;;;;;;3119:44;;3170:21;3185:5;3170:14;:21::i;:::-;3198:19;3213:3;3198:14;:19::i;:::-;3240:25;3258:6;3240:8;:13;3249:3;3240:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;3224:8;:13;3233:3;3224:13;;;;;;;;;;;;;;;:41;;;;3290:27;3310:6;3290:8;:15;3299:5;3290:15;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;3272:8;:15;3281:5;3272:15;;;;;;;;;;;;;;;:45;;;;3353:22;3368:6;3353:10;:14;;:22;;;;:::i;:::-;3324:7;:14;3332:5;3324:14;;;;;;;;;;;;;;;:26;3339:10;3324:26;;;;;;;;;;;;;;;:51;;;;3403:3;3387:28;;3396:5;3387:28;;;3408:6;3387:28;;;;;;:::i;:::-;;;;;;;;3112:309;3009:412:::0;;;;:::o;22661:174::-;22723:4;22747:80;22790:10;22801:12;22773:41;;;;;;;;;:::i;:::-;;;;;;;;;;;;;22763:52;;;;;;22758:58;;22818:8;22747:10;:80::i;:::-;22740:87;;22661:174;;;:::o;22949:1357::-;23023:4;23040:5;:3;:5::i;:::-;23087:14;23111:5;23087:30;;23149:7;23136:9;:20;;:46;;;;;23172:10;;23160:9;:22;23136:46;23128:55;;;;;;23209:1;23197:9;:13;23194:1027;;;23242:1;23229:11;;:14;23226:156;;23349:2;23337:9;:14;;;;:::i;:::-;23308:9;23318:14;;23308:25;;;;;;;;:::i;:::-;;;;;;;;;;:43;;;;;;;:::i;:::-;;;;;;;;23226:156;23419:1;23399:22;;:8;:22;;;23396:208;;23442:8;23465:3;23453:9;:15;;;;:::i;:::-;23442:26;;23504:3;23487:13;;:20;;;;;;;:::i;:::-;;;;;;;;23563:3;23526:7;:17;23534:8;23526:17;;;;;;;;;;;;;;;:25;;;:41;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;23423:181;23396:208;23647:1;23632:12;:16;;;;:::i;:::-;23621:8;;:27;23618:401;;;23695:1;23680:12;:16;;;;:::i;:::-;23669:8;:27;;;;23728:9;23715:10;:22;;;;23618:401;;;23806:10;;23793;;:23;23790:214;;;23841:8;;:10;;;;;;;;;:::i;:::-;;;;;;23887:9;23874:10;:22;;;;23790:214;;;23975:9;23961:10;;:23;;;;;;;:::i;:::-;;;;;;;;23790:214;23618:401;24052:86;;;;;;;;24072:9;24052:86;;;;;;24100:7;24093:15;;24052:86;;;;;;24127:8;;24052:86;;;;;24033:4;:16;24038:10;24033:16;;;;;;;;;;;;;;;:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24165:10;24158:51;;;24181:7;24176:13;;24190:8;;24199:9;24158:51;;;;;;;;:::i;:::-;;;;;;;;23194:1027;24231:9;:7;:9::i;:::-;;24289:8;;24282:16;;;22949:1357;;;;:::o;4691:33::-;4723:1;4691:33;:::o;683:23::-;;;;;;;;;;;;;:::o;6243:39::-;6277:5;6243:39;:::o;24454:559::-;24501:4;24539:1;24526:9;;:14;:27;;;;;24552:1;24544:5;:9;24526:27;:50;;;;;6277:5;24557;:19;;24526:50;24518:59;;;;;;24588:6;24613:5;24597:6;:13;;;;:21;;;;:::i;:::-;24588:30;;6277:5;24632:1;:14;24629:59;;;6277:5;24662:14;;24629:59;24702:6;24709;:13;;;;24702:20;;24698:99;24725:1;24723;:3;24698:99;;;24771:6;24783:1;24771:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24727:3;;;;;;;24698:99;;;;6277:5;24810:6;:13;;;;:25;24807:167;;24924:2;24909:12;:17;;;;:::i;:::-;24892:12;:35;;;;:::i;:::-;24880:9;:47;;;;24953:9;;24942:8;:20;;;;24807:167;24991:6;:13;;;;24984:21;;;24454:559;;;:::o;9178:362::-;9228:4;9262:1;9248:11;;:15;9245:56;;;9287:1;9280:9;;;;9245:56;9311:11;6277:5;9355:2;:15;;;;:::i;:::-;9341:9;;9326:12;:24;;;;:::i;:::-;9325:46;;;;:::i;:::-;9311:60;;9394:14;;9385:6;:23;9382:64;;;9432:1;9425:9;;;;;9382:64;6277:5;9514:2;:15;;;;:::i;:::-;9500:9;;9485:12;:24;;;;:::i;:::-;9484:46;;;;:::i;:::-;6277:5;9464:2;:15;;;;:::i;:::-;9463:68;;;;:::i;:::-;9456:76;;;9178:362;;:::o;8458:115::-;8517:4;8546;:12;8551:6;8546:12;;;;;;;;;;;;;;;:18;;;;;;;;;;;;8541:24;;8534:31;;8458:115;;;:::o;9968:199::-;7104:8;;;;;;;;;;;7090:22;;:10;:22;;;7083:30;;;;:::i;:::-;;10062:1:::1;10046:18;;:4;:18;;::::0;10039:26:::1;;;;:::i;:::-;;10076;10091:10;10076:14;:26::i;:::-;10113:20;10128:4;10113:14;:20::i;:::-;10155:4;10144:8;;:15;;;;;;;;;;;;;;;;;;9968:199:::0;:::o;27712:173::-;27762:6;27781:97;27788:4;27786:1;:6;27781:97;;;27816:9;:7;:9::i;:::-;27812:55;;27845:7;;;27812:55;27793:3;;;;;;;27781:97;;;27751:134;27712:173;;:::o;18573:840::-;18625:4;18643:17;18663:4;:10;18668:4;18663:10;;;;;;;;;;;;;;;18643:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18703:1;18689:6;:12;;;:15;;;18688:54;;;;18740:1;18723:6;:15;;;:18;;;;18688:54;:101;;;;18773:6;:15;;;18760:28;;:12;:28;18688:101;:169;;;;6277:5;18840:2;:15;;;;:::i;:::-;18821:6;:15;;;:35;;;;;;:::i;:::-;18807:12;:49;;18688:169;18684:210;;;18880:1;18873:9;;;;;18684:210;18936:3;18920:6;:15;;;:19;;;;:::i;:::-;18907:32;;:12;:32;18904:174;;;19008:57;19017:6;19046;:15;;;19036:26;;;19031:32;;19008:8;:57::i;:::-;19001:65;;;;;18904:174;19101:1;19091:9;;:11;19088:298;;;19118:11;19132:24;19140:6;:15;;;19132:24;;:7;:24::i;:::-;19118:38;;19182:9;19174:4;:17;;;19171:211;;19262:6;:12;;;19257:18;;19250:26;;;;;;19171:211;19336:29;19345:6;19359:4;19336:8;:29::i;:::-;19329:37;;;;;;19088:298;19403:1;19396:9;;;18573:840;;;;:::o;10767:110::-;7014:5;;;;;;;;;;;7000:19;;:10;:19;;;6993:27;;;;:::i;:::-;;10843:1:::1;10828:12;:16;;;;:::i;:::-;10817:8;:27;;;;10868:1;10855:10;:14;;;;10767:110::o:0;6093:20::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7703:125::-;7767:4;7796:7;:15;7804:6;7796:15;;;;;;;;;;;;;;;:23;;;;;;;;;;;;7791:29;;7784:36;;7703:125;;;:::o;5757:25::-;;;;:::o;2468:115::-;2533:12;2561:8;:16;2570:6;2561:16;;;;;;;;;;;;;;;;2554:23;;2468:115;;;:::o;7493:98::-;7540:4;7569:6;:13;;;;7557:26;;7493:98;:::o;5892:24::-;;;;:::o;8222:133::-;8284:4;8313:7;:15;8321:6;8313:15;;;;;;;;;;;;;;;:33;;;;;;;;;;;;8308:39;;8301:46;;8222:133;;;:::o;5600:23::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;650:20::-;;;;;;;;;;;;;:::o;8957:124::-;9022:4;9051;:12;9056:6;9051:12;;;;;;;;;;;;;;;:21;;;;;;;;;;;;9046:27;;9039:34;;8957:124;;;:::o;8707:116::-;8765:4;8794;:12;8799:6;8794:12;;;;;;;;;;;;;;;:20;;;;;;;;;;;;8789:26;;8782:33;;8707:116;;;:::o;4646:38::-;;;;;;;;;;;;;;;;;;;:::o;12601:319::-;12673:1;12643:7;:19;12651:10;12643:19;;;;;;;;;;;;;;;:27;;;;;;;;;;;;:31;;;:88;;;;;12719:12;12678:7;:19;12686:10;12678:19;;;;;;;;;;;;;;;:37;;;;;;;;;;;;:53;;;;12643:88;12640:273;;;12747:12;12762:7;:19;12770:10;12762:19;;;;;;;;;;;;;;;:27;;;;;;;;;;;;12747:42;;;;12834:1;12804:7;:19;12812:10;12804:19;;;;;;;;;;;;;;;:27;;;:31;;;;;;;;;;;;;;;;;;12867:7;12850:13;;:24;;;;;;;:::i;:::-;;;;;;;;12889:12;12893:7;12889:3;:12::i;:::-;12732:181;12640:273;12601:319::o;5345:27::-;;;;:::o;9673:190::-;7014:5;;;;;;;;;;;7000:19;;:10;:19;;;6993:27;;;;:::i;:::-;;9761:1:::1;9745:18;;:4;:18;;::::0;9738:26:::1;;;;:::i;:::-;;9775;9790:10;9775:14;:26::i;:::-;9812:20;9827:4;9812:14;:20::i;:::-;9851:4;9843:5;;:12;;;;;;;;;;;;;;;;;;9673:190:::0;:::o;1743:513::-;1819:6;1567:1;1560:4;:8;;;;:::i;:::-;1541;;:15;;:27;;1534:35;;;;:::i;:::-;;1834:26:::1;1849:10;1834:14;:26::i;:::-;1890:32;1915:6;1890:8;:20;1899:10;1890:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;1867:8;:20;1876:10;1867:20;;;;;;;;;;;;;;;:55;;;;1947:4;1932:20;;:3;:20;;::::0;1929:322:::1;;1965:21;1980:5;;;;;;;;;;;1965:14;:21::i;:::-;2015:27;2035:6;2015:8;:15;2024:5;;;;;;;;;;;2015:15;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;1997:8;:15;2006:5;;;;;;;;;;;1997:15;;;;;;;;;;;;;;;:45;;;;2079:5;;;;;;;;;;;2058:35;;2067:10;2058:35;;;2086:6;2058:35;;;;;;:::i;:::-;;;;;;;;1929:322;;;2123:19;2138:3;2123:14;:19::i;:::-;2169:25;2187:6;2169:8;:13;2178:3;2169:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2153:8;:13;2162:3;2153:13;;;;;;;;;;;;;;;:41;;;;2231:3;2210:33;;2219:10;2210:33;;;2236:6;2210:33;;;;;;:::i;:::-;;;;;;;;1929:322;1743:513:::0;;;:::o;25096:89::-;25138:4;25162:14;25172:3;25162:9;:14::i;:::-;25155:22;;25096:89;:::o;5831:24::-;;;;:::o;11733:70::-;11781:14;:12;:14::i;:::-;11733:70::o;6024:32::-;;;;:::o;13657:73::-;13709:13;13716:5;;;;;;;;;;;13709:6;:13::i;:::-;13657:73::o;5494:43::-;;;;:::o;5250:29::-;;;;:::o;11170:493::-;7014:5;;;;;;;;;;;7000:19;;:10;:19;;;6993:27;;;;:::i;:::-;;11233:14:::1;:12;:14::i;:::-;11276:1;11266:7;:11;:90;;;;;11349:7;11333:13;;11327:2;11323:1;11307:13:::0;::::1;:17;;;;:::i;:::-;:22;;;;:::i;:::-;11306:40;;;;:::i;:::-;:50;;;;:::i;:::-;11281:21;:75;;11266:90;11258:99;;;::::0;::::1;;11407:1;11388:16;;:20;;;;:::i;:::-;11371:13;;:37;11368:201;;11501:3;11477:21;:27;;;;:::i;:::-;11466:7;:38;;11465:91;;;;;11544:12;11525:15;11509:13;;:31;;;;:::i;:::-;:47;;11465:91;11457:100;;;::::0;::::1;;11368:201;11587:10;11579:28;;:37;11608:7;11579:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;11643:12;11627:13;:28;;;;11170:493:::0;:::o;6311:29::-;;;;:::o;11892:628::-;11951:1;11937:11;;:15;:65;;;;;12000:1;6277:5;11987:14;;;;:::i;:::-;11972:11;;:30;;;;:::i;:::-;11956:12;:46;;11937:65;11934:579;;;12047:1;12033:11;:15;;;;11934:579;;;12132:1;12120:9;;:13;12117:385;;;12147:11;6277:5;12191:2;:15;;;;:::i;:::-;12177:9;;12162:12;:24;;;;:::i;:::-;12161:47;;;;:::i;:::-;12147:61;;12258:1;12239:9;:16;;;;:20;;;;:::i;:::-;12230:6;:29;12227:94;;;12284:9;12299:1;12284:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12227:94;12351:14;;12342:6;:23;:43;;;;;12384:1;12369:11;;:16;12342:43;:84;;;;;12425:1;12406:9;:16;;;;:20;;;;:::i;:::-;12389:14;;:37;12342:84;12339:148;;;12451:14;;:16;;;;;;;;;:::i;:::-;;;;;;12339:148;12134:368;12117:385;11934:579;11892:628::o;4297:144::-;4380:14;4410:7;:15;4418:6;4410:15;;;;;;;;;;;;;;;:25;4426:8;4410:25;;;;;;;;;;;;;;;;4403:32;;4297:144;;;;:::o;5958:26::-;;;;:::o;16532:136::-;16599:1;16584:11;;:16;16576:25;;;;;;16612:26;16627:10;16612:14;:26::i;:::-;16649:11;:9;:11::i;:::-;16532:136::o;5432:29::-;;;;:::o;15973:499::-;16037:1;16022:11;;:16;16014:25;;;;;;16050:26;16065:10;16050:14;:26::i;:::-;16087:22;16135:6;16112:8;:20;16121:10;16112:20;;;;;;;;;;;;;;;;:29;;;;:::i;:::-;16087:54;;16185:1;16157:52;;16166:10;16157:52;;;16188:8;:20;16197:10;16188:20;;;;;;;;;;;;;;;;16157:52;;;;;;:::i;:::-;;;;;;;;16244:8;:20;16253:10;16244:20;;;;;;;;;;;;;;;16237:27;;;16348:17;16331:13;;:34;;;;;;;:::i;:::-;;;;;;;;16439:2;16435:1;16415:17;:21;;;;:::i;:::-;:26;;;;:::i;:::-;16376:7;:19;16384:10;16376:19;;;;;;;;;;;;;;;:27;;;:66;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;16453:11;:9;:11::i;:::-;16003:469;15973:499::o;5563:30::-;;;;:::o;7953:135::-;8016:4;8045:7;:15;8053:6;8045:15;;;;;;;;;;;;;;;:34;;;;;;;;;;;;8040:40;;8033:47;;7953:135;;;:::o;10277:170::-;7014:5;;;;;;;;;;;7000:19;;:10;:19;;;6993:27;;;;:::i;:::-;;10366:1:::1;10351:11;;:16;:33;;;;;10383:1;10371:9;;:13;10351:33;:57;;;;;10403:5;10388:12;:20;10351:57;10343:66;;;::::0;::::1;;10434:5;10420:11;:19;;;;10277:170:::0;:::o;352:104::-;404:4;429:1;424;:6;;417:14;;;;:::i;:::-;;449:1;445;:5;;;;:::i;:::-;438:12;;352:104;;;;:::o;17561:949::-;17635:4;17672:14;17696:7;:15;;;17672:40;;17723:10;17746:5;17736:7;:15;17723:28;;17762:14;18038:1;18025:8;18019:3;:14;18018:21;;;:29;;18046:1;18018:29;;;18042:1;18018:29;17990:1;17978:7;17972:3;:13;17971:20;;;:28;;17998:1;17971:28;;;17994:1;17971:28;17943:1;17932:6;17926:3;:12;17925:19;;;:27;;17951:1;17925:27;;;17947:1;17925:27;17897:1;17887:5;17881:3;:11;17880:18;;;:26;;17905:1;17880:26;;;17901:1;17880:26;17852:1;17843:4;17837:3;:10;17836:17;;;:25;;17860:1;17836:25;;;17856:1;17836:25;17808:1;17800:3;17794;:9;17793:16;;;:24;;17816:1;17793:24;;;17812:1;17793:24;17792:71;;;;:::i;:::-;:116;;;;:::i;:::-;:162;;;;:::i;:::-;:209;;;;:::i;:::-;:257;;;;:::i;:::-;17762:287;;;;18074:1;18063:7;:12;;;18060:80;;18120:7;18103;:13;;;18098:19;;:29;;;;:::i;:::-;18091:37;;;;;;;18060:80;18164:1;18153:7;:12;;;18150:78;;18210:5;18193:7;:13;;;18188:19;;:27;;;;:::i;:::-;18181:35;;;;;;;18150:78;18252:1;18241:7;:12;;;18238:76;;18298:3;18281:7;:13;;;18276:19;;:25;;;;:::i;:::-;18269:33;;;;;;;18238:76;18338:1;18327:7;:12;;;18324:75;;18384:2;18367:7;:13;;;18362:19;;:24;;;;:::i;:::-;18355:32;;;;;;;18324:75;18423:1;18412:7;:12;;;18409:74;;18469:1;18452:7;:13;;;18447:19;;:23;;;;:::i;:::-;18440:31;;;;;;;18409:74;18500:1;18493:9;;;;;17561:949;;;;;:::o;26452:408::-;26504:6;26523:10;26559:2;26546:9;;26537:6;:18;;;;:::i;:::-;26536:25;;;;:::i;:::-;26523:38;;26572:9;26584:6;6277:5;26591;:18;;;;:::i;:::-;26584:26;;;;;;;;:::i;:::-;;;;;;;;;;26572:38;;26654:3;26646:4;:11;;6277:5;26624;:18;;;;:::i;:::-;:33;26621:123;;26681:9;26674:17;;;;;;26621:123;26754:10;26790:2;26777:9;;26768:6;:18;;;;:::i;:::-;26767:25;;;;:::i;:::-;26754:38;;26842:8;26832:5;26827:2;:10;;;;:::i;:::-;26818:4;:20;;26817:33;26803:49;;;;;26452:408;;;;:::o;12928:649::-;12974:11;13012:1;12988:21;:25;;;;:::i;:::-;12974:39;;13037:7;13027:6;:17;13024:546;;13069:10;13061:28;;:37;13090:7;13061:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13126:8;13116:7;:18;13113:84;;;13167:14;:12;:14::i;:::-;13113:84;13024:546;;;13238:16;13267:6;13257:7;:16;;;;:::i;:::-;13238:35;;13305:11;13288:13;;:28;;;;;;;:::i;:::-;;;;;;;;13370:11;13331:7;:19;13339:10;13331:19;;;;;;;;;;;;;;;:27;;;:51;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;13459:16;13444:12;:31;;;;:::i;:::-;13397:7;:19;13405:10;13397:19;;;;;;;;;;;;;;;:37;;;:79;;;;;;;;;;;;;;;;;;13530:10;13522:28;;:36;13551:6;13522:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13223:347;13024:546;12963:614;12928:649;:::o;25193:1251::-;25265:4;26431:3;6277:5;26406:6;26401:12;;:25;;;;:::i;:::-;26399:35;;26376:3;26362:8;26356:1;26349:6;:8;;;;:::i;:::-;26339:19;;;26334:25;;:36;26332:47;;26263:3;26249:8;26243:1;26236:6;:8;;;;:::i;:::-;26226:19;;;26221:25;;:36;26219:47;;26150:3;26136:8;26130:1;26123:6;:8;;;;:::i;:::-;26113:19;;;26108:25;;:36;26106:47;;26037:3;26023:8;26017:1;26010:6;:8;;;;:::i;:::-;26000:19;;;25995:25;;:36;25993:47;;25924:3;25910:8;25904:1;25897:6;:8;;;;:::i;:::-;25887:19;;;25882:25;;:36;25880:47;;25812:2;25798:8;25792:1;25785:6;:8;;;;:::i;:::-;25775:19;;;25770:25;;:36;25768:46;;25700:2;25686:8;25680:1;25673:6;:8;;;;:::i;:::-;25663:19;;;25658:25;;:36;25656:46;;25588:2;25574:8;25568:1;25561:6;:8;;;;:::i;:::-;25551:19;;;25546:25;;:36;25544:46;;25476:2;25462:8;25456:1;25449:6;:8;;;;:::i;:::-;25439:19;;;25434:25;;:36;25432:46;;25362:8;25349:6;25339:19;;;25334:25;;:36;25332:148;:260;:372;:484;:597;:710;:823;:936;:1049;:1103;25324:1112;;25193:1251;;;;:::o;460:121::-;512:4;525:6;538:1;534;:5;;;;:::i;:::-;525:14;;558:1;553;:6;;546:14;;;;:::i;:::-;;574:1;567:8;;;460:121;;;;:::o;88:117:1:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:99::-;1228:6;1262:5;1256:12;1246:22;;1176:99;;;:::o;1281:169::-;1365:11;1399:6;1394:3;1387:19;1439:4;1434:3;1430:14;1415:29;;1281:169;;;;:::o;1456:248::-;1538:1;1548:113;1562:6;1559:1;1556:13;1548:113;;;1647:1;1642:3;1638:11;1632:18;1628:1;1623:3;1619:11;1612:39;1584:2;1581:1;1577:10;1572:15;;1548:113;;;1695:1;1686:6;1681:3;1677:16;1670:27;1518:186;1456:248;;;:::o;1710:102::-;1751:6;1802:2;1798:7;1793:2;1786:5;1782:14;1778:28;1768:38;;1710:102;;;:::o;1818:377::-;1906:3;1934:39;1967:5;1934:39;:::i;:::-;1989:71;2053:6;2048:3;1989:71;:::i;:::-;1982:78;;2069:65;2127:6;2122:3;2115:4;2108:5;2104:16;2069:65;:::i;:::-;2159:29;2181:6;2159:29;:::i;:::-;2154:3;2150:39;2143:46;;1910:285;1818:377;;;;:::o;2201:313::-;2314:4;2352:2;2341:9;2337:18;2329:26;;2401:9;2395:4;2391:20;2387:1;2376:9;2372:17;2365:47;2429:78;2502:4;2493:6;2429:78;:::i;:::-;2421:86;;2201:313;;;;:::o;2520:77::-;2557:7;2586:5;2575:16;;2520:77;;;:::o;2603:122::-;2676:24;2694:5;2676:24;:::i;:::-;2669:5;2666:35;2656:63;;2715:1;2712;2705:12;2656:63;2603:122;:::o;2731:139::-;2777:5;2815:6;2802:20;2793:29;;2831:33;2858:5;2831:33;:::i;:::-;2731:139;;;;:::o;2876:329::-;2935:6;2984:2;2972:9;2963:7;2959:23;2955:32;2952:119;;;2990:79;;:::i;:::-;2952:119;3110:1;3135:53;3180:7;3171:6;3160:9;3156:22;3135:53;:::i;:::-;3125:63;;3081:117;2876:329;;;;:::o;3211:474::-;3279:6;3287;3336:2;3324:9;3315:7;3311:23;3307:32;3304:119;;;3342:79;;:::i;:::-;3304:119;3462:1;3487:53;3532:7;3523:6;3512:9;3508:22;3487:53;:::i;:::-;3477:63;;3433:117;3589:2;3615:53;3660:7;3651:6;3640:9;3636:22;3615:53;:::i;:::-;3605:63;;3560:118;3211:474;;;;;:::o;3691:90::-;3725:7;3768:5;3761:13;3754:21;3743:32;;3691:90;;;:::o;3787:109::-;3868:21;3883:5;3868:21;:::i;:::-;3863:3;3856:34;3787:109;;:::o;3902:210::-;3989:4;4027:2;4016:9;4012:18;4004:26;;4040:65;4102:1;4091:9;4087:17;4078:6;4040:65;:::i;:::-;3902:210;;;;:::o;4118:118::-;4205:24;4223:5;4205:24;:::i;:::-;4200:3;4193:37;4118:118;;:::o;4242:222::-;4335:4;4373:2;4362:9;4358:18;4350:26;;4386:71;4454:1;4443:9;4439:17;4430:6;4386:71;:::i;:::-;4242:222;;;;:::o;4470:619::-;4547:6;4555;4563;4612:2;4600:9;4591:7;4587:23;4583:32;4580:119;;;4618:79;;:::i;:::-;4580:119;4738:1;4763:53;4808:7;4799:6;4788:9;4784:22;4763:53;:::i;:::-;4753:63;;4709:117;4865:2;4891:53;4936:7;4927:6;4916:9;4912:22;4891:53;:::i;:::-;4881:63;;4836:118;4993:2;5019:53;5064:7;5055:6;5044:9;5040:22;5019:53;:::i;:::-;5009:63;;4964:118;4470:619;;;;;:::o;5095:474::-;5163:6;5171;5220:2;5208:9;5199:7;5195:23;5191:32;5188:119;;;5226:79;;:::i;:::-;5188:119;5346:1;5371:53;5416:7;5407:6;5396:9;5392:22;5371:53;:::i;:::-;5361:63;;5317:117;5473:2;5499:53;5544:7;5535:6;5524:9;5520:22;5499:53;:::i;:::-;5489:63;;5444:118;5095:474;;;;;:::o;5575:118::-;5662:24;5680:5;5662:24;:::i;:::-;5657:3;5650:37;5575:118;;:::o;5699:222::-;5792:4;5830:2;5819:9;5815:18;5807:26;;5843:71;5911:1;5900:9;5896:17;5887:6;5843:71;:::i;:::-;5699:222;;;;:::o;5927:474::-;5995:6;6003;6052:2;6040:9;6031:7;6027:23;6023:32;6020:119;;;6058:79;;:::i;:::-;6020:119;6178:1;6203:53;6248:7;6239:6;6228:9;6224:22;6203:53;:::i;:::-;6193:63;;6149:117;6305:2;6331:53;6376:7;6367:6;6356:9;6352:22;6331:53;:::i;:::-;6321:63;;6276:118;5927:474;;;;;:::o;6407:180::-;6455:77;6452:1;6445:88;6552:4;6549:1;6542:15;6576:4;6573:1;6566:15;6593:410;6633:7;6656:20;6674:1;6656:20;:::i;:::-;6651:25;;6690:20;6708:1;6690:20;:::i;:::-;6685:25;;6745:1;6742;6738:9;6767:30;6785:11;6767:30;:::i;:::-;6756:41;;6946:1;6937:7;6933:15;6930:1;6927:22;6907:1;6900:9;6880:83;6857:139;;6976:18;;:::i;:::-;6857:139;6641:362;6593:410;;;;:::o;7009:191::-;7049:3;7068:20;7086:1;7068:20;:::i;:::-;7063:25;;7102:20;7120:1;7102:20;:::i;:::-;7097:25;;7145:1;7142;7138:9;7131:16;;7166:3;7163:1;7160:10;7157:36;;;7173:18;;:::i;:::-;7157:36;7009:191;;;;:::o;7206:194::-;7246:4;7266:20;7284:1;7266:20;:::i;:::-;7261:25;;7300:20;7318:1;7300:20;:::i;:::-;7295:25;;7344:1;7341;7337:9;7329:17;;7368:1;7362:4;7359:11;7356:37;;;7373:18;;:::i;:::-;7356:37;7206:194;;;;:::o;7406:180::-;7454:77;7451:1;7444:88;7551:4;7548:1;7541:15;7575:4;7572:1;7565:15;7592:185;7632:1;7649:20;7667:1;7649:20;:::i;:::-;7644:25;;7683:20;7701:1;7683:20;:::i;:::-;7678:25;;7722:1;7712:35;;7727:18;;:::i;:::-;7712:35;7769:1;7766;7762:9;7757:14;;7592:185;;;;:::o;7783:138::-;7820:7;7860:54;7853:5;7849:66;7838:77;;7783:138;;;:::o;7927:244::-;7967:3;7986:20;8004:1;7986:20;:::i;:::-;7981:25;;8020:20;8038:1;8020:20;:::i;:::-;8015:25;;8063:1;8060;8056:9;8049:16;;8086:54;8081:3;8078:63;8075:89;;;8144:18;;:::i;:::-;8075:89;7927:244;;;;:::o;8177:94::-;8210:8;8258:5;8254:2;8250:14;8229:35;;8177:94;;;:::o;8277:::-;8316:7;8345:20;8359:5;8345:20;:::i;:::-;8334:31;;8277:94;;;:::o;8377:100::-;8416:7;8445:26;8465:5;8445:26;:::i;:::-;8434:37;;8377:100;;;:::o;8483:157::-;8588:45;8608:24;8626:5;8608:24;:::i;:::-;8588:45;:::i;:::-;8583:3;8576:58;8483:157;;:::o;8646:79::-;8685:7;8714:5;8703:16;;8646:79;;;:::o;8731:157::-;8836:45;8856:24;8874:5;8856:24;:::i;:::-;8836:45;:::i;:::-;8831:3;8824:58;8731:157;;:::o;8894:397::-;9034:3;9049:75;9120:3;9111:6;9049:75;:::i;:::-;9149:2;9144:3;9140:12;9133:19;;9162:75;9233:3;9224:6;9162:75;:::i;:::-;9262:2;9257:3;9253:12;9246:19;;9282:3;9275:10;;8894:397;;;;;:::o;9297:180::-;9345:77;9342:1;9335:88;9442:4;9439:1;9432:15;9466:4;9463:1;9456:15;9483:332;9604:4;9642:2;9631:9;9627:18;9619:26;;9655:71;9723:1;9712:9;9708:17;9699:6;9655:71;:::i;:::-;9736:72;9804:2;9793:9;9789:18;9780:6;9736:72;:::i;:::-;9483:332;;;;;:::o;9821:93::-;9857:7;9897:10;9890:5;9886:22;9875:33;;9821:93;;;:::o;9920:60::-;9948:3;9969:5;9962:12;;9920:60;;;:::o;9986:140::-;10035:9;10068:52;10086:33;10095:23;10112:5;10095:23;:::i;:::-;10086:33;:::i;:::-;10068:52;:::i;:::-;10055:65;;9986:140;;;:::o;10132:129::-;10218:36;10248:5;10218:36;:::i;:::-;10213:3;10206:49;10132:129;;:::o;10267:330::-;10387:4;10425:2;10414:9;10410:18;10402:26;;10438:70;10505:1;10494:9;10490:17;10481:6;10438:70;:::i;:::-;10518:72;10586:2;10575:9;10571:18;10562:6;10518:72;:::i;:::-;10267:330;;;;;:::o;10603:197::-;10642:3;10661:19;10678:1;10661:19;:::i;:::-;10656:24;;10694:19;10711:1;10694:19;:::i;:::-;10689:24;;10736:1;10733;10729:9;10722:16;;10759:10;10754:3;10751:19;10748:45;;;10773:18;;:::i;:::-;10748:45;10603:197;;;;:::o;10806:442::-;10955:4;10993:2;10982:9;10978:18;10970:26;;11006:71;11074:1;11063:9;11059:17;11050:6;11006:71;:::i;:::-;11087:72;11155:2;11144:9;11140:18;11131:6;11087:72;:::i;:::-;11169;11237:2;11226:9;11222:18;11213:6;11169:72;:::i;:::-;10806:442;;;;;;:::o;11254:180::-;11302:77;11299:1;11292:88;11399:4;11396:1;11389:15;11423:4;11420:1;11413:15;11440:176;11472:1;11489:20;11507:1;11489:20;:::i;:::-;11484:25;;11523:20;11541:1;11523:20;:::i;:::-;11518:25;;11562:1;11552:35;;11567:18;;:::i;:::-;11552:35;11608:1;11605;11601:9;11596:14;;11440:176;;;;:::o;11622:233::-;11661:3;11684:24;11702:5;11684:24;:::i;:::-;11675:33;;11730:66;11723:5;11720:77;11717:103;;11800:18;;:::i;:::-;11717:103;11847:1;11840:5;11836:13;11829:20;;11622:233;;;:::o;11861:86::-;11896:7;11936:4;11929:5;11925:16;11914:27;;11861:86;;;:::o;11953:188::-;11991:3;12010:18;12026:1;12010:18;:::i;:::-;12005:23;;12042:18;12058:1;12042:18;:::i;:::-;12037:23;;12083:1;12080;12076:9;12069:16;;12106:4;12101:3;12098:13;12095:39;;;12114:18;;:::i;:::-;12095:39;11953:188;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betsize\",\"type\":\"uint256\"}],\"name\":\"LogBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"LogDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlockNumber\",\"type\":\"uint256\"}],\"name\":\"LogLate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"LogLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRecordWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"LogWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sadd\",\"type\":\"uint256\"}],\"name\":\"addHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addHashes128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betBlockNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betHashOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"betOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeAnimator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"coldStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coldStoreLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashBetMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashBetSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashFirst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashesSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hotStore\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseKeeping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investBalanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"play\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"playRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"playSystem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"putHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"putHashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxsum\",\"type\":\"uint256\"}],\"name\":\"setBetMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"setInvestStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletBlockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletPeriodOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"won\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addHashes(uint256)\":{\"details\":\"Create hash data swap space\",\"params\":{\"_sadd\":\"Number of hashes to add (<=256)\"}},\"addHashes128()\":{\"details\":\"Create hash data swap space, add 128 hashes\"},\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens than an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"remaining\":\"A uint specifing the amount of tokens still avaible for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint representing the amount owned by the passed address.\"}},\"betBlockNumberOf(address)\":{\"details\":\"Show block number of lottery run for the bet.\",\"params\":{\"_owner\":\"The address of the player.\"}},\"betHashOf(address)\":{\"details\":\"Show block number of lottery run for the bet.\",\"params\":{\"_owner\":\"The address of the player.\"}},\"betOf(address)\":{\"details\":\"Check if won in lottery\"},\"betValueOf(address)\":{\"details\":\"Show bet size.\",\"params\":{\"_owner\":\"The address of the player.\"}},\"changeAnimator(address)\":{\"details\":\"Change animator.\",\"params\":{\"_who\":\"The address of new animator.\"}},\"changeOwner(address)\":{\"details\":\"Change owner.\",\"params\":{\"_who\":\"The address of new owner.\"}},\"coldStore(uint256)\":{\"details\":\"Move funds to cold storageinvestBalance and walletBalance is protected from withdraw by ownerif funding is > 50% admin can withdraw only 0.25% of balance weakly\",\"params\":{\"_amount\":\"The amount of wei to move to cold storage\"}},\"disinvest()\":{\"details\":\"Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\"},\"dividendsBlocks()\":{\"details\":\"Print number of block till next expected dividend payment\"},\"hashesLength()\":{\"details\":\"Show length of allocated swap space\"},\"hotStore()\":{\"details\":\"Move funds to contract jackpot\"},\"houseKeeping()\":{\"details\":\"Update accounting\"},\"invest(address)\":{\"details\":\"Buy tokens with affiliate partner\",\"params\":{\"_partner\":\"Affiliate partner\"}},\"investDirect()\":{\"details\":\"Buy tokens\"},\"payDividends()\":{\"details\":\"Pay unpaid dividends\"},\"payWallet()\":{\"details\":\"Pay balance from wallet\"},\"play()\":{\"details\":\"Play in lottery\"},\"playRandom(address)\":{\"details\":\"Play in lottery with random numbers\",\"params\":{\"_partner\":\"Affiliate partner\"}},\"playSystem(uint256,address)\":{\"details\":\"Play in lottery with own numbers\",\"params\":{\"_partner\":\"Affiliate partner\"}},\"putHash()\":{\"details\":\"Fill hash data\"},\"putHashes(uint256)\":{\"details\":\"Fill hash data many times\",\"params\":{\"_num\":\"Number of iterations\"}},\"resetBet()\":{\"details\":\"Reset bet size accounting, to increase bet volume above safe limits\"},\"setBetMax(uint256)\":{\"details\":\"Set maximum bet size per block\",\"params\":{\"_maxsum\":\"The maximum bet size in wei.\"}},\"setInvestStart(uint256)\":{\"details\":\"Set ICO Start block.\",\"params\":{\"_when\":\"The block number of the ICO.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint the amout of tokens to be transfered\"}},\"walletBalanceOf(address)\":{\"details\":\"Show balance of wallet\",\"params\":{\"_owner\":\"The address of the account.\"}},\"walletBlockOf(address)\":{\"details\":\"Show block number when withdraw can continue\",\"params\":{\"_owner\":\"The address of the account.\"}},\"walletPeriodOf(address)\":{\"details\":\"Show last dividend period processed\",\"params\":{\"_owner\":\"The address of the account.\"}},\"won()\":{\"details\":\"Check if won in lottery\"}},\"title\":\"SmartBillions contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"SmartBillions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 527,564,701,703,705,707,709,711,713,715,717,719\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  using SafeMath for uint;\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n            if(_amount > 1e6 gwei) { // 1 finney\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            payable(msg.sender).transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            payable(msg.sender).transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6c1185b99d1808e67a47878ea61ef0cd3dc5bc8c21a5f58fc02521a138e0d618\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"StandardToken":{"evm":{"deployedBytecode":{"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens than an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"remaining\":\"A uint specifing the amount of tokens still avaible for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint representing the amount owned by the passed address.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint the amout of tokens to be transfered\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"StandardToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\r\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 527,564,701,703,705,707,709,711,713,715,717,719\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n  function sub(uint a, uint b) internal pure returns (uint) {\\r\\n    assert(b <= a);\\r\\n    return a - b;\\r\\n  }\\r\\n  function add(uint a, uint b) internal pure returns (uint) {\\r\\n    uint c = a + b;\\r\\n    assert(c >= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n  uint public totalSupply;\\r\\n  address public owner; //owner\\r\\n  address public animator; //animator\\r\\n  function balanceOf(address who) public view virtual returns (uint);\\r\\n  function transfer(address to, uint value) public virtual;\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n  function commitDividend(address who) internal virtual; // pays remaining dividend\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n  function allowance(address owner, address spender) public view virtual returns (uint);\\r\\n  function transferFrom(address from, address to, uint value) public virtual;\\r\\n  function approve(address spender, uint value) public virtual;\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint;\\r\\n  mapping(address => uint) balances;\\r\\n\\r\\n  modifier onlyPayloadSize(uint size) {\\r\\n     assert(msg.data.length >= size + 4);\\r\\n     _;\\r\\n  }\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint _value) public override onlyPayloadSize(2 * 32) {\\r\\n    commitDividend(msg.sender);\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    if(_to == address(this)) {\\r\\n        commitDividend(owner);\\r\\n        balances[owner] = balances[owner].add(_value);\\r\\n        emit Transfer(msg.sender, owner, _value);\\r\\n    }\\r\\n    else {\\r\\n        commitDividend(_to);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n  }\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return balance An uint representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view override returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract StandardToken is BasicToken, ERC20 {\\r\\n  using SafeMath for uint;\\r\\n  mapping (address => mapping (address => uint)) allowed;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint the amout of tokens to be transfered\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint _value) public override onlyPayloadSize(3 * 32) {\\r\\n    uint _allowance = allowed[_from][msg.sender];\\r\\n    commitDividend(_from);\\r\\n    commitDividend(_to);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint _value) public override {\\r\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n  }\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return remaining A uint specifing the amount of tokens still avaible for the spender.\\r\\n   */\\r\\n  function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SmartBillions contract\\r\\n */\\r\\ncontract SmartBillions is StandardToken {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // metadata\\r\\n    string public constant name = \\\"SmartBillions Token\\\";\\r\\n    string public constant symbol = \\\"PLAY\\\";\\r\\n    uint public constant decimals = 0;\\r\\n\\r\\n    // contract state\\r\\n    struct Wallet {\\r\\n        uint208 balance; // current balance of user\\r\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\r\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\r\\n    }\\r\\n    mapping (address => Wallet) wallets;\\r\\n    struct Bet {\\r\\n        uint192 value; // bet size\\r\\n        uint32 betHash; // selected numbers\\r\\n        uint32 blockNum; // blocknumber when lottery runs\\r\\n    }\\r\\n    mapping (address => Bet) bets;\\r\\n\\r\\n    uint public walletBalance = 0; // sum of funds in wallets\\r\\n\\r\\n    // investment parameters\\r\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\r\\n    uint public investBalance = 0; // funding from investors\\r\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\r\\n    uint public dividendPeriod = 1;\\r\\n    uint[] public dividends; // dividens collected per period, growing array\\r\\n\\r\\n    // betting parameters\\r\\n    uint public maxWin = 0; // maximum prize won\\r\\n    uint public hashFirst = 0; // start time of building hashes database\\r\\n    uint public hashLast = 0; // last saved block of hashes\\r\\n    uint public hashNext = 0; // next available bet block.number\\r\\n    uint public hashBetSum = 0; // used bet volume of next block\\r\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\r\\n    uint[] public hashes; // space for storing lottery results\\r\\n\\r\\n    // constants\\r\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\r\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\r\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\r\\n\\r\\n    // events\\r\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\r\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\r\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\r\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\r\\n    event LogRecordWin(address indexed player, uint amount);\\r\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\r\\n    event LogDividend(address indexed investor, uint amount, uint period);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        assert(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAnimator() {\\r\\n        assert(msg.sender == animator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // constructor\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        animator = msg.sender;\\r\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\r\\n        dividends.push(0); // not used\\r\\n        dividends.push(0); // current dividend\\r\\n    }\\r\\n\\r\\n/* getters */\\r\\n\\r\\n    /**\\r\\n     * @dev Show length of allocated swap space\\r\\n     */\\r\\n    function hashesLength() external view returns (uint) {\\r\\n        return uint(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show balance of wallet\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show last dividend period processed\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].lastDividendPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number when withdraw can continue\\r\\n     * @param _owner The address of the account.\\r\\n     */\\r\\n    function walletBlockOf(address _owner) external view returns (uint) {\\r\\n        return uint(wallets[_owner].nextWithdrawBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show bet size.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betValueOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betHashOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].betHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Show block number of lottery run for the bet.\\r\\n     * @param _owner The address of the player.\\r\\n     */\\r\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\r\\n        return uint(bets[_owner].blockNum);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Print number of block till next expected dividend payment\\r\\n     */\\r\\n    function dividendsBlocks() external view returns (uint) {\\r\\n        if(investStart > 0) {\\r\\n            return(0);\\r\\n        }\\r\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\r\\n        if(period > dividendPeriod) {\\r\\n            return(0);\\r\\n        }\\r\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\r\\n    }\\r\\n\\r\\n/* administrative functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner.\\r\\n     * @param _who The address of new owner.\\r\\n     */\\r\\n    function changeOwner(address _who) external onlyOwner {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        owner = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change animator.\\r\\n     * @param _who The address of new animator.\\r\\n     */\\r\\n    function changeAnimator(address _who) external onlyAnimator {\\r\\n        assert(_who != address(0));\\r\\n        commitDividend(msg.sender);\\r\\n        commitDividend(_who);\\r\\n        animator = _who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ICO Start block.\\r\\n     * @param _when The block number of the ICO.\\r\\n     */\\r\\n    function setInvestStart(uint _when) external onlyOwner {\\r\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\r\\n        investStart = _when;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set maximum bet size per block\\r\\n     * @param _maxsum The maximum bet size in wei.\\r\\n     */\\r\\n    function setBetMax(uint _maxsum) external onlyOwner {\\r\\n        hashBetMax = _maxsum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\r\\n     */\\r\\n    function resetBet() external onlyOwner {\\r\\n        hashNext = block.number + 3;\\r\\n        hashBetSum = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to cold storage\\r\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\r\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\r\\n     * @param _amount The amount of wei to move to cold storage\\r\\n     */\\r\\n    function coldStore(uint _amount) external onlyOwner {\\r\\n        houseKeeping();\\r\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\r\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\r\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\r\\n        }\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        coldStoreLast = block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Move funds to contract jackpot\\r\\n     */\\r\\n    function hotStore() payable external {\\r\\n        houseKeeping();\\r\\n    }\\r\\n\\r\\n/* housekeeping functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Update accounting\\r\\n     */\\r\\n    function houseKeeping() public {\\r\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\r\\n            investStart = 0; // start dividend payments\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst > 0){\\r\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\r\\n                if(period > dividends.length - 2) {\\r\\n                    dividends.push(0);\\r\\n                }\\r\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\r\\n                    dividendPeriod++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* payments */\\r\\n\\r\\n    /**\\r\\n     * @dev Pay balance from wallet\\r\\n     */\\r\\n    function payWallet() public {\\r\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\r\\n            uint balance = wallets[msg.sender].balance;\\r\\n            wallets[msg.sender].balance = 0;\\r\\n            walletBalance -= balance;\\r\\n            pay(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay(uint _amount) private {\\r\\n        uint maxpay = address(this).balance / 2;\\r\\n        if(maxpay >= _amount) {\\r\\n            payable(msg.sender).transfer(_amount);\\r\\n            if(_amount > 1e6 gwei) { // 1 finney\\r\\n                houseKeeping();\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            uint keepbalance = _amount - maxpay;\\r\\n            walletBalance += keepbalance;\\r\\n            wallets[msg.sender].balance += uint208(keepbalance);\\r\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\r\\n            payable(msg.sender).transfer(maxpay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n/* investment functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens\\r\\n     */\\r\\n    function investDirect() payable external {\\r\\n        invest(owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with affiliate partner\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function invest(address _partner) public payable {\\r\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\r\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\r\\n        uint investing = msg.value;\\r\\n        if(investing > investBalanceMax - investBalance) {\\r\\n            investing = investBalanceMax - investBalance;\\r\\n            investBalance = investBalanceMax;\\r\\n            investStart = 0; // close investment round\\r\\n            payable(msg.sender).transfer(msg.value.sub(investing)); // send back funds immediately\\r\\n        }\\r\\n        else{\\r\\n            investBalance += investing;\\r\\n        }\\r\\n        if(_partner == address(0) || _partner == owner){\\r\\n            walletBalance += investing / 10;\\r\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\r\\n        else{\\r\\n            walletBalance += (investing * 5 / 100) * 2;\\r\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\r\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\r\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\r\\n        uint senderBalance = investing / 10**15;\\r\\n        uint ownerBalance = investing * 16 / 10**17  ;\\r\\n        uint animatorBalance = investing * 10 / 10**17  ;\\r\\n        balances[msg.sender] += senderBalance;\\r\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\r\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\r\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\r\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\r\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\r\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\r\\n        emit LogInvestment(msg.sender,_partner,investing);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\r\\n     */\\r\\n    function disinvest() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\r\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\r\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\r\\n        investBalance -= initialInvestment;\\r\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay unpaid dividends\\r\\n     */\\r\\n    function payDividends() external {\\r\\n        require(investStart == 0);\\r\\n        commitDividend(msg.sender);\\r\\n        payWallet();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Commit remaining dividends before transfer of tokens\\r\\n     */\\r\\n    function commitDividend(address _who) internal override {\\r\\n        uint last = wallets[_who].lastDividendPeriod;\\r\\n        if((balances[_who]==0) || (last==0)){\\r\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\r\\n            return;\\r\\n        }\\r\\n        if(last==dividendPeriod) {\\r\\n            return;\\r\\n        }\\r\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\r\\n        uint balance = 0;\\r\\n        for(;last<dividendPeriod;last++) {\\r\\n            balance += share * dividends[last];\\r\\n        }\\r\\n        balance = (balance / 0xffffffff);\\r\\n        walletBalance += balance;\\r\\n        wallets[_who].balance += uint208(balance);\\r\\n        wallets[_who].lastDividendPeriod = uint16(last);\\r\\n        emit LogDividend(_who,balance,last);\\r\\n    }\\r\\n\\r\\n/* lottery functions */\\r\\n\\r\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\r\\n        uint24 bethash = uint24(_player.betHash);\\r\\n        uint24 hit = bethash ^ _hash;\\r\\n        uint24 matches =\\r\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\r\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\r\\n        if(matches == 6){\\r\\n            return(uint(_player.value) * 7000000);\\r\\n        }\\r\\n        if(matches == 5){\\r\\n            return(uint(_player.value) * 20000);\\r\\n        }\\r\\n        if(matches == 4){\\r\\n            return(uint(_player.value) * 500);\\r\\n        }\\r\\n        if(matches == 3){\\r\\n            return(uint(_player.value) * 25);\\r\\n        }\\r\\n        if(matches == 2){\\r\\n            return(uint(_player.value) * 3);\\r\\n        }\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function betOf(address _who) external view returns (uint)  {\\r\\n        Bet memory player = bets[_who];\\r\\n        if( (player.value==0) ||\\r\\n            (player.blockNum<=1) ||\\r\\n            (block.number<player.blockNum) ||\\r\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\r\\n            return(0);\\r\\n        }\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\r\\n        }\\r\\n        if(hashFirst>0){\\r\\n            uint32 hash = getHash(player.blockNum);\\r\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                return(uint(player.value));\\r\\n            }\\r\\n            else{\\r\\n                return(betPrize(player,uint24(hash)));\\r\\n            }\\r\\n\\t}\\r\\n        return(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if won in lottery\\r\\n     */\\r\\n    function won() public {\\r\\n        Bet memory player = bets[msg.sender];\\r\\n        if(player.blockNum==0){ // create a new player\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        if((player.value==0) || (player.blockNum==1)){\\r\\n            payWallet();\\r\\n            return;\\r\\n        }\\r\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\r\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\r\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n            return;\\r\\n        }\\r\\n        uint prize = 0;\\r\\n        uint32 hash = 0;\\r\\n        if(block.number<player.blockNum+256){\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            hash = uint24(uint(blockhash(player.blockNum)));\\r\\n            prize = betPrize(player,uint24(hash));\\r\\n        }\\r\\n        else {\\r\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\r\\n                hash = getHash(player.blockNum);\\r\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\r\\n                    prize = uint(player.value);\\r\\n                }\\r\\n                else{\\r\\n                    prize = betPrize(player,uint24(hash));\\r\\n                }\\r\\n\\t    }\\r\\n            else{\\r\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\r\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n                return();\\r\\n            }\\r\\n        }\\r\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\r\\n        if(prize>0) {\\r\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\r\\n            if(prize > maxWin){\\r\\n                maxWin = prize;\\r\\n                emit LogRecordWin(msg.sender,prize);\\r\\n            }\\r\\n            pay(prize);\\r\\n        }\\r\\n        else{\\r\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send ether to buy tokens during ICO\\r\\n     * @dev or send less than 1 ether to contract to play\\r\\n     * @dev or send 0 to collect prize\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        if(msg.value > 0){\\r\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\r\\n                invest(owner);\\r\\n            }\\r\\n            else{ // if not ICO running payment to contract is treated as play\\r\\n                play();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        //check for dividends and other assets\\r\\n        if(investStart == 0 && balances[msg.sender]>0){\\r\\n            commitDividend(msg.sender);}\\r\\n        won(); // will run payWallet() if nothing else available\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery\\r\\n     */\\r\\n    function play() payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with random numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playRandom(address _partner) payable public returns (uint) {\\r\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Play in lottery with own numbers\\r\\n     * @param _partner Affiliate partner\\r\\n     */\\r\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\r\\n        won(); // check if player did not win\\r\\n        uint24 bethash = uint24(_hash);\\r\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\r\\n        if(msg.value > 0){\\r\\n            if(investStart==0) { // dividends only after investment finished\\r\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\r\\n            }\\r\\n            if(_partner != address(0)) {\\r\\n                uint fee = msg.value / 100;\\r\\n                walletBalance += fee;\\r\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\r\\n            }\\r\\n            if(hashNext < block.number + 3) {\\r\\n                hashNext = block.number + 3;\\r\\n                hashBetSum = msg.value;\\r\\n            }\\r\\n            else{\\r\\n                if(hashBetSum > hashBetMax) {\\r\\n                    hashNext++;\\r\\n                    hashBetSum = msg.value;\\r\\n                }\\r\\n                else{\\r\\n                    hashBetSum += msg.value;\\r\\n                }\\r\\n            }\\r\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\r\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\r\\n        }\\r\\n        putHash(); // players help collecing data\\r\\n        return(hashNext);\\r\\n    }\\r\\n\\r\\n/* database functions */\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space\\r\\n     * @param _sadd Number of hashes to add (<=256)\\r\\n     */\\r\\n    function addHashes(uint _sadd) public returns (uint) {\\r\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\r\\n        uint n = hashes.length + _sadd;\\r\\n        if(n > hashesSize){\\r\\n            n = hashesSize;\\r\\n        }\\r\\n        for(uint i=hashes.length;i<n;i++){ // make sure to burn gas\\r\\n            hashes.push(1);\\r\\n        }\\r\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\r\\n            hashFirst = block.number - ( block.number % 10);\\r\\n            hashLast = hashFirst;\\r\\n        }\\r\\n        return(hashes.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create hash data swap space, add 128 hashes\\r\\n     */\\r\\n    function addHashes128() external returns (uint) {\\r\\n        return(addHashes(128));\\r\\n    }\\r\\n\\r\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\r\\n        // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\r\\n            // <yes> <report> BAD_RANDOMNESS\\r\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\r\\n            | ( ( uint(_delta) / hashesSize) << 240));\\r\\n    }\\r\\n\\r\\n    function getHash(uint _block) private view returns (uint32) {\\r\\n        uint delta = (_block - hashFirst) / 10;\\r\\n        uint hash = hashes[delta % hashesSize];\\r\\n        if(delta / hashesSize != hash >> 240) {\\r\\n            return(0x1000000); // load failed, incorrect data in hashes\\r\\n        }\\r\\n        uint slotp = (_block - hashFirst) % 10;\\r\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data\\r\\n     */\\r\\n    function putHash() public returns (bool) {\\r\\n        uint lastb = hashLast;\\r\\n        if(lastb == 0 || block.number <= lastb + 10) {\\r\\n            return(false);\\r\\n        }\\r\\n        uint blockn256;\\r\\n        if(block.number<256) { // useless test for testnet :-(\\r\\n            blockn256 = 0;\\r\\n        }\\r\\n        else{\\r\\n            blockn256 = block.number - 256;\\r\\n        }\\r\\n        if(lastb < blockn256) {\\r\\n            uint num = blockn256;\\r\\n            num += num % 10;\\r\\n            lastb = num;\\r\\n        }\\r\\n        uint delta = (lastb - hashFirst) / 10;\\r\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\r\\n        hashLast = lastb + 10;\\r\\n        return(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fill hash data many times\\r\\n     * @param _num Number of iterations\\r\\n     */\\r\\n    function putHashes(uint _num) external {\\r\\n        uint n=0;\\r\\n        for(;n<_num;n++){\\r\\n            if(!putHash()){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6c1185b99d1808e67a47878ea61ef0cd3dc5bc8c21a5f58fc02521a138e0d618\",\"license\":\"UNLICENSED\"}},\"version\":1}"}}},"errors":[{"component":"general","errorCode":"3628","formattedMessage":"Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.\n   --> SmartBillions.sol:121:1:\n    |\n121 | contract SmartBillions is StandardToken {\n    | ^ (Relevant source part starts here and spans across multiple lines).\nNote: The payable fallback function is defined here.\n   --> SmartBillions.sol:602:5:\n    |\n602 |     fallback() external payable {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.","secondarySourceLocations":[{"end":22335,"file":"SmartBillions.sol","message":"The payable fallback function is defined here.","start":21764}],"severity":"warning","sourceLocation":{"end":27890,"file":"SmartBillions.sol","start":4492},"type":"Warning"}],"sources":{"SmartBillions.sol":{"id":0}}}
