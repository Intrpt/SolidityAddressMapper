{"contracts":{"BecToken.sol":{"BasicToken":{"evm":{"deployedBytecode":{"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806318160ddd1461004657806370a0823114610064578063a9059cbb14610094575b600080fd5b61004e6100c4565b60405161005b91906103a2565b60405180910390f35b61007e60048036038101906100799190610420565b6100ca565b60405161008b91906103a2565b60405180910390f35b6100ae60048036038101906100a99190610479565b610113565b6040516100bb91906104d4565b60405180910390f35b60005481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361014d57600080fd5b60008211801561019c5750600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b6101a557600080fd5b6101f782600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461033e90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061028c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461036190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161032c91906103a2565b60405180910390a36001905092915050565b60008282111561034d57600080fd5b8183610359919061051e565b905092915050565b60008082846103709190610552565b90508381101561037f57600080fd5b8091505092915050565b6000819050919050565b61039c81610389565b82525050565b60006020820190506103b76000830184610393565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103ed826103c2565b9050919050565b6103fd816103e2565b811461040857600080fd5b50565b60008135905061041a816103f4565b92915050565b600060208284031215610436576104356103bd565b5b60006104448482850161040b565b91505092915050565b61045681610389565b811461046157600080fd5b50565b6000813590506104738161044d565b92915050565b600080604083850312156104905761048f6103bd565b5b600061049e8582860161040b565b92505060206104af85828601610464565b9150509250929050565b60008115159050919050565b6104ce816104b9565b82525050565b60006020820190506104e960008301846104c5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061052982610389565b915061053483610389565b925082820390508181111561054c5761054b6104ef565b5b92915050565b600061055d82610389565b915061056883610389565b92508282019050808211156105805761057f6104ef565b5b9291505056fea264697066735822122089e1274887e75feec42382849d3a4244f0bc3cba20eba3ea86c75c418b67ef8164736f6c63430008180033","sourceMap":"1564:1003:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1217:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2449:116;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1824:415;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1217:26;;;;:::o;2449:116::-;2514:15;2544:8;:16;2553:6;2544:16;;;;;;;;;;;;;;;;2537:23;;2449:116;;;:::o;1824:415::-;1904:4;1939:1;1924:17;;:3;:17;;;1916:26;;;;;;1965:1;1956:6;:10;:44;;;;;1980:8;:20;1989:10;1980:20;;;;;;;;;;;;;;;;1970:6;:30;;1956:44;1948:53;;;;;;2094:32;2119:6;2094:8;:20;2103:10;2094:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;2071:8;:20;2080:10;2071:20;;;;;;;;;;;;;;;:55;;;;2148:25;2166:6;2148:8;:13;2157:3;2148:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2132:8;:13;2141:3;2132:13;;;;;;;;;;;;;;;:41;;;;2205:3;2184:33;;2193:10;2184:33;;;2210:6;2184:33;;;;;;:::i;:::-;;;;;;;;2230:4;2223:11;;1824:415;;;;:::o;807:111::-;865:7;893:1;888;:6;;880:15;;;;;;912:1;908;:5;;;;:::i;:::-;901:12;;807:111;;;;:::o;922:130::-;980:7;995:9;1011:1;1007;:5;;;;:::i;:::-;995:17;;1031:1;1026;:6;;1018:15;;;;;;1046:1;1039:8;;;922:130;;;;:::o;7:77:1:-;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;523:117::-;632:1;629;622:12;769:126;806:7;846:42;839:5;835:54;824:65;;769:126;;;:::o;901:96::-;938:7;967:24;985:5;967:24;:::i;:::-;956:35;;901:96;;;:::o;1003:122::-;1076:24;1094:5;1076:24;:::i;:::-;1069:5;1066:35;1056:63;;1115:1;1112;1105:12;1056:63;1003:122;:::o;1131:139::-;1177:5;1215:6;1202:20;1193:29;;1231:33;1258:5;1231:33;:::i;:::-;1131:139;;;;:::o;1276:329::-;1335:6;1384:2;1372:9;1363:7;1359:23;1355:32;1352:119;;;1390:79;;:::i;:::-;1352:119;1510:1;1535:53;1580:7;1571:6;1560:9;1556:22;1535:53;:::i;:::-;1525:63;;1481:117;1276:329;;;;:::o;1611:122::-;1684:24;1702:5;1684:24;:::i;:::-;1677:5;1674:35;1664:63;;1723:1;1720;1713:12;1664:63;1611:122;:::o;1739:139::-;1785:5;1823:6;1810:20;1801:29;;1839:33;1866:5;1839:33;:::i;:::-;1739:139;;;;:::o;1884:474::-;1952:6;1960;2009:2;1997:9;1988:7;1984:23;1980:32;1977:119;;;2015:79;;:::i;:::-;1977:119;2135:1;2160:53;2205:7;2196:6;2185:9;2181:22;2160:53;:::i;:::-;2150:63;;2106:117;2262:2;2288:53;2333:7;2324:6;2313:9;2309:22;2288:53;:::i;:::-;2278:63;;2233:118;1884:474;;;;;:::o;2364:90::-;2398:7;2441:5;2434:13;2427:21;2416:32;;2364:90;;;:::o;2460:109::-;2541:21;2556:5;2541:21;:::i;:::-;2536:3;2529:34;2460:109;;:::o;2575:210::-;2662:4;2700:2;2689:9;2685:18;2677:26;;2713:65;2775:1;2764:9;2760:17;2751:6;2713:65;:::i;:::-;2575:210;;;;:::o;2791:180::-;2839:77;2836:1;2829:88;2936:4;2933:1;2926:15;2960:4;2957:1;2950:15;2977:194;3017:4;3037:20;3055:1;3037:20;:::i;:::-;3032:25;;3071:20;3089:1;3071:20;:::i;:::-;3066:25;;3115:1;3112;3108:9;3100:17;;3139:1;3133:4;3130:11;3127:37;;;3144:18;;:::i;:::-;3127:37;2977:194;;;;:::o;3177:191::-;3217:3;3236:20;3254:1;3236:20;:::i;:::-;3231:25;;3270:20;3288:1;3270:20;:::i;:::-;3265:25;;3313:1;3310;3306:9;3299:16;;3334:3;3331:1;3328:10;3325:36;;;3341:18;;:::i;:::-;3325:36;3177:191;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Basic version of StandardToken, with no allowances.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint256 representing the amount owned by the passed address.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}}},\"title\":\"Basic token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BecToken.sol\":\"BasicToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"BecToken.sol\":{\"content\":\"/*\\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101#bectokensol\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 268\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    require(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // require(b > 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // require(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n    return c;\\n  }\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public view virtual returns (uint256);\\n  function transfer(address to, uint256 value) public virtual returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) balances;\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[msg.sender]);\\n\\n    // SafeMath.sub will throw if there is not enough balance.\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return balance An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view override returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view virtual returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n  function approve(address spender, uint256 value) public virtual returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n  using SafeMath for uint256;\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public override virtual returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return remaining A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) onlyOwner public {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(owner, newOwner);\\n    owner = newOwner;\\n  }\\n\\n}\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    emit Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    emit Unpause();\\n  }\\n}\\n\\n/**\\n * @title Pausable token\\n *\\n * @dev StandardToken modified with pausable transfers.\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n  using SafeMath for uint256;\\n  \\n  function transfer(address _to, uint256 _value) public whenNotPaused override(BasicToken,ERC20Basic) returns (bool) {\\n    return super.transfer(_to, _value);\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.transferFrom(_from, _to, _value);\\n  }\\n\\n  function approve(address _spender, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.approve(_spender, _value);\\n  }\\n\\n  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {\\n    uint cnt = _receivers.length;\\n    // <yes> <report> ARITHMETIC\\n    uint256 amount = uint256(cnt) * _value;\\n    require(cnt > 0 && cnt <= 20);\\n    require(_value > 0 && balances[msg.sender] >= amount);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(amount);\\n    for (uint i = 0; i < cnt; i++) {\\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\\n        emit Transfer(msg.sender, _receivers[i], _value);\\n    }\\n    return true;\\n  }\\n}\\n\\n/**\\n * @title Bec Token\\n *\\n * @dev Implementation of Bec Token based on the basic standard token.\\n */\\ncontract BecToken is PausableToken {\\n    /**\\n    * Public variables of the token\\n    * The following variables are OPTIONAL vanities. One does not have to include them.\\n    * They allow one to customise the token contract & in no way influences the core functionality.\\n    * Some wallets/interfaces might not even bother to look at this information.\\n    */\\n    string public name = \\\"BeautyChain\\\";\\n    string public symbol = \\\"BEC\\\";\\n    string public version = '1.0.0';\\n    uint8 public decimals = 18;\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     */\\n    constructor() {\\n      totalSupply = 7000000000 * (10**(uint256(decimals)));\\n      balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\\n    }\\n}\\n\",\"keccak256\":\"0x0f2baaf5d47cf5ebcf6326fcea2140bfa07bf90809098b6389f2a869d5f768b7\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"BecToken":{"evm":{"deployedBytecode":{"object":"608060405234801561001057600080fd5b50600436106101005760003560e01c806370a082311161009757806395d89b411161006657806395d89b411461028d578063a9059cbb146102ab578063dd62ed3e146102db578063f2fde38b1461030b57610100565b806370a082311461020557806383f12fec146102355780638456cb59146102655780638da5cb5b1461026f57610100565b8063313ce567116100d3578063313ce567146101a15780633f4ba83a146101bf57806354fd4d50146101c95780635c975abb146101e757610100565b806306fdde0314610105578063095ea7b31461012357806318160ddd1461015357806323b872dd14610171575b600080fd5b61010d610327565b60405161011a91906113ad565b60405180910390f35b61013d60048036038101906101389190611477565b6103b5565b60405161014a91906114d2565b60405180910390f35b61015b6103e3565b60405161016891906114fc565b60405180910390f35b61018b60048036038101906101869190611517565b6103e9565b60405161019891906114d2565b60405180910390f35b6101a9610419565b6040516101b69190611586565b60405180910390f35b6101c761042c565b005b6101d16104e8565b6040516101de91906113ad565b60405180910390f35b6101ef610576565b6040516101fc91906114d2565b60405180910390f35b61021f600480360381019061021a91906115a1565b610589565b60405161022c91906114fc565b60405180910390f35b61024f600480360381019061024a9190611716565b6105d2565b60405161025c91906114d2565b60405180910390f35b61026d610878565b005b610277610935565b6040516102849190611781565b60405180910390f35b61029561095b565b6040516102a291906113ad565b60405180910390f35b6102c560048036038101906102c09190611477565b6109e9565b6040516102d291906114d2565b60405180910390f35b6102f560048036038101906102f0919061179c565b610a17565b60405161030291906114fc565b60405180910390f35b610325600480360381019061032091906115a1565b610a9e565b005b600480546103349061180b565b80601f01602080910402602001604051908101604052809291908181526020018280546103609061180b565b80156103ad5780601f10610382576101008083540402835291602001916103ad565b820191906000526020600020905b81548152906001019060200180831161039057829003601f168201915b505050505081565b6000600360149054906101000a900460ff16156103d157600080fd5b6103db8383610bf1565b905092915050565b60005481565b6000600360149054906101000a900460ff161561040557600080fd5b610410848484610ce3565b90509392505050565b600760009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048657600080fd5b600360149054906101000a900460ff1661049f57600080fd5b6000600360146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600680546104f59061180b565b80601f01602080910402602001604051908101604052809291908181526020018280546105219061180b565b801561056e5780601f106105435761010080835404028352916020019161056e565b820191906000526020600020905b81548152906001019060200180831161055157829003601f168201915b505050505081565b600360149054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360149054906101000a900460ff16156105ee57600080fd5b60008351905060008382610602919061186b565b9050600082118015610615575060148211155b61061e57600080fd5b60008411801561066d575080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b61067657600080fd5b6106c881600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110a790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060005b8281101561086b576107828560016000898581518110610731576107306118ad565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110ca90919063ffffffff16565b60016000888481518110610799576107986118ad565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581815181106107f2576107f16118ad565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8760405161085691906114fc565b60405180910390a3808060010191505061070e565b5060019250505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108d257600080fd5b600360149054906101000a900460ff16156108ec57600080fd5b6001600360146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600580546109689061180b565b80601f01602080910402602001604051908101604052809291908181526020018280546109949061180b565b80156109e15780601f106109b6576101008083540402835291602001916109e1565b820191906000526020600020905b8154815290600101906020018083116109c457829003601f168201915b505050505081565b6000600360149054906101000a900460ff1615610a0557600080fd5b610a0f83836110f2565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b3157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610cd191906114fc565b60405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d1d57600080fd5b600082118015610d6c5750600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b610d7557600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610dfe57600080fd5b610e5082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110a790919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ee582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110ca90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fb782600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110a790919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161109491906114fc565b60405180910390a3600190509392505050565b6000828211156110b657600080fd5b81836110c291906118dc565b905092915050565b60008082846110d99190611910565b9050838110156110e857600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361112c57600080fd5b60008211801561117b5750600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b61118457600080fd5b6111d682600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110a790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061126b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110ca90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161130b91906114fc565b60405180910390a36001905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561135757808201518184015260208101905061133c565b60008484015250505050565b6000601f19601f8301169050919050565b600061137f8261131d565b6113898185611328565b9350611399818560208601611339565b6113a281611363565b840191505092915050565b600060208201905081810360008301526113c78184611374565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061140e826113e3565b9050919050565b61141e81611403565b811461142957600080fd5b50565b60008135905061143b81611415565b92915050565b6000819050919050565b61145481611441565b811461145f57600080fd5b50565b6000813590506114718161144b565b92915050565b6000806040838503121561148e5761148d6113d9565b5b600061149c8582860161142c565b92505060206114ad85828601611462565b9150509250929050565b60008115159050919050565b6114cc816114b7565b82525050565b60006020820190506114e760008301846114c3565b92915050565b6114f681611441565b82525050565b600060208201905061151160008301846114ed565b92915050565b6000806000606084860312156115305761152f6113d9565b5b600061153e8682870161142c565b935050602061154f8682870161142c565b925050604061156086828701611462565b9150509250925092565b600060ff82169050919050565b6115808161156a565b82525050565b600060208201905061159b6000830184611577565b92915050565b6000602082840312156115b7576115b66113d9565b5b60006115c58482850161142c565b91505092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61160b82611363565b810181811067ffffffffffffffff8211171561162a576116296115d3565b5b80604052505050565b600061163d6113cf565b90506116498282611602565b919050565b600067ffffffffffffffff821115611669576116686115d3565b5b602082029050602081019050919050565b600080fd5b600061169261168d8461164e565b611633565b905080838252602082019050602084028301858111156116b5576116b461167a565b5b835b818110156116de57806116ca888261142c565b8452602084019350506020810190506116b7565b5050509392505050565b600082601f8301126116fd576116fc6115ce565b5b813561170d84826020860161167f565b91505092915050565b6000806040838503121561172d5761172c6113d9565b5b600083013567ffffffffffffffff81111561174b5761174a6113de565b5b611757858286016116e8565b925050602061176885828601611462565b9150509250929050565b61177b81611403565b82525050565b60006020820190506117966000830184611772565b92915050565b600080604083850312156117b3576117b26113d9565b5b60006117c18582860161142c565b92505060206117d28582860161142c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061182357607f821691505b602082108103611836576118356117dc565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061187682611441565b915061188183611441565b925082820261188f81611441565b915082820484148315176118a6576118a561183c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006118e782611441565b91506118f283611441565b925082820390508181111561190a5761190961183c565b5b92915050565b600061191b82611441565b915061192683611441565b925082820190508082111561193e5761193d61183c565b5b9291505056fea2646970667358221220bbc5553c0f1d4e6f743a03c1207ebf3e3bc44c9c4ee7cdcdc1b3009ad6f750e564736f6c63430008180033","sourceMap":"8703:775:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9064:34;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7883:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1217:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7712:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9175:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7271:92;;;:::i;:::-;;9138:31;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6680:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2449:116;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8032:565;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7099:90;;;:::i;:::-;;5734:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9104:28;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7548:160;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5374:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6318:174;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9064:34;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7883:145::-;7973:4;6849:6;;;;;;;;;;;6848:7;6840:16;;;;;;7992:31:::1;8006:8;8016:6;7992:13;:31::i;:::-;7985:38;;7883:145:::0;;;;:::o;1217:26::-;;;;:::o;7712:167::-;7817:4;6849:6;;;;;;;;;;;6848:7;6840:16;;;;;;7836:38:::1;7855:5;7862:3;7867:6;7836:18;:38::i;:::-;7829:45;;7712:167:::0;;;;;:::o;9175:26::-;;;;;;;;;;;;;:::o;7271:92::-;6138:5;;;;;;;;;;;6124:19;;:10;:19;;;6116:28;;;;;;7001:6:::1;;;;;;;;;;;6993:15;;;::::0;::::1;;7333:5:::2;7324:6;;:14;;;;;;;;;;;;;;;;;;7349:9;;;;;;;;;;7271:92::o:0;9138:31::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6680:26::-;;;;;;;;;;;;;:::o;2449:116::-;2514:15;2544:8;:16;2553:6;2544:16;;;;;;;;;;;;;;;;2537:23;;2449:116;;;:::o;8032:565::-;8130:4;6849:6;;;;;;;;;;;6848:7;6840:16;;;;;;8142:8:::1;8153:10;:17;8142:28;;8209:14;8241:6;8234:3;8226:21;;;;:::i;:::-;8209:38;;8267:1;8261:3;:7;:20;;;;;8279:2;8272:3;:9;;8261:20;8253:29;;;::::0;::::1;;8305:1;8296:6;:10;:44;;;;;8334:6;8310:8;:20;8319:10;8310:20;;;;;;;;;;;;;;;;:30;;8296:44;8288:53;;;::::0;::::1;;8371:32;8396:6;8371:8;:20;8380:10;8371:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;8348:8;:20;8357:10;8348:20;;;;;;;;;;;;;;;:55;;;;8414:6;8409:167;8430:3;8426:1;:7;8409:167;;;8476:35;8504:6;8476:8;:23;8485:10;8496:1;8485:13;;;;;;;;:::i;:::-;;;;;;;;8476:23;;;;;;;;;;;;;;;;:27;;:35;;;;:::i;:::-;8450:8;:23;8459:10;8470:1;8459:13;;;;;;;;:::i;:::-;;;;;;;;8450:23;;;;;;;;;;;;;;;:61;;;;8547:10;8558:1;8547:13;;;;;;;;:::i;:::-;;;;;;;;8526:43;;8535:10;8526:43;;;8562:6;8526:43;;;;;;:::i;:::-;;;;;;;;8435:3;;;;;;;8409:167;;;;8588:4;8581:11;;;;8032:565:::0;;;;:::o;7099:90::-;6138:5;;;;;;;;;;;6124:19;;:10;:19;;;6116:28;;;;;;6849:6:::1;;;;;;;;;;;6848:7;6840:16;;;::::0;::::1;;7162:4:::2;7153:6;;:13;;;;;;;;;;;;;;;;;;7177:7;;;;;;;;;;7099:90::o:0;5734:20::-;;;;;;;;;;;;;:::o;9104:28::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7548:160::-;7657:4;6849:6;;;;;;;;;;;6848:7;6840:16;;;;;;7676:27:::1;7691:3;7696:6;7676:14;:27::i;:::-;7669:34;;7548:160:::0;;;;:::o;5374:145::-;5457:17;5489:7;:15;5497:6;5489:15;;;;;;;;;;;;;;;:25;5505:8;5489:25;;;;;;;;;;;;;;;;5482:32;;5374:145;;;;:::o;6318:174::-;6138:5;;;;;;;;;;;6124:19;;:10;:19;;;6116:28;;;;;;6414:1:::1;6394:22;;:8;:22;;::::0;6386:31:::1;;;::::0;::::1;;6456:8;6428:37;;6449:5;;;;;;;;;;;6428:37;;;;;;;;;;;;6479:8;6471:5;;:16;;;;;;;;;;;;;;;;;;6318:174:::0;:::o;4840:205::-;4924:4;4968:6;4936:7;:19;4944:10;4936:19;;;;;;;;;;;;;;;:29;4956:8;4936:29;;;;;;;;;;;;;;;:38;;;;5006:8;4985:38;;4994:10;4985:38;;;5016:6;4985:38;;;;;;:::i;:::-;;;;;;;;5036:4;5029:11;;4840:205;;;;:::o;3742:475::-;3841:4;3876:1;3861:17;;:3;:17;;;3853:26;;;;;;3902:1;3893:6;:10;:39;;;;;3917:8;:15;3926:5;3917:15;;;;;;;;;;;;;;;;3907:6;:25;;3893:39;3885:48;;;;;;3957:7;:14;3965:5;3957:14;;;;;;;;;;;;;;;:26;3972:10;3957:26;;;;;;;;;;;;;;;;3947:6;:36;;3939:45;;;;;;4009:27;4029:6;4009:8;:15;4018:5;4009:15;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;3991:8;:15;4000:5;3991:15;;;;;;;;;;;;;;;:45;;;;4058:25;4076:6;4058:8;:13;4067:3;4058:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;4042:8;:13;4051:3;4042:13;;;;;;;;;;;;;;;:41;;;;4118:38;4149:6;4118:7;:14;4126:5;4118:14;;;;;;;;;;;;;;;:26;4133:10;4118:26;;;;;;;;;;;;;;;;:30;;:38;;;;:::i;:::-;4089:7;:14;4097:5;4089:14;;;;;;;;;;;;;;;:26;4104:10;4089:26;;;;;;;;;;;;;;;:67;;;;4183:3;4167:28;;4176:5;4167:28;;;4188:6;4167:28;;;;;;:::i;:::-;;;;;;;;4208:4;4201:11;;3742:475;;;;;:::o;807:111::-;865:7;893:1;888;:6;;880:15;;;;;;912:1;908;:5;;;;:::i;:::-;901:12;;807:111;;;;:::o;922:130::-;980:7;995:9;1011:1;1007;:5;;;;:::i;:::-;995:17;;1031:1;1026;:6;;1018:15;;;;;;1046:1;1039:8;;;922:130;;;;:::o;1824:415::-;1904:4;1939:1;1924:17;;:3;:17;;;1916:26;;;;;;1965:1;1956:6;:10;:44;;;;;1980:8;:20;1989:10;1980:20;;;;;;;;;;;;;;;;1970:6;:30;;1956:44;1948:53;;;;;;2094:32;2119:6;2094:8;:20;2103:10;2094:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;2071:8;:20;2080:10;2071:20;;;;;;;;;;;;;;;:55;;;;2148:25;2166:6;2148:8;:13;2157:3;2148:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2132:8;:13;2141:3;2132:13;;;;;;;;;;;;;;;:41;;;;2205:3;2184:33;;2193:10;2184:33;;;2210:6;2184:33;;;;;;:::i;:::-;;;;;;;;2230:4;2223:11;;1824:415;;;;:::o;7:99:1:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1349:75::-;1382:6;1415:2;1409:9;1399:19;;1349:75;:::o;1430:117::-;1539:1;1536;1529:12;1553:117;1662:1;1659;1652:12;1676:126;1713:7;1753:42;1746:5;1742:54;1731:65;;1676:126;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:122::-;1983:24;2001:5;1983:24;:::i;:::-;1976:5;1973:35;1963:63;;2022:1;2019;2012:12;1963:63;1910:122;:::o;2038:139::-;2084:5;2122:6;2109:20;2100:29;;2138:33;2165:5;2138:33;:::i;:::-;2038:139;;;;:::o;2183:77::-;2220:7;2249:5;2238:16;;2183:77;;;:::o;2266:122::-;2339:24;2357:5;2339:24;:::i;:::-;2332:5;2329:35;2319:63;;2378:1;2375;2368:12;2319:63;2266:122;:::o;2394:139::-;2440:5;2478:6;2465:20;2456:29;;2494:33;2521:5;2494:33;:::i;:::-;2394:139;;;;:::o;2539:474::-;2607:6;2615;2664:2;2652:9;2643:7;2639:23;2635:32;2632:119;;;2670:79;;:::i;:::-;2632:119;2790:1;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2761:117;2917:2;2943:53;2988:7;2979:6;2968:9;2964:22;2943:53;:::i;:::-;2933:63;;2888:118;2539:474;;;;;:::o;3019:90::-;3053:7;3096:5;3089:13;3082:21;3071:32;;3019:90;;;:::o;3115:109::-;3196:21;3211:5;3196:21;:::i;:::-;3191:3;3184:34;3115:109;;:::o;3230:210::-;3317:4;3355:2;3344:9;3340:18;3332:26;;3368:65;3430:1;3419:9;3415:17;3406:6;3368:65;:::i;:::-;3230:210;;;;:::o;3446:118::-;3533:24;3551:5;3533:24;:::i;:::-;3528:3;3521:37;3446:118;;:::o;3570:222::-;3663:4;3701:2;3690:9;3686:18;3678:26;;3714:71;3782:1;3771:9;3767:17;3758:6;3714:71;:::i;:::-;3570:222;;;;:::o;3798:619::-;3875:6;3883;3891;3940:2;3928:9;3919:7;3915:23;3911:32;3908:119;;;3946:79;;:::i;:::-;3908:119;4066:1;4091:53;4136:7;4127:6;4116:9;4112:22;4091:53;:::i;:::-;4081:63;;4037:117;4193:2;4219:53;4264:7;4255:6;4244:9;4240:22;4219:53;:::i;:::-;4209:63;;4164:118;4321:2;4347:53;4392:7;4383:6;4372:9;4368:22;4347:53;:::i;:::-;4337:63;;4292:118;3798:619;;;;;:::o;4423:86::-;4458:7;4498:4;4491:5;4487:16;4476:27;;4423:86;;;:::o;4515:112::-;4598:22;4614:5;4598:22;:::i;:::-;4593:3;4586:35;4515:112;;:::o;4633:214::-;4722:4;4760:2;4749:9;4745:18;4737:26;;4773:67;4837:1;4826:9;4822:17;4813:6;4773:67;:::i;:::-;4633:214;;;;:::o;4853:329::-;4912:6;4961:2;4949:9;4940:7;4936:23;4932:32;4929:119;;;4967:79;;:::i;:::-;4929:119;5087:1;5112:53;5157:7;5148:6;5137:9;5133:22;5112:53;:::i;:::-;5102:63;;5058:117;4853:329;;;;:::o;5188:117::-;5297:1;5294;5287:12;5311:180;5359:77;5356:1;5349:88;5456:4;5453:1;5446:15;5480:4;5477:1;5470:15;5497:281;5580:27;5602:4;5580:27;:::i;:::-;5572:6;5568:40;5710:6;5698:10;5695:22;5674:18;5662:10;5659:34;5656:62;5653:88;;;5721:18;;:::i;:::-;5653:88;5761:10;5757:2;5750:22;5540:238;5497:281;;:::o;5784:129::-;5818:6;5845:20;;:::i;:::-;5835:30;;5874:33;5902:4;5894:6;5874:33;:::i;:::-;5784:129;;;:::o;5919:311::-;5996:4;6086:18;6078:6;6075:30;6072:56;;;6108:18;;:::i;:::-;6072:56;6158:4;6150:6;6146:17;6138:25;;6218:4;6212;6208:15;6200:23;;5919:311;;;:::o;6236:117::-;6345:1;6342;6335:12;6376:710;6472:5;6497:81;6513:64;6570:6;6513:64;:::i;:::-;6497:81;:::i;:::-;6488:90;;6598:5;6627:6;6620:5;6613:21;6661:4;6654:5;6650:16;6643:23;;6714:4;6706:6;6702:17;6694:6;6690:30;6743:3;6735:6;6732:15;6729:122;;;6762:79;;:::i;:::-;6729:122;6877:6;6860:220;6894:6;6889:3;6886:15;6860:220;;;6969:3;6998:37;7031:3;7019:10;6998:37;:::i;:::-;6993:3;6986:50;7065:4;7060:3;7056:14;7049:21;;6936:144;6920:4;6915:3;6911:14;6904:21;;6860:220;;;6864:21;6478:608;;6376:710;;;;;:::o;7109:370::-;7180:5;7229:3;7222:4;7214:6;7210:17;7206:27;7196:122;;7237:79;;:::i;:::-;7196:122;7354:6;7341:20;7379:94;7469:3;7461:6;7454:4;7446:6;7442:17;7379:94;:::i;:::-;7370:103;;7186:293;7109:370;;;;:::o;7485:684::-;7578:6;7586;7635:2;7623:9;7614:7;7610:23;7606:32;7603:119;;;7641:79;;:::i;:::-;7603:119;7789:1;7778:9;7774:17;7761:31;7819:18;7811:6;7808:30;7805:117;;;7841:79;;:::i;:::-;7805:117;7946:78;8016:7;8007:6;7996:9;7992:22;7946:78;:::i;:::-;7936:88;;7732:302;8073:2;8099:53;8144:7;8135:6;8124:9;8120:22;8099:53;:::i;:::-;8089:63;;8044:118;7485:684;;;;;:::o;8175:118::-;8262:24;8280:5;8262:24;:::i;:::-;8257:3;8250:37;8175:118;;:::o;8299:222::-;8392:4;8430:2;8419:9;8415:18;8407:26;;8443:71;8511:1;8500:9;8496:17;8487:6;8443:71;:::i;:::-;8299:222;;;;:::o;8527:474::-;8595:6;8603;8652:2;8640:9;8631:7;8627:23;8623:32;8620:119;;;8658:79;;:::i;:::-;8620:119;8778:1;8803:53;8848:7;8839:6;8828:9;8824:22;8803:53;:::i;:::-;8793:63;;8749:117;8905:2;8931:53;8976:7;8967:6;8956:9;8952:22;8931:53;:::i;:::-;8921:63;;8876:118;8527:474;;;;;:::o;9007:180::-;9055:77;9052:1;9045:88;9152:4;9149:1;9142:15;9176:4;9173:1;9166:15;9193:320;9237:6;9274:1;9268:4;9264:12;9254:22;;9321:1;9315:4;9311:12;9342:18;9332:81;;9398:4;9390:6;9386:17;9376:27;;9332:81;9460:2;9452:6;9449:14;9429:18;9426:38;9423:84;;9479:18;;:::i;:::-;9423:84;9244:269;9193:320;;;:::o;9519:180::-;9567:77;9564:1;9557:88;9664:4;9661:1;9654:15;9688:4;9685:1;9678:15;9705:410;9745:7;9768:20;9786:1;9768:20;:::i;:::-;9763:25;;9802:20;9820:1;9802:20;:::i;:::-;9797:25;;9857:1;9854;9850:9;9879:30;9897:11;9879:30;:::i;:::-;9868:41;;10058:1;10049:7;10045:15;10042:1;10039:22;10019:1;10012:9;9992:83;9969:139;;10088:18;;:::i;:::-;9969:139;9753:362;9705:410;;;;:::o;10121:180::-;10169:77;10166:1;10159:88;10266:4;10263:1;10256:15;10290:4;10287:1;10280:15;10307:194;10347:4;10367:20;10385:1;10367:20;:::i;:::-;10362:25;;10401:20;10419:1;10401:20;:::i;:::-;10396:25;;10445:1;10442;10438:9;10430:17;;10469:1;10463:4;10460:11;10457:37;;;10474:18;;:::i;:::-;10457:37;10307:194;;;;:::o;10507:191::-;10547:3;10566:20;10584:1;10566:20;:::i;:::-;10561:25;;10600:20;10618:1;10600:20;:::i;:::-;10595:25;;10643:1;10640;10636:9;10629:16;;10664:3;10661:1;10658:10;10655:36;;;10671:18;;:::i;:::-;10655:36;10507:191;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of Bec Token based on the basic standard token.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"remaining\":\"A uint256 specifying the amount of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint256 representing the amount owned by the passed address.\"}},\"constructor\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\"},\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amount of tokens to be transferred\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"}},\"title\":\"Bec Token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name()\":{\"notice\":\"Public variables of the token The following variables are OPTIONAL vanities. One does not have to include them. They allow one to customise the token contract & in no way influences the core functionality. Some wallets/interfaces might not even bother to look at this information.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BecToken.sol\":\"BecToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"BecToken.sol\":{\"content\":\"/*\\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101#bectokensol\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 268\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    require(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // require(b > 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // require(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n    return c;\\n  }\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public view virtual returns (uint256);\\n  function transfer(address to, uint256 value) public virtual returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) balances;\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[msg.sender]);\\n\\n    // SafeMath.sub will throw if there is not enough balance.\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return balance An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view override returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view virtual returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n  function approve(address spender, uint256 value) public virtual returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n  using SafeMath for uint256;\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public override virtual returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return remaining A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) onlyOwner public {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(owner, newOwner);\\n    owner = newOwner;\\n  }\\n\\n}\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    emit Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    emit Unpause();\\n  }\\n}\\n\\n/**\\n * @title Pausable token\\n *\\n * @dev StandardToken modified with pausable transfers.\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n  using SafeMath for uint256;\\n  \\n  function transfer(address _to, uint256 _value) public whenNotPaused override(BasicToken,ERC20Basic) returns (bool) {\\n    return super.transfer(_to, _value);\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.transferFrom(_from, _to, _value);\\n  }\\n\\n  function approve(address _spender, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.approve(_spender, _value);\\n  }\\n\\n  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {\\n    uint cnt = _receivers.length;\\n    // <yes> <report> ARITHMETIC\\n    uint256 amount = uint256(cnt) * _value;\\n    require(cnt > 0 && cnt <= 20);\\n    require(_value > 0 && balances[msg.sender] >= amount);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(amount);\\n    for (uint i = 0; i < cnt; i++) {\\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\\n        emit Transfer(msg.sender, _receivers[i], _value);\\n    }\\n    return true;\\n  }\\n}\\n\\n/**\\n * @title Bec Token\\n *\\n * @dev Implementation of Bec Token based on the basic standard token.\\n */\\ncontract BecToken is PausableToken {\\n    /**\\n    * Public variables of the token\\n    * The following variables are OPTIONAL vanities. One does not have to include them.\\n    * They allow one to customise the token contract & in no way influences the core functionality.\\n    * Some wallets/interfaces might not even bother to look at this information.\\n    */\\n    string public name = \\\"BeautyChain\\\";\\n    string public symbol = \\\"BEC\\\";\\n    string public version = '1.0.0';\\n    uint8 public decimals = 18;\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     */\\n    constructor() {\\n      totalSupply = 7000000000 * (10**(uint256(decimals)));\\n      balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\\n    }\\n}\\n\",\"keccak256\":\"0x0f2baaf5d47cf5ebcf6326fcea2140bfa07bf90809098b6389f2a869d5f768b7\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"ERC20":{"evm":{"deployedBytecode":{"object":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"see https://github.com/ethereum/EIPs/issues/20\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC20 interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BecToken.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"BecToken.sol\":{\"content\":\"/*\\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101#bectokensol\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 268\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    require(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // require(b > 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // require(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n    return c;\\n  }\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public view virtual returns (uint256);\\n  function transfer(address to, uint256 value) public virtual returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) balances;\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[msg.sender]);\\n\\n    // SafeMath.sub will throw if there is not enough balance.\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return balance An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view override returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view virtual returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n  function approve(address spender, uint256 value) public virtual returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n  using SafeMath for uint256;\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public override virtual returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return remaining A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) onlyOwner public {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(owner, newOwner);\\n    owner = newOwner;\\n  }\\n\\n}\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    emit Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    emit Unpause();\\n  }\\n}\\n\\n/**\\n * @title Pausable token\\n *\\n * @dev StandardToken modified with pausable transfers.\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n  using SafeMath for uint256;\\n  \\n  function transfer(address _to, uint256 _value) public whenNotPaused override(BasicToken,ERC20Basic) returns (bool) {\\n    return super.transfer(_to, _value);\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.transferFrom(_from, _to, _value);\\n  }\\n\\n  function approve(address _spender, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.approve(_spender, _value);\\n  }\\n\\n  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {\\n    uint cnt = _receivers.length;\\n    // <yes> <report> ARITHMETIC\\n    uint256 amount = uint256(cnt) * _value;\\n    require(cnt > 0 && cnt <= 20);\\n    require(_value > 0 && balances[msg.sender] >= amount);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(amount);\\n    for (uint i = 0; i < cnt; i++) {\\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\\n        emit Transfer(msg.sender, _receivers[i], _value);\\n    }\\n    return true;\\n  }\\n}\\n\\n/**\\n * @title Bec Token\\n *\\n * @dev Implementation of Bec Token based on the basic standard token.\\n */\\ncontract BecToken is PausableToken {\\n    /**\\n    * Public variables of the token\\n    * The following variables are OPTIONAL vanities. One does not have to include them.\\n    * They allow one to customise the token contract & in no way influences the core functionality.\\n    * Some wallets/interfaces might not even bother to look at this information.\\n    */\\n    string public name = \\\"BeautyChain\\\";\\n    string public symbol = \\\"BEC\\\";\\n    string public version = '1.0.0';\\n    uint8 public decimals = 18;\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     */\\n    constructor() {\\n      totalSupply = 7000000000 * (10**(uint256(decimals)));\\n      balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\\n    }\\n}\\n\",\"keccak256\":\"0x0f2baaf5d47cf5ebcf6326fcea2140bfa07bf90809098b6389f2a869d5f768b7\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"ERC20Basic":{"evm":{"deployedBytecode":{"object":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Simpler version of ERC20 interfacesee https://github.com/ethereum/EIPs/issues/179\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC20Basic\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BecToken.sol\":\"ERC20Basic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"BecToken.sol\":{\"content\":\"/*\\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101#bectokensol\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 268\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    require(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // require(b > 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // require(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n    return c;\\n  }\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public view virtual returns (uint256);\\n  function transfer(address to, uint256 value) public virtual returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) balances;\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[msg.sender]);\\n\\n    // SafeMath.sub will throw if there is not enough balance.\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return balance An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view override returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view virtual returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n  function approve(address spender, uint256 value) public virtual returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n  using SafeMath for uint256;\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public override virtual returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return remaining A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) onlyOwner public {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(owner, newOwner);\\n    owner = newOwner;\\n  }\\n\\n}\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    emit Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    emit Unpause();\\n  }\\n}\\n\\n/**\\n * @title Pausable token\\n *\\n * @dev StandardToken modified with pausable transfers.\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n  using SafeMath for uint256;\\n  \\n  function transfer(address _to, uint256 _value) public whenNotPaused override(BasicToken,ERC20Basic) returns (bool) {\\n    return super.transfer(_to, _value);\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.transferFrom(_from, _to, _value);\\n  }\\n\\n  function approve(address _spender, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.approve(_spender, _value);\\n  }\\n\\n  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {\\n    uint cnt = _receivers.length;\\n    // <yes> <report> ARITHMETIC\\n    uint256 amount = uint256(cnt) * _value;\\n    require(cnt > 0 && cnt <= 20);\\n    require(_value > 0 && balances[msg.sender] >= amount);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(amount);\\n    for (uint i = 0; i < cnt; i++) {\\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\\n        emit Transfer(msg.sender, _receivers[i], _value);\\n    }\\n    return true;\\n  }\\n}\\n\\n/**\\n * @title Bec Token\\n *\\n * @dev Implementation of Bec Token based on the basic standard token.\\n */\\ncontract BecToken is PausableToken {\\n    /**\\n    * Public variables of the token\\n    * The following variables are OPTIONAL vanities. One does not have to include them.\\n    * They allow one to customise the token contract & in no way influences the core functionality.\\n    * Some wallets/interfaces might not even bother to look at this information.\\n    */\\n    string public name = \\\"BeautyChain\\\";\\n    string public symbol = \\\"BEC\\\";\\n    string public version = '1.0.0';\\n    uint8 public decimals = 18;\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     */\\n    constructor() {\\n      totalSupply = 7000000000 * (10**(uint256(decimals)));\\n      balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\\n    }\\n}\\n\",\"keccak256\":\"0x0f2baaf5d47cf5ebcf6326fcea2140bfa07bf90809098b6389f2a869d5f768b7\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"Ownable":{"evm":{"deployedBytecode":{"object":"608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b14610059575b600080fd5b610043610075565b6040516100509190610228565b60405180910390f35b610073600480360381019061006e9190610274565b610099565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100f157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361012a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610212826101e7565b9050919050565b61022281610207565b82525050565b600060208201905061023d6000830184610219565b92915050565b600080fd5b61025181610207565b811461025c57600080fd5b50565b60008135905061026e81610248565b92915050565b60006020828403121561028a57610289610243565b5b60006102988482850161025f565b9150509291505056fea26469706673582212204a1a27ec78d25d1d385a5e2398a0655cafb393df663fd28f9e2fe9979e43955f64736f6c63430008180033","sourceMap":"5713:782:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5734:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6318:174;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5734:20;;;;;;;;;;;;:::o;6318:174::-;6138:5;;;;;;;;;;6124:19;;:10;:19;;;6116:28;;;;;;6414:1:::1;6394:22;;:8;:22;;::::0;6386:31:::1;;;::::0;::::1;;6456:8;6428:37;;6449:5;::::0;::::1;;;;;;;;6428:37;;;;;;;;;;;;6479:8;6471:5;::::0;:16:::1;;;;;;;;;;;;;;;;;;6318:174:::0;:::o;7:126:1:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;674:117::-;783:1;780;773:12;920:122;993:24;1011:5;993:24;:::i;:::-;986:5;983:35;973:63;;1032:1;1029;1022:12;973:63;920:122;:::o;1048:139::-;1094:5;1132:6;1119:20;1110:29;;1148:33;1175:5;1148:33;:::i;:::-;1048:139;;;;:::o;1193:329::-;1252:6;1301:2;1289:9;1280:7;1276:23;1272:32;1269:119;;;1307:79;;:::i;:::-;1269:119;1427:1;1452:53;1497:7;1488:6;1477:9;1473:22;1452:53;:::i;:::-;1442:63;;1398:117;1193:329;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The Ownable contract has an owner address, and provides basic authorization control functions, this simplifies the implementation of \\\"user permissions\\\".\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"The Ownable constructor sets the original `owner` of the contract to the sender account.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}},\"title\":\"Ownable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BecToken.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"BecToken.sol\":{\"content\":\"/*\\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101#bectokensol\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 268\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    require(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // require(b > 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // require(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n    return c;\\n  }\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public view virtual returns (uint256);\\n  function transfer(address to, uint256 value) public virtual returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) balances;\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[msg.sender]);\\n\\n    // SafeMath.sub will throw if there is not enough balance.\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return balance An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view override returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view virtual returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n  function approve(address spender, uint256 value) public virtual returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n  using SafeMath for uint256;\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public override virtual returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return remaining A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) onlyOwner public {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(owner, newOwner);\\n    owner = newOwner;\\n  }\\n\\n}\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    emit Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    emit Unpause();\\n  }\\n}\\n\\n/**\\n * @title Pausable token\\n *\\n * @dev StandardToken modified with pausable transfers.\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n  using SafeMath for uint256;\\n  \\n  function transfer(address _to, uint256 _value) public whenNotPaused override(BasicToken,ERC20Basic) returns (bool) {\\n    return super.transfer(_to, _value);\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.transferFrom(_from, _to, _value);\\n  }\\n\\n  function approve(address _spender, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.approve(_spender, _value);\\n  }\\n\\n  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {\\n    uint cnt = _receivers.length;\\n    // <yes> <report> ARITHMETIC\\n    uint256 amount = uint256(cnt) * _value;\\n    require(cnt > 0 && cnt <= 20);\\n    require(_value > 0 && balances[msg.sender] >= amount);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(amount);\\n    for (uint i = 0; i < cnt; i++) {\\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\\n        emit Transfer(msg.sender, _receivers[i], _value);\\n    }\\n    return true;\\n  }\\n}\\n\\n/**\\n * @title Bec Token\\n *\\n * @dev Implementation of Bec Token based on the basic standard token.\\n */\\ncontract BecToken is PausableToken {\\n    /**\\n    * Public variables of the token\\n    * The following variables are OPTIONAL vanities. One does not have to include them.\\n    * They allow one to customise the token contract & in no way influences the core functionality.\\n    * Some wallets/interfaces might not even bother to look at this information.\\n    */\\n    string public name = \\\"BeautyChain\\\";\\n    string public symbol = \\\"BEC\\\";\\n    string public version = '1.0.0';\\n    uint8 public decimals = 18;\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     */\\n    constructor() {\\n      totalSupply = 7000000000 * (10**(uint256(decimals)));\\n      balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\\n    }\\n}\\n\",\"keccak256\":\"0x0f2baaf5d47cf5ebcf6326fcea2140bfa07bf90809098b6389f2a869d5f768b7\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"Pausable":{"evm":{"deployedBytecode":{"object":"608060405234801561001057600080fd5b50600436106100575760003560e01c80633f4ba83a1461005c5780635c975abb146100665780638456cb59146100845780638da5cb5b1461008e578063f2fde38b146100ac575b600080fd5b6100646100c8565b005b61006e610181565b60405161007b91906103dc565b60405180910390f35b61008c610194565b005b61009661024f565b6040516100a39190610438565b60405180910390f35b6100c660048036038101906100c19190610484565b610273565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461012057600080fd5b600060149054906101000a900460ff1661013957600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600060149054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101ec57600080fd5b600060149054906101000a900460ff161561020657600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102cb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361030457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008115159050919050565b6103d6816103c1565b82525050565b60006020820190506103f160008301846103cd565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610422826103f7565b9050919050565b61043281610417565b82525050565b600060208201905061044d6000830184610429565b92915050565b600080fd5b61046181610417565b811461046c57600080fd5b50565b60008135905061047e81610458565b92915050565b60006020828403121561049a57610499610453565b5b60006104a88482850161046f565b9150509291505056fea26469706673582212207295abf17ac5f46bc4a6edd4c5d427b313301ef5574ab525d5812d5d9d77599c64736f6c63430008180033","sourceMap":"6610:755:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7271:92;;;:::i;:::-;;6680:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7099:90;;;:::i;:::-;;5734:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6318:174;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7271:92;6138:5;;;;;;;;;;6124:19;;:10;:19;;;6116:28;;;;;;7001:6:::1;;;;;;;;;;;6993:15;;;::::0;::::1;;7333:5:::2;7324:6:::0;::::2;:14;;;;;;;;;;;;;;;;;;7349:9;;;;;;;;;;7271:92::o:0;6680:26::-;;;;;;;;;;;;;:::o;7099:90::-;6138:5;;;;;;;;;;6124:19;;:10;:19;;;6116:28;;;;;;6849:6:::1;;;;;;;;;;;6848:7;6840:16;;;::::0;::::1;;7162:4:::2;7153:6;;:13;;;;;;;;;;;;;;;;;;7177:7;;;;;;;;;;7099:90::o:0;5734:20::-;;;;;;;;;;;;:::o;6318:174::-;6138:5;;;;;;;;;;6124:19;;:10;:19;;;6116:28;;;;;;6414:1:::1;6394:22;;:8;:22;;::::0;6386:31:::1;;;::::0;::::1;;6456:8;6428:37;;6449:5;::::0;::::1;;;;;;;;6428:37;;;;;;;;;;;;6479:8;6471:5;::::0;:16:::1;;;;;;;;;;;;;;;;;;6318:174:::0;:::o;7:90:1:-;41:7;84:5;77:13;70:21;59:32;;7:90;;;:::o;103:109::-;184:21;199:5;184:21;:::i;:::-;179:3;172:34;103:109;;:::o;218:210::-;305:4;343:2;332:9;328:18;320:26;;356:65;418:1;407:9;403:17;394:6;356:65;:::i;:::-;218:210;;;;:::o;434:126::-;471:7;511:42;504:5;500:54;489:65;;434:126;;;:::o;566:96::-;603:7;632:24;650:5;632:24;:::i;:::-;621:35;;566:96;;;:::o;668:118::-;755:24;773:5;755:24;:::i;:::-;750:3;743:37;668:118;;:::o;792:222::-;885:4;923:2;912:9;908:18;900:26;;936:71;1004:1;993:9;989:17;980:6;936:71;:::i;:::-;792:222;;;;:::o;1101:117::-;1210:1;1207;1200:12;1347:122;1420:24;1438:5;1420:24;:::i;:::-;1413:5;1410:35;1400:63;;1459:1;1456;1449:12;1400:63;1347:122;:::o;1475:139::-;1521:5;1559:6;1546:20;1537:29;;1575:33;1602:5;1575:33;:::i;:::-;1475:139;;;;:::o;1620:329::-;1679:6;1728:2;1716:9;1707:7;1703:23;1699:32;1696:119;;;1734:79;;:::i;:::-;1696:119;1854:1;1879:53;1924:7;1915:6;1904:9;1900:22;1879:53;:::i;:::-;1869:63;;1825:117;1620:329;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Base contract which allows children to implement an emergency stop mechanism.\",\"kind\":\"dev\",\"methods\":{\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"}},\"title\":\"Pausable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BecToken.sol\":\"Pausable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"BecToken.sol\":{\"content\":\"/*\\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101#bectokensol\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 268\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    require(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // require(b > 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // require(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n    return c;\\n  }\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public view virtual returns (uint256);\\n  function transfer(address to, uint256 value) public virtual returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) balances;\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[msg.sender]);\\n\\n    // SafeMath.sub will throw if there is not enough balance.\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return balance An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view override returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view virtual returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n  function approve(address spender, uint256 value) public virtual returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n  using SafeMath for uint256;\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public override virtual returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return remaining A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) onlyOwner public {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(owner, newOwner);\\n    owner = newOwner;\\n  }\\n\\n}\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    emit Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    emit Unpause();\\n  }\\n}\\n\\n/**\\n * @title Pausable token\\n *\\n * @dev StandardToken modified with pausable transfers.\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n  using SafeMath for uint256;\\n  \\n  function transfer(address _to, uint256 _value) public whenNotPaused override(BasicToken,ERC20Basic) returns (bool) {\\n    return super.transfer(_to, _value);\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.transferFrom(_from, _to, _value);\\n  }\\n\\n  function approve(address _spender, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.approve(_spender, _value);\\n  }\\n\\n  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {\\n    uint cnt = _receivers.length;\\n    // <yes> <report> ARITHMETIC\\n    uint256 amount = uint256(cnt) * _value;\\n    require(cnt > 0 && cnt <= 20);\\n    require(_value > 0 && balances[msg.sender] >= amount);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(amount);\\n    for (uint i = 0; i < cnt; i++) {\\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\\n        emit Transfer(msg.sender, _receivers[i], _value);\\n    }\\n    return true;\\n  }\\n}\\n\\n/**\\n * @title Bec Token\\n *\\n * @dev Implementation of Bec Token based on the basic standard token.\\n */\\ncontract BecToken is PausableToken {\\n    /**\\n    * Public variables of the token\\n    * The following variables are OPTIONAL vanities. One does not have to include them.\\n    * They allow one to customise the token contract & in no way influences the core functionality.\\n    * Some wallets/interfaces might not even bother to look at this information.\\n    */\\n    string public name = \\\"BeautyChain\\\";\\n    string public symbol = \\\"BEC\\\";\\n    string public version = '1.0.0';\\n    uint8 public decimals = 18;\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     */\\n    constructor() {\\n      totalSupply = 7000000000 * (10**(uint256(decimals)));\\n      balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\\n    }\\n}\\n\",\"keccak256\":\"0x0f2baaf5d47cf5ebcf6326fcea2140bfa07bf90809098b6389f2a869d5f768b7\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"PausableToken":{"evm":{"deployedBytecode":{"object":"608060405234801561001057600080fd5b50600436106100b45760003560e01c806383f12fec1161007157806383f12fec1461018f5780638456cb59146101bf5780638da5cb5b146101c9578063a9059cbb146101e7578063dd62ed3e14610217578063f2fde38b14610247576100b4565b8063095ea7b3146100b957806318160ddd146100e957806323b872dd146101075780633f4ba83a146101375780635c975abb1461014157806370a082311461015f575b600080fd5b6100d360048036038101906100ce9190611144565b610263565b6040516100e0919061119f565b60405180910390f35b6100f1610291565b6040516100fe91906111c9565b60405180910390f35b610121600480360381019061011c91906111e4565b610297565b60405161012e919061119f565b60405180910390f35b61013f6102c7565b005b610149610383565b604051610156919061119f565b60405180910390f35b61017960048036038101906101749190611237565b610396565b60405161018691906111c9565b60405180910390f35b6101a960048036038101906101a491906113bd565b6103df565b6040516101b6919061119f565b60405180910390f35b6101c7610685565b005b6101d1610742565b6040516101de9190611428565b60405180910390f35b61020160048036038101906101fc9190611144565b610768565b60405161020e919061119f565b60405180910390f35b610231600480360381019061022c9190611443565b610796565b60405161023e91906111c9565b60405180910390f35b610261600480360381019061025c9190611237565b61081d565b005b6000600360149054906101000a900460ff161561027f57600080fd5b6102898383610970565b905092915050565b60005481565b6000600360149054906101000a900460ff16156102b357600080fd5b6102be848484610a62565b90509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461032157600080fd5b600360149054906101000a900460ff1661033a57600080fd5b6000600360146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600360149054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360149054906101000a900460ff16156103fb57600080fd5b6000835190506000838261040f91906114b2565b9050600082118015610422575060148211155b61042b57600080fd5b60008411801561047a575080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b61048357600080fd5b6104d581600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e2690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060005b828110156106785761058f856001600089858151811061053e5761053d6114f4565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e4990919063ffffffff16565b600160008884815181106105a6576105a56114f4565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581815181106105ff576105fe6114f4565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8760405161066391906111c9565b60405180910390a3808060010191505061051b565b5060019250505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106df57600080fd5b600360149054906101000a900460ff16156106f957600080fd5b6001600360146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360149054906101000a900460ff161561078457600080fd5b61078e8383610e71565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108b057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610a5091906111c9565b60405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a9c57600080fd5b600082118015610aeb5750600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b610af457600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610b7d57600080fd5b610bcf82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e2690919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c6482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e4990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d3682600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e2690919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e1391906111c9565b60405180910390a3600190509392505050565b600082821115610e3557600080fd5b8183610e419190611523565b905092915050565b6000808284610e589190611557565b905083811015610e6757600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610eab57600080fd5b600082118015610efa5750600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b610f0357600080fd5b610f5582600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e2690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fea82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e4990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161108a91906111c9565b60405180910390a36001905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110db826110b0565b9050919050565b6110eb816110d0565b81146110f657600080fd5b50565b600081359050611108816110e2565b92915050565b6000819050919050565b6111218161110e565b811461112c57600080fd5b50565b60008135905061113e81611118565b92915050565b6000806040838503121561115b5761115a6110a6565b5b6000611169858286016110f9565b925050602061117a8582860161112f565b9150509250929050565b60008115159050919050565b61119981611184565b82525050565b60006020820190506111b46000830184611190565b92915050565b6111c38161110e565b82525050565b60006020820190506111de60008301846111ba565b92915050565b6000806000606084860312156111fd576111fc6110a6565b5b600061120b868287016110f9565b935050602061121c868287016110f9565b925050604061122d8682870161112f565b9150509250925092565b60006020828403121561124d5761124c6110a6565b5b600061125b848285016110f9565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112b282611269565b810181811067ffffffffffffffff821117156112d1576112d061127a565b5b80604052505050565b60006112e461109c565b90506112f082826112a9565b919050565b600067ffffffffffffffff8211156113105761130f61127a565b5b602082029050602081019050919050565b600080fd5b6000611339611334846112f5565b6112da565b9050808382526020820190506020840283018581111561135c5761135b611321565b5b835b81811015611385578061137188826110f9565b84526020840193505060208101905061135e565b5050509392505050565b600082601f8301126113a4576113a3611264565b5b81356113b4848260208601611326565b91505092915050565b600080604083850312156113d4576113d36110a6565b5b600083013567ffffffffffffffff8111156113f2576113f16110ab565b5b6113fe8582860161138f565b925050602061140f8582860161112f565b9150509250929050565b611422816110d0565b82525050565b600060208201905061143d6000830184611419565b92915050565b6000806040838503121561145a576114596110a6565b5b6000611468858286016110f9565b9250506020611479858286016110f9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114bd8261110e565b91506114c88361110e565b92508282026114d68161110e565b915082820484148315176114ed576114ec611483565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061152e8261110e565b91506115398361110e565b925082820390508181111561155157611550611483565b5b92915050565b60006115628261110e565b915061156d8361110e565b925082820190508082111561158557611584611483565b5b9291505056fea26469706673582212208768e14ecfdacfcb66ac39bfeb3acd43b9e28c2affc37fd2286322bba784796c64736f6c63430008180033","sourceMap":"7461:1138:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7883:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1217:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7712:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7271:92;;;:::i;:::-;;6680:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2449:116;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8032:565;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7099:90;;;:::i;:::-;;5734:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7548:160;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5374:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6318:174;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7883:145;7973:4;6849:6;;;;;;;;;;;6848:7;6840:16;;;;;;7992:31:::1;8006:8;8016:6;7992:13;:31::i;:::-;7985:38;;7883:145:::0;;;;:::o;1217:26::-;;;;:::o;7712:167::-;7817:4;6849:6;;;;;;;;;;;6848:7;6840:16;;;;;;7836:38:::1;7855:5;7862:3;7867:6;7836:18;:38::i;:::-;7829:45;;7712:167:::0;;;;;:::o;7271:92::-;6138:5;;;;;;;;;;;6124:19;;:10;:19;;;6116:28;;;;;;7001:6:::1;;;;;;;;;;;6993:15;;;::::0;::::1;;7333:5:::2;7324:6;;:14;;;;;;;;;;;;;;;;;;7349:9;;;;;;;;;;7271:92::o:0;6680:26::-;;;;;;;;;;;;;:::o;2449:116::-;2514:15;2544:8;:16;2553:6;2544:16;;;;;;;;;;;;;;;;2537:23;;2449:116;;;:::o;8032:565::-;8130:4;6849:6;;;;;;;;;;;6848:7;6840:16;;;;;;8142:8:::1;8153:10;:17;8142:28;;8209:14;8241:6;8234:3;8226:21;;;;:::i;:::-;8209:38;;8267:1;8261:3;:7;:20;;;;;8279:2;8272:3;:9;;8261:20;8253:29;;;::::0;::::1;;8305:1;8296:6;:10;:44;;;;;8334:6;8310:8;:20;8319:10;8310:20;;;;;;;;;;;;;;;;:30;;8296:44;8288:53;;;::::0;::::1;;8371:32;8396:6;8371:8;:20;8380:10;8371:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;8348:8;:20;8357:10;8348:20;;;;;;;;;;;;;;;:55;;;;8414:6;8409:167;8430:3;8426:1;:7;8409:167;;;8476:35;8504:6;8476:8;:23;8485:10;8496:1;8485:13;;;;;;;;:::i;:::-;;;;;;;;8476:23;;;;;;;;;;;;;;;;:27;;:35;;;;:::i;:::-;8450:8;:23;8459:10;8470:1;8459:13;;;;;;;;:::i;:::-;;;;;;;;8450:23;;;;;;;;;;;;;;;:61;;;;8547:10;8558:1;8547:13;;;;;;;;:::i;:::-;;;;;;;;8526:43;;8535:10;8526:43;;;8562:6;8526:43;;;;;;:::i;:::-;;;;;;;;8435:3;;;;;;;8409:167;;;;8588:4;8581:11;;;;8032:565:::0;;;;:::o;7099:90::-;6138:5;;;;;;;;;;;6124:19;;:10;:19;;;6116:28;;;;;;6849:6:::1;;;;;;;;;;;6848:7;6840:16;;;::::0;::::1;;7162:4:::2;7153:6;;:13;;;;;;;;;;;;;;;;;;7177:7;;;;;;;;;;7099:90::o:0;5734:20::-;;;;;;;;;;;;;:::o;7548:160::-;7657:4;6849:6;;;;;;;;;;;6848:7;6840:16;;;;;;7676:27:::1;7691:3;7696:6;7676:14;:27::i;:::-;7669:34;;7548:160:::0;;;;:::o;5374:145::-;5457:17;5489:7;:15;5497:6;5489:15;;;;;;;;;;;;;;;:25;5505:8;5489:25;;;;;;;;;;;;;;;;5482:32;;5374:145;;;;:::o;6318:174::-;6138:5;;;;;;;;;;;6124:19;;:10;:19;;;6116:28;;;;;;6414:1:::1;6394:22;;:8;:22;;::::0;6386:31:::1;;;::::0;::::1;;6456:8;6428:37;;6449:5;;;;;;;;;;;6428:37;;;;;;;;;;;;6479:8;6471:5;;:16;;;;;;;;;;;;;;;;;;6318:174:::0;:::o;4840:205::-;4924:4;4968:6;4936:7;:19;4944:10;4936:19;;;;;;;;;;;;;;;:29;4956:8;4936:29;;;;;;;;;;;;;;;:38;;;;5006:8;4985:38;;4994:10;4985:38;;;5016:6;4985:38;;;;;;:::i;:::-;;;;;;;;5036:4;5029:11;;4840:205;;;;:::o;3742:475::-;3841:4;3876:1;3861:17;;:3;:17;;;3853:26;;;;;;3902:1;3893:6;:10;:39;;;;;3917:8;:15;3926:5;3917:15;;;;;;;;;;;;;;;;3907:6;:25;;3893:39;3885:48;;;;;;3957:7;:14;3965:5;3957:14;;;;;;;;;;;;;;;:26;3972:10;3957:26;;;;;;;;;;;;;;;;3947:6;:36;;3939:45;;;;;;4009:27;4029:6;4009:8;:15;4018:5;4009:15;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;3991:8;:15;4000:5;3991:15;;;;;;;;;;;;;;;:45;;;;4058:25;4076:6;4058:8;:13;4067:3;4058:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;4042:8;:13;4051:3;4042:13;;;;;;;;;;;;;;;:41;;;;4118:38;4149:6;4118:7;:14;4126:5;4118:14;;;;;;;;;;;;;;;:26;4133:10;4118:26;;;;;;;;;;;;;;;;:30;;:38;;;;:::i;:::-;4089:7;:14;4097:5;4089:14;;;;;;;;;;;;;;;:26;4104:10;4089:26;;;;;;;;;;;;;;;:67;;;;4183:3;4167:28;;4176:5;4167:28;;;4188:6;4167:28;;;;;;:::i;:::-;;;;;;;;4208:4;4201:11;;3742:475;;;;;:::o;807:111::-;865:7;893:1;888;:6;;880:15;;;;;;912:1;908;:5;;;;:::i;:::-;901:12;;807:111;;;;:::o;922:130::-;980:7;995:9;1011:1;1007;:5;;;;:::i;:::-;995:17;;1031:1;1026;:6;;1018:15;;;;;;1046:1;1039:8;;;922:130;;;;:::o;1824:415::-;1904:4;1939:1;1924:17;;:3;:17;;;1916:26;;;;;;1965:1;1956:6;:10;:44;;;;;1980:8;:20;1989:10;1980:20;;;;;;;;;;;;;;;;1970:6;:30;;1956:44;1948:53;;;;;;2094:32;2119:6;2094:8;:20;2103:10;2094:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;2071:8;:20;2080:10;2071:20;;;;;;;;;;;;;;;:55;;;;2148:25;2166:6;2148:8;:13;2157:3;2148:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2132:8;:13;2141:3;2132:13;;;;;;;;;;;;;;;:41;;;;2205:3;2184:33;;2193:10;2184:33;;;2210:6;2184:33;;;;;;:::i;:::-;;;;;;;;2230:4;2223:11;;1824:415;;;;:::o;7:75:1:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:90::-;1711:7;1754:5;1747:13;1740:21;1729:32;;1677:90;;;:::o;1773:109::-;1854:21;1869:5;1854:21;:::i;:::-;1849:3;1842:34;1773:109;;:::o;1888:210::-;1975:4;2013:2;2002:9;1998:18;1990:26;;2026:65;2088:1;2077:9;2073:17;2064:6;2026:65;:::i;:::-;1888:210;;;;:::o;2104:118::-;2191:24;2209:5;2191:24;:::i;:::-;2186:3;2179:37;2104:118;;:::o;2228:222::-;2321:4;2359:2;2348:9;2344:18;2336:26;;2372:71;2440:1;2429:9;2425:17;2416:6;2372:71;:::i;:::-;2228:222;;;;:::o;2456:619::-;2533:6;2541;2549;2598:2;2586:9;2577:7;2573:23;2569:32;2566:119;;;2604:79;;:::i;:::-;2566:119;2724:1;2749:53;2794:7;2785:6;2774:9;2770:22;2749:53;:::i;:::-;2739:63;;2695:117;2851:2;2877:53;2922:7;2913:6;2902:9;2898:22;2877:53;:::i;:::-;2867:63;;2822:118;2979:2;3005:53;3050:7;3041:6;3030:9;3026:22;3005:53;:::i;:::-;2995:63;;2950:118;2456:619;;;;;:::o;3081:329::-;3140:6;3189:2;3177:9;3168:7;3164:23;3160:32;3157:119;;;3195:79;;:::i;:::-;3157:119;3315:1;3340:53;3385:7;3376:6;3365:9;3361:22;3340:53;:::i;:::-;3330:63;;3286:117;3081:329;;;;:::o;3416:117::-;3525:1;3522;3515:12;3539:102;3580:6;3631:2;3627:7;3622:2;3615:5;3611:14;3607:28;3597:38;;3539:102;;;:::o;3647:180::-;3695:77;3692:1;3685:88;3792:4;3789:1;3782:15;3816:4;3813:1;3806:15;3833:281;3916:27;3938:4;3916:27;:::i;:::-;3908:6;3904:40;4046:6;4034:10;4031:22;4010:18;3998:10;3995:34;3992:62;3989:88;;;4057:18;;:::i;:::-;3989:88;4097:10;4093:2;4086:22;3876:238;3833:281;;:::o;4120:129::-;4154:6;4181:20;;:::i;:::-;4171:30;;4210:33;4238:4;4230:6;4210:33;:::i;:::-;4120:129;;;:::o;4255:311::-;4332:4;4422:18;4414:6;4411:30;4408:56;;;4444:18;;:::i;:::-;4408:56;4494:4;4486:6;4482:17;4474:25;;4554:4;4548;4544:15;4536:23;;4255:311;;;:::o;4572:117::-;4681:1;4678;4671:12;4712:710;4808:5;4833:81;4849:64;4906:6;4849:64;:::i;:::-;4833:81;:::i;:::-;4824:90;;4934:5;4963:6;4956:5;4949:21;4997:4;4990:5;4986:16;4979:23;;5050:4;5042:6;5038:17;5030:6;5026:30;5079:3;5071:6;5068:15;5065:122;;;5098:79;;:::i;:::-;5065:122;5213:6;5196:220;5230:6;5225:3;5222:15;5196:220;;;5305:3;5334:37;5367:3;5355:10;5334:37;:::i;:::-;5329:3;5322:50;5401:4;5396:3;5392:14;5385:21;;5272:144;5256:4;5251:3;5247:14;5240:21;;5196:220;;;5200:21;4814:608;;4712:710;;;;;:::o;5445:370::-;5516:5;5565:3;5558:4;5550:6;5546:17;5542:27;5532:122;;5573:79;;:::i;:::-;5532:122;5690:6;5677:20;5715:94;5805:3;5797:6;5790:4;5782:6;5778:17;5715:94;:::i;:::-;5706:103;;5522:293;5445:370;;;;:::o;5821:684::-;5914:6;5922;5971:2;5959:9;5950:7;5946:23;5942:32;5939:119;;;5977:79;;:::i;:::-;5939:119;6125:1;6114:9;6110:17;6097:31;6155:18;6147:6;6144:30;6141:117;;;6177:79;;:::i;:::-;6141:117;6282:78;6352:7;6343:6;6332:9;6328:22;6282:78;:::i;:::-;6272:88;;6068:302;6409:2;6435:53;6480:7;6471:6;6460:9;6456:22;6435:53;:::i;:::-;6425:63;;6380:118;5821:684;;;;;:::o;6511:118::-;6598:24;6616:5;6598:24;:::i;:::-;6593:3;6586:37;6511:118;;:::o;6635:222::-;6728:4;6766:2;6755:9;6751:18;6743:26;;6779:71;6847:1;6836:9;6832:17;6823:6;6779:71;:::i;:::-;6635:222;;;;:::o;6863:474::-;6931:6;6939;6988:2;6976:9;6967:7;6963:23;6959:32;6956:119;;;6994:79;;:::i;:::-;6956:119;7114:1;7139:53;7184:7;7175:6;7164:9;7160:22;7139:53;:::i;:::-;7129:63;;7085:117;7241:2;7267:53;7312:7;7303:6;7292:9;7288:22;7267:53;:::i;:::-;7257:63;;7212:118;6863:474;;;;;:::o;7343:180::-;7391:77;7388:1;7381:88;7488:4;7485:1;7478:15;7512:4;7509:1;7502:15;7529:410;7569:7;7592:20;7610:1;7592:20;:::i;:::-;7587:25;;7626:20;7644:1;7626:20;:::i;:::-;7621:25;;7681:1;7678;7674:9;7703:30;7721:11;7703:30;:::i;:::-;7692:41;;7882:1;7873:7;7869:15;7866:1;7863:22;7843:1;7836:9;7816:83;7793:139;;7912:18;;:::i;:::-;7793:139;7577:362;7529:410;;;;:::o;7945:180::-;7993:77;7990:1;7983:88;8090:4;8087:1;8080:15;8114:4;8111:1;8104:15;8131:194;8171:4;8191:20;8209:1;8191:20;:::i;:::-;8186:25;;8225:20;8243:1;8225:20;:::i;:::-;8220:25;;8269:1;8266;8262:9;8254:17;;8293:1;8287:4;8284:11;8281:37;;;8298:18;;:::i;:::-;8281:37;8131:194;;;;:::o;8331:191::-;8371:3;8390:20;8408:1;8390:20;:::i;:::-;8385:25;;8424:20;8442:1;8424:20;:::i;:::-;8419:25;;8467:1;8464;8460:9;8453:16;;8488:3;8485:1;8482:10;8479:36;;;8495:18;;:::i;:::-;8479:36;8331:191;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"StandardToken modified with pausable transfers.*\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"remaining\":\"A uint256 specifying the amount of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint256 representing the amount owned by the passed address.\"}},\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amount of tokens to be transferred\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"}},\"title\":\"Pausable token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BecToken.sol\":\"PausableToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"BecToken.sol\":{\"content\":\"/*\\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101#bectokensol\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 268\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    require(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // require(b > 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // require(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n    return c;\\n  }\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public view virtual returns (uint256);\\n  function transfer(address to, uint256 value) public virtual returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) balances;\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[msg.sender]);\\n\\n    // SafeMath.sub will throw if there is not enough balance.\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return balance An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view override returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view virtual returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n  function approve(address spender, uint256 value) public virtual returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n  using SafeMath for uint256;\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public override virtual returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return remaining A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) onlyOwner public {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(owner, newOwner);\\n    owner = newOwner;\\n  }\\n\\n}\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    emit Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    emit Unpause();\\n  }\\n}\\n\\n/**\\n * @title Pausable token\\n *\\n * @dev StandardToken modified with pausable transfers.\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n  using SafeMath for uint256;\\n  \\n  function transfer(address _to, uint256 _value) public whenNotPaused override(BasicToken,ERC20Basic) returns (bool) {\\n    return super.transfer(_to, _value);\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.transferFrom(_from, _to, _value);\\n  }\\n\\n  function approve(address _spender, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.approve(_spender, _value);\\n  }\\n\\n  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {\\n    uint cnt = _receivers.length;\\n    // <yes> <report> ARITHMETIC\\n    uint256 amount = uint256(cnt) * _value;\\n    require(cnt > 0 && cnt <= 20);\\n    require(_value > 0 && balances[msg.sender] >= amount);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(amount);\\n    for (uint i = 0; i < cnt; i++) {\\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\\n        emit Transfer(msg.sender, _receivers[i], _value);\\n    }\\n    return true;\\n  }\\n}\\n\\n/**\\n * @title Bec Token\\n *\\n * @dev Implementation of Bec Token based on the basic standard token.\\n */\\ncontract BecToken is PausableToken {\\n    /**\\n    * Public variables of the token\\n    * The following variables are OPTIONAL vanities. One does not have to include them.\\n    * They allow one to customise the token contract & in no way influences the core functionality.\\n    * Some wallets/interfaces might not even bother to look at this information.\\n    */\\n    string public name = \\\"BeautyChain\\\";\\n    string public symbol = \\\"BEC\\\";\\n    string public version = '1.0.0';\\n    uint8 public decimals = 18;\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     */\\n    constructor() {\\n      totalSupply = 7000000000 * (10**(uint256(decimals)));\\n      balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\\n    }\\n}\\n\",\"keccak256\":\"0x0f2baaf5d47cf5ebcf6326fcea2140bfa07bf90809098b6389f2a869d5f768b7\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"SafeMath":{"evm":{"deployedBytecode":{"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220956fdd8ddc1066ca84c6acec40e7a647370c6bfcbd5cc0146f4d194f18d8fdd164736f6c63430008180033","sourceMap":"367:687:0:-:0;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Math operations with safety checks that throw on error\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BecToken.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"BecToken.sol\":{\"content\":\"/*\\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101#bectokensol\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 268\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    require(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // require(b > 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // require(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n    return c;\\n  }\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public view virtual returns (uint256);\\n  function transfer(address to, uint256 value) public virtual returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) balances;\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[msg.sender]);\\n\\n    // SafeMath.sub will throw if there is not enough balance.\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return balance An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view override returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view virtual returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n  function approve(address spender, uint256 value) public virtual returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n  using SafeMath for uint256;\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public override virtual returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return remaining A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) onlyOwner public {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(owner, newOwner);\\n    owner = newOwner;\\n  }\\n\\n}\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    emit Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    emit Unpause();\\n  }\\n}\\n\\n/**\\n * @title Pausable token\\n *\\n * @dev StandardToken modified with pausable transfers.\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n  using SafeMath for uint256;\\n  \\n  function transfer(address _to, uint256 _value) public whenNotPaused override(BasicToken,ERC20Basic) returns (bool) {\\n    return super.transfer(_to, _value);\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.transferFrom(_from, _to, _value);\\n  }\\n\\n  function approve(address _spender, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.approve(_spender, _value);\\n  }\\n\\n  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {\\n    uint cnt = _receivers.length;\\n    // <yes> <report> ARITHMETIC\\n    uint256 amount = uint256(cnt) * _value;\\n    require(cnt > 0 && cnt <= 20);\\n    require(_value > 0 && balances[msg.sender] >= amount);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(amount);\\n    for (uint i = 0; i < cnt; i++) {\\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\\n        emit Transfer(msg.sender, _receivers[i], _value);\\n    }\\n    return true;\\n  }\\n}\\n\\n/**\\n * @title Bec Token\\n *\\n * @dev Implementation of Bec Token based on the basic standard token.\\n */\\ncontract BecToken is PausableToken {\\n    /**\\n    * Public variables of the token\\n    * The following variables are OPTIONAL vanities. One does not have to include them.\\n    * They allow one to customise the token contract & in no way influences the core functionality.\\n    * Some wallets/interfaces might not even bother to look at this information.\\n    */\\n    string public name = \\\"BeautyChain\\\";\\n    string public symbol = \\\"BEC\\\";\\n    string public version = '1.0.0';\\n    uint8 public decimals = 18;\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     */\\n    constructor() {\\n      totalSupply = 7000000000 * (10**(uint256(decimals)));\\n      balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\\n    }\\n}\\n\",\"keccak256\":\"0x0f2baaf5d47cf5ebcf6326fcea2140bfa07bf90809098b6389f2a869d5f768b7\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"StandardToken":{"evm":{"deployedBytecode":{"object":"608060405234801561001057600080fd5b50600436106100625760003560e01c8063095ea7b31461006757806318160ddd1461009757806323b872dd146100b557806370a08231146100e5578063a9059cbb14610115578063dd62ed3e14610145575b600080fd5b610081600480360381019061007c9190610a10565b610175565b60405161008e9190610a6b565b60405180910390f35b61009f610267565b6040516100ac9190610a95565b60405180910390f35b6100cf60048036038101906100ca9190610ab0565b61026d565b6040516100dc9190610a6b565b60405180910390f35b6100ff60048036038101906100fa9190610b03565b610631565b60405161010c9190610a95565b60405180910390f35b61012f600480360381019061012a9190610a10565b61067a565b60405161013c9190610a6b565b60405180910390f35b61015f600480360381019061015a9190610b30565b6108a5565b60405161016c9190610a95565b60405180910390f35b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516102559190610a95565b60405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036102a757600080fd5b6000821180156102f65750600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b6102ff57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561038857600080fd5b6103da82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461092c90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061046f82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461094f90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061054182600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461092c90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161061e9190610a95565b60405180910390a3600190509392505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106b457600080fd5b6000821180156107035750600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b61070c57600080fd5b61075e82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461092c90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107f382600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461094f90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108939190610a95565b60405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282111561093b57600080fd5b81836109479190610b9f565b905092915050565b600080828461095e9190610bd3565b90508381101561096d57600080fd5b8091505092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109a78261097c565b9050919050565b6109b78161099c565b81146109c257600080fd5b50565b6000813590506109d4816109ae565b92915050565b6000819050919050565b6109ed816109da565b81146109f857600080fd5b50565b600081359050610a0a816109e4565b92915050565b60008060408385031215610a2757610a26610977565b5b6000610a35858286016109c5565b9250506020610a46858286016109fb565b9150509250929050565b60008115159050919050565b610a6581610a50565b82525050565b6000602082019050610a806000830184610a5c565b92915050565b610a8f816109da565b82525050565b6000602082019050610aaa6000830184610a86565b92915050565b600080600060608486031215610ac957610ac8610977565b5b6000610ad7868287016109c5565b9350506020610ae8868287016109c5565b9250506040610af9868287016109fb565b9150509250925092565b600060208284031215610b1957610b18610977565b5b6000610b27848285016109c5565b91505092915050565b60008060408385031215610b4757610b46610977565b5b6000610b55858286016109c5565b9250506020610b66858286016109c5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610baa826109da565b9150610bb5836109da565b9250828203905081811115610bcd57610bcc610b70565b5b92915050565b6000610bde826109da565b9150610be9836109da565b9250828201905080821115610c0157610c00610b70565b5b9291505056fea2646970667358221220d2d36601bbb53315fb95b2e77e47ef0a0bf6460472d2ef562d0a543671de889e64736f6c63430008180033","sourceMap":"3320:2201:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4840:205;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1217:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3742:475;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2449:116;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1824:415;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5374:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4840:205;4924:4;4968:6;4936:7;:19;4944:10;4936:19;;;;;;;;;;;;;;;:29;4956:8;4936:29;;;;;;;;;;;;;;;:38;;;;5006:8;4985:38;;4994:10;4985:38;;;5016:6;4985:38;;;;;;:::i;:::-;;;;;;;;5036:4;5029:11;;4840:205;;;;:::o;1217:26::-;;;;:::o;3742:475::-;3841:4;3876:1;3861:17;;:3;:17;;;3853:26;;;;;;3902:1;3893:6;:10;:39;;;;;3917:8;:15;3926:5;3917:15;;;;;;;;;;;;;;;;3907:6;:25;;3893:39;3885:48;;;;;;3957:7;:14;3965:5;3957:14;;;;;;;;;;;;;;;:26;3972:10;3957:26;;;;;;;;;;;;;;;;3947:6;:36;;3939:45;;;;;;4009:27;4029:6;4009:8;:15;4018:5;4009:15;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;3991:8;:15;4000:5;3991:15;;;;;;;;;;;;;;;:45;;;;4058:25;4076:6;4058:8;:13;4067:3;4058:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;4042:8;:13;4051:3;4042:13;;;;;;;;;;;;;;;:41;;;;4118:38;4149:6;4118:7;:14;4126:5;4118:14;;;;;;;;;;;;;;;:26;4133:10;4118:26;;;;;;;;;;;;;;;;:30;;:38;;;;:::i;:::-;4089:7;:14;4097:5;4089:14;;;;;;;;;;;;;;;:26;4104:10;4089:26;;;;;;;;;;;;;;;:67;;;;4183:3;4167:28;;4176:5;4167:28;;;4188:6;4167:28;;;;;;:::i;:::-;;;;;;;;4208:4;4201:11;;3742:475;;;;;:::o;2449:116::-;2514:15;2544:8;:16;2553:6;2544:16;;;;;;;;;;;;;;;;2537:23;;2449:116;;;:::o;1824:415::-;1904:4;1939:1;1924:17;;:3;:17;;;1916:26;;;;;;1965:1;1956:6;:10;:44;;;;;1980:8;:20;1989:10;1980:20;;;;;;;;;;;;;;;;1970:6;:30;;1956:44;1948:53;;;;;;2094:32;2119:6;2094:8;:20;2103:10;2094:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;2071:8;:20;2080:10;2071:20;;;;;;;;;;;;;;;:55;;;;2148:25;2166:6;2148:8;:13;2157:3;2148:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2132:8;:13;2141:3;2132:13;;;;;;;;;;;;;;;:41;;;;2205:3;2184:33;;2193:10;2184:33;;;2210:6;2184:33;;;;;;:::i;:::-;;;;;;;;2230:4;2223:11;;1824:415;;;;:::o;5374:145::-;5457:17;5489:7;:15;5497:6;5489:15;;;;;;;;;;;;;;;:25;5505:8;5489:25;;;;;;;;;;;;;;;;5482:32;;5374:145;;;;:::o;807:111::-;865:7;893:1;888;:6;;880:15;;;;;;912:1;908;:5;;;;:::i;:::-;901:12;;807:111;;;;:::o;922:130::-;980:7;995:9;1011:1;1007;:5;;;;:::i;:::-;995:17;;1031:1;1026;:6;;1018:15;;;;;;1046:1;1039:8;;;922:130;;;;:::o;88:117:1:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:90::-;1711:7;1754:5;1747:13;1740:21;1729:32;;1677:90;;;:::o;1773:109::-;1854:21;1869:5;1854:21;:::i;:::-;1849:3;1842:34;1773:109;;:::o;1888:210::-;1975:4;2013:2;2002:9;1998:18;1990:26;;2026:65;2088:1;2077:9;2073:17;2064:6;2026:65;:::i;:::-;1888:210;;;;:::o;2104:118::-;2191:24;2209:5;2191:24;:::i;:::-;2186:3;2179:37;2104:118;;:::o;2228:222::-;2321:4;2359:2;2348:9;2344:18;2336:26;;2372:71;2440:1;2429:9;2425:17;2416:6;2372:71;:::i;:::-;2228:222;;;;:::o;2456:619::-;2533:6;2541;2549;2598:2;2586:9;2577:7;2573:23;2569:32;2566:119;;;2604:79;;:::i;:::-;2566:119;2724:1;2749:53;2794:7;2785:6;2774:9;2770:22;2749:53;:::i;:::-;2739:63;;2695:117;2851:2;2877:53;2922:7;2913:6;2902:9;2898:22;2877:53;:::i;:::-;2867:63;;2822:118;2979:2;3005:53;3050:7;3041:6;3030:9;3026:22;3005:53;:::i;:::-;2995:63;;2950:118;2456:619;;;;;:::o;3081:329::-;3140:6;3189:2;3177:9;3168:7;3164:23;3160:32;3157:119;;;3195:79;;:::i;:::-;3157:119;3315:1;3340:53;3385:7;3376:6;3365:9;3361:22;3340:53;:::i;:::-;3330:63;;3286:117;3081:329;;;;:::o;3416:474::-;3484:6;3492;3541:2;3529:9;3520:7;3516:23;3512:32;3509:119;;;3547:79;;:::i;:::-;3509:119;3667:1;3692:53;3737:7;3728:6;3717:9;3713:22;3692:53;:::i;:::-;3682:63;;3638:117;3794:2;3820:53;3865:7;3856:6;3845:9;3841:22;3820:53;:::i;:::-;3810:63;;3765:118;3416:474;;;;;:::o;3896:180::-;3944:77;3941:1;3934:88;4041:4;4038:1;4031:15;4065:4;4062:1;4055:15;4082:194;4122:4;4142:20;4160:1;4142:20;:::i;:::-;4137:25;;4176:20;4194:1;4176:20;:::i;:::-;4171:25;;4220:1;4217;4213:9;4205:17;;4244:1;4238:4;4235:11;4232:37;;;4249:18;;:::i;:::-;4232:37;4082:194;;;;:::o;4282:191::-;4322:3;4341:20;4359:1;4341:20;:::i;:::-;4336:25;;4375:20;4393:1;4375:20;:::i;:::-;4370:25;;4418:1;4415;4411:9;4404:16;;4439:3;4436:1;4433:10;4430:36;;;4446:18;;:::i;:::-;4430:36;4282:191;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard token.https://github.com/ethereum/EIPs/issues/20Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"returns\":{\"remaining\":\"A uint256 specifying the amount of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint256 representing the amount owned by the passed address.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amount of tokens to be transferred\"}}},\"title\":\"Standard ERC20 token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"BecToken.sol\":\"StandardToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"BecToken.sol\":{\"content\":\"/*\\n * @source: https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101#bectokensol\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 268\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    require(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // require(b > 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // require(a == b * c + a % b); // There is no case in which this doesn't hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n    return c;\\n  }\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public view virtual returns (uint256);\\n  function transfer(address to, uint256 value) public virtual returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) balances;\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[msg.sender]);\\n\\n    // SafeMath.sub will throw if there is not enough balance.\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    emit Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return balance An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view override returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view virtual returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\n  function approve(address spender, uint256 value) public virtual returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n  using SafeMath for uint256;\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public override virtual returns (bool) {\\n    require(_to != address(0));\\n    require(_value > 0 && _value <= balances[_from]);\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n    emit Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public override virtual returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return remaining A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) onlyOwner public {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(owner, newOwner);\\n    owner = newOwner;\\n  }\\n\\n}\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    emit Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    emit Unpause();\\n  }\\n}\\n\\n/**\\n * @title Pausable token\\n *\\n * @dev StandardToken modified with pausable transfers.\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n  using SafeMath for uint256;\\n  \\n  function transfer(address _to, uint256 _value) public whenNotPaused override(BasicToken,ERC20Basic) returns (bool) {\\n    return super.transfer(_to, _value);\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.transferFrom(_from, _to, _value);\\n  }\\n\\n  function approve(address _spender, uint256 _value) public whenNotPaused override returns (bool) {\\n    return super.approve(_spender, _value);\\n  }\\n\\n  function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {\\n    uint cnt = _receivers.length;\\n    // <yes> <report> ARITHMETIC\\n    uint256 amount = uint256(cnt) * _value;\\n    require(cnt > 0 && cnt <= 20);\\n    require(_value > 0 && balances[msg.sender] >= amount);\\n\\n    balances[msg.sender] = balances[msg.sender].sub(amount);\\n    for (uint i = 0; i < cnt; i++) {\\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\\n        emit Transfer(msg.sender, _receivers[i], _value);\\n    }\\n    return true;\\n  }\\n}\\n\\n/**\\n * @title Bec Token\\n *\\n * @dev Implementation of Bec Token based on the basic standard token.\\n */\\ncontract BecToken is PausableToken {\\n    /**\\n    * Public variables of the token\\n    * The following variables are OPTIONAL vanities. One does not have to include them.\\n    * They allow one to customise the token contract & in no way influences the core functionality.\\n    * Some wallets/interfaces might not even bother to look at this information.\\n    */\\n    string public name = \\\"BeautyChain\\\";\\n    string public symbol = \\\"BEC\\\";\\n    string public version = '1.0.0';\\n    uint8 public decimals = 18;\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     */\\n    constructor() {\\n      totalSupply = 7000000000 * (10**(uint256(decimals)));\\n      balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\\n    }\\n}\\n\",\"keccak256\":\"0x0f2baaf5d47cf5ebcf6326fcea2140bfa07bf90809098b6389f2a869d5f768b7\",\"license\":\"UNLICENSED\"}},\"version\":1}"}}},"sources":{"BecToken.sol":{"id":0}}}

