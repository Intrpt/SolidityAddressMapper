{"contracts":{"ERC20.sol":{"ERC20":{"evm":{"deployedBytecode":{"object":"608060405234801561000f575f80fd5b5060043610610055575f3560e01c8063095ea7b31461005957806323b872dd1461008957806370a08231146100b9578063a9059cbb146100e9578063dd62ed3e14610119575b5f80fd5b610073600480360381019061006e91906109b7565b610149565b6040516100809190610a0f565b60405180910390f35b6100a3600480360381019061009e9190610a28565b61026d565b6040516100b09190610a0f565b60405180910390f35b6100d360048036038101906100ce9190610a78565b610606565b6040516100e09190610ab2565b60405180910390f35b61010360048036038101906100fe91906109b7565b61064b565b6040516101109190610a0f565b60405180910390f35b610133600480360381019061012e9190610acb565b610858565b6040516101409190610ab2565b60405180910390f35b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610181575f80fd5b8160015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161025b9190610ab2565b60405180910390a36001905092915050565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20548211156102b6575f80fd5b60015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205482111561033a575f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610371575f80fd5b6103c0825f808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546108da90919063ffffffff16565b5f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555061044f825f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461090090919063ffffffff16565b5f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555061051a8260015f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546108da90919063ffffffff16565b60015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105f39190610ab2565b60405180910390a3600190509392505050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054821115610694575f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106cb575f80fd5b61071a825f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546108da90919063ffffffff16565b5f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055506107a9825f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461090090919063ffffffff16565b5f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108469190610ab2565b60405180910390a36001905092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f828211156108e7575f80fd5b5f82846108f49190610b36565b90508091505092915050565b5f80828461090e9190610b69565b90508381101561091c575f80fd5b8091505092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6109538261092a565b9050919050565b61096381610949565b811461096d575f80fd5b50565b5f8135905061097e8161095a565b92915050565b5f819050919050565b61099681610984565b81146109a0575f80fd5b50565b5f813590506109b18161098d565b92915050565b5f80604083850312156109cd576109cc610926565b5b5f6109da85828601610970565b92505060206109eb858286016109a3565b9150509250929050565b5f8115159050919050565b610a09816109f5565b82525050565b5f602082019050610a225f830184610a00565b92915050565b5f805f60608486031215610a3f57610a3e610926565b5b5f610a4c86828701610970565b9350506020610a5d86828701610970565b9250506040610a6e868287016109a3565b9150509250925092565b5f60208284031215610a8d57610a8c610926565b5b5f610a9a84828501610970565b91505092915050565b610aac81610984565b82525050565b5f602082019050610ac55f830184610aa3565b92915050565b5f8060408385031215610ae157610ae0610926565b5b5f610aee85828601610970565b9250506020610aff85828601610970565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610b4082610984565b9150610b4b83610984565b9250828203905081811115610b6357610b62610b09565b5b92915050565b5f610b7382610984565b9150610b7e83610984565b9250828201905080821115610b9657610b95610b09565b5b9291505056fea2646970667358221220cecfdebae11f5169e06aad8d36c3d4e45bccde0bc48ae30d76cc4b8d83afb56564736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x59 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xE9 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x119 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x73 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6E SWAP2 SWAP1 PUSH2 0x9B7 JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x80 SWAP2 SWAP1 PUSH2 0xA0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x9E SWAP2 SWAP1 PUSH2 0xA28 JUMP JUMPDEST PUSH2 0x26D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB0 SWAP2 SWAP1 PUSH2 0xA0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xCE SWAP2 SWAP1 PUSH2 0xA78 JUMP JUMPDEST PUSH2 0x606 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE0 SWAP2 SWAP1 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x103 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xFE SWAP2 SWAP1 PUSH2 0x9B7 JUMP JUMPDEST PUSH2 0x64B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x110 SWAP2 SWAP1 PUSH2 0xA0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x133 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12E SWAP2 SWAP1 PUSH2 0xACB JUMP JUMPDEST PUSH2 0x858 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 SWAP2 SWAP1 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x181 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x2B6 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x33A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x371 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x3C0 DUP3 PUSH0 DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH2 0x8DA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x44F DUP3 PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH2 0x900 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x51A DUP3 PUSH1 0x1 PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH2 0x8DA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x5F3 SWAP2 SWAP1 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x694 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6CB JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x71A DUP3 PUSH0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH2 0x8DA SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x7A9 DUP3 PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD PUSH2 0x900 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x846 SWAP2 SWAP1 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 GT ISZERO PUSH2 0x8E7 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP3 DUP5 PUSH2 0x8F4 SWAP2 SWAP1 PUSH2 0xB36 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 DUP5 PUSH2 0x90E SWAP2 SWAP1 PUSH2 0xB69 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x91C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x953 DUP3 PUSH2 0x92A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x963 DUP2 PUSH2 0x949 JUMP JUMPDEST DUP2 EQ PUSH2 0x96D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x97E DUP2 PUSH2 0x95A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x996 DUP2 PUSH2 0x984 JUMP JUMPDEST DUP2 EQ PUSH2 0x9A0 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x9B1 DUP2 PUSH2 0x98D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9CD JUMPI PUSH2 0x9CC PUSH2 0x926 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x9DA DUP6 DUP3 DUP7 ADD PUSH2 0x970 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x9EB DUP6 DUP3 DUP7 ADD PUSH2 0x9A3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA09 DUP2 PUSH2 0x9F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA22 PUSH0 DUP4 ADD DUP5 PUSH2 0xA00 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA3F JUMPI PUSH2 0xA3E PUSH2 0x926 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xA4C DUP7 DUP3 DUP8 ADD PUSH2 0x970 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xA5D DUP7 DUP3 DUP8 ADD PUSH2 0x970 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xA6E DUP7 DUP3 DUP8 ADD PUSH2 0x9A3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA8D JUMPI PUSH2 0xA8C PUSH2 0x926 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xA9A DUP5 DUP3 DUP6 ADD PUSH2 0x970 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xAAC DUP2 PUSH2 0x984 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xAC5 PUSH0 DUP4 ADD DUP5 PUSH2 0xAA3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAE1 JUMPI PUSH2 0xAE0 PUSH2 0x926 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xAEE DUP6 DUP3 DUP7 ADD PUSH2 0x970 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xAFF DUP6 DUP3 DUP7 ADD PUSH2 0x970 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xB40 DUP3 PUSH2 0x984 JUMP JUMPDEST SWAP2 POP PUSH2 0xB4B DUP4 PUSH2 0x984 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xB63 JUMPI PUSH2 0xB62 PUSH2 0xB09 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xB73 DUP3 PUSH2 0x984 JUMP JUMPDEST SWAP2 POP PUSH2 0xB7E DUP4 PUSH2 0x984 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xB96 JUMPI PUSH2 0xB95 PUSH2 0xB09 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCE 0xCF 0xDE 0xBA 0xE1 0x1F MLOAD PUSH10 0xE06AAD8D36C3D4E45BCC 0xDE SIGNEXTEND 0xC4 DUP11 0xE3 0xD PUSH23 0xCC4B8D83AFB56564736F6C634300081800330000000000 ","sourceMap":"2054:1773:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3114:262;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3382:442;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2509:100;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2751:324;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2617:128;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3114:262;3179:4;3219:1;3200:21;;:7;:21;;;3192:30;;;;;;3299:5;3267:8;:20;3276:10;3267:20;;;;;;;;;;;;;;;:29;3288:7;3267:29;;;;;;;;;;;;;;;:37;;;;3337:7;3316:36;;3325:10;3316:36;;;3346:5;3316:36;;;;;;:::i;:::-;;;;;;;;3366:4;3359:11;;3114:262;;;;:::o;3382:442::-;3461:4;3491:9;:15;3501:4;3491:15;;;;;;;;;;;;;;;;3482:5;:24;;3474:33;;;;;;3531:8;:14;3540:4;3531:14;;;;;;;;;;;;;;;:26;3546:10;3531:26;;;;;;;;;;;;;;;;3522:5;:35;;3514:44;;;;;;3587:1;3573:16;;:2;:16;;;3565:25;;;;;;3617:26;3637:5;3617:9;:15;3627:4;3617:15;;;;;;;;;;;;;;;;:19;;:26;;;;:::i;:::-;3599:9;:15;3609:4;3599:15;;;;;;;;;;;;;;;:44;;;;3666:24;3684:5;3666:9;:13;3676:2;3666:13;;;;;;;;;;;;;;;;:17;;:24;;;;:::i;:::-;3650:9;:13;3660:2;3650:13;;;;;;;;;;;;;;;:40;;;;3726:37;3757:5;3726:8;:14;3735:4;3726:14;;;;;;;;;;;;;;;:26;3741:10;3726:26;;;;;;;;;;;;;;;;:30;;:37;;;;:::i;:::-;3697:8;:14;3706:4;3697:14;;;;;;;;;;;;;;;:26;3712:10;3697:26;;;;;;;;;;;;;;;:66;;;;3790:2;3775:25;;3784:4;3775:25;;;3794:5;3775:25;;;;;;:::i;:::-;;;;;;;;3814:4;3807:11;;3382:442;;;;;:::o;2509:100::-;2564:7;2587:9;:16;2597:5;2587:16;;;;;;;;;;;;;;;;2580:23;;2509:100;;;:::o;2751:324::-;2812:4;2842:9;:21;2852:10;2842:21;;;;;;;;;;;;;;;;2833:5;:30;;2825:39;;;;;;2893:1;2879:16;;:2;:16;;;2871:25;;;;;;2929:32;2955:5;2929:9;:21;2939:10;2929:21;;;;;;;;;;;;;;;;:25;;:32;;;;:::i;:::-;2905:9;:21;2915:10;2905:21;;;;;;;;;;;;;;;:56;;;;2984:24;3002:5;2984:9;:13;2994:2;2984:13;;;;;;;;;;;;;;;;:17;;:24;;;;:::i;:::-;2968:9;:13;2978:2;2968:13;;;;;;;;;;;;;;;:40;;;;3041:2;3020:31;;3029:10;3020:31;;;3045:5;3020:31;;;;;;:::i;:::-;;;;;;;;3065:4;3058:11;;2751:324;;;;:::o;2617:128::-;2689:7;2715:8;:15;2724:5;2715:15;;;;;;;;;;;;;;;:24;2731:7;2715:24;;;;;;;;;;;;;;;;2708:31;;2617:128;;;;:::o;1453:136::-;1511:7;1540:1;1535;:6;;1527:15;;;;;;1549:9;1565:1;1561;:5;;;;:::i;:::-;1549:17;;1582:1;1575:8;;;1453:136;;;;:::o;1657:::-;1715:7;1731:9;1747:1;1743;:5;;;;:::i;:::-;1731:17;;1768:1;1763;:6;;1755:15;;;;;;1786:1;1779:8;;;1657:136;;;;:::o;88:117:1:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:90::-;1711:7;1754:5;1747:13;1740:21;1729:32;;1677:90;;;:::o;1773:109::-;1854:21;1869:5;1854:21;:::i;:::-;1849:3;1842:34;1773:109;;:::o;1888:210::-;1975:4;2013:2;2002:9;1998:18;1990:26;;2026:65;2088:1;2077:9;2073:17;2064:6;2026:65;:::i;:::-;1888:210;;;;:::o;2104:619::-;2181:6;2189;2197;2246:2;2234:9;2225:7;2221:23;2217:32;2214:119;;;2252:79;;:::i;:::-;2214:119;2372:1;2397:53;2442:7;2433:6;2422:9;2418:22;2397:53;:::i;:::-;2387:63;;2343:117;2499:2;2525:53;2570:7;2561:6;2550:9;2546:22;2525:53;:::i;:::-;2515:63;;2470:118;2627:2;2653:53;2698:7;2689:6;2678:9;2674:22;2653:53;:::i;:::-;2643:63;;2598:118;2104:619;;;;;:::o;2729:329::-;2788:6;2837:2;2825:9;2816:7;2812:23;2808:32;2805:119;;;2843:79;;:::i;:::-;2805:119;2963:1;2988:53;3033:7;3024:6;3013:9;3009:22;2988:53;:::i;:::-;2978:63;;2934:117;2729:329;;;;:::o;3064:118::-;3151:24;3169:5;3151:24;:::i;:::-;3146:3;3139:37;3064:118;;:::o;3188:222::-;3281:4;3319:2;3308:9;3304:18;3296:26;;3332:71;3400:1;3389:9;3385:17;3376:6;3332:71;:::i;:::-;3188:222;;;;:::o;3416:474::-;3484:6;3492;3541:2;3529:9;3520:7;3516:23;3512:32;3509:119;;;3547:79;;:::i;:::-;3509:119;3667:1;3692:53;3737:7;3728:6;3717:9;3713:22;3692:53;:::i;:::-;3682:63;;3638:117;3794:2;3820:53;3865:7;3856:6;3845:9;3841:22;3820:53;:::i;:::-;3810:63;;3765:118;3416:474;;;;;:::o;3896:180::-;3944:77;3941:1;3934:88;4041:4;4038:1;4031:15;4065:4;4062:1;4055:15;4082:194;4122:4;4142:20;4160:1;4142:20;:::i;:::-;4137:25;;4176:20;4194:1;4176:20;:::i;:::-;4171:25;;4220:1;4217;4213:9;4205:17;;4244:1;4238:4;4235:11;4232:37;;;4249:18;;:::i;:::-;4232:37;4082:194;;;;:::o;4282:191::-;4322:3;4341:20;4359:1;4341:20;:::i;:::-;4336:25;;4375:20;4393:1;4375:20;:::i;:::-;4370:25;;4418:1;4415;4411:9;4404:16;;4439:3;4436:1;4433:10;4430:36;;;4446:18;;:::i;:::-;4430:36;4282:191;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20.sol\":\"ERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20.sol\":{\"content\":\"/*\\r\\n * @source: https://github.com/SmartContractSecurity/SWC-registry/blob/master/test_cases/transaction_order_dependence/ERC20.sol\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 112,115\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/** Taken from the OpenZeppelin github\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n  /**\\r\\n  * @dev Multiplies two numbers, reverts on overflow.\\r\\n  */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n    // benefit is lost if 'b' is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b);\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\r\\n  */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n  */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b <= a);\\r\\n    uint256 c = a - b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Adds two numbers, reverts on overflow.\\r\\n  */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c >= a);\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\r\\n  * reverts when dividing by zero.\\r\\n  */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0);\\r\\n    return a % b;\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\ncontract ERC20 {\\r\\n\\r\\n  event Transfer( address indexed from, address indexed to, uint256 value );\\r\\n  event Approval( address indexed owner, address indexed spender, uint256 value);\\r\\n  using SafeMath for *;\\r\\n\\r\\n  mapping (address => uint256) private _balances;\\r\\n\\r\\n  mapping (address => mapping (address => uint256)) private _allowed;\\r\\n\\r\\n  uint256 private _totalSupply;\\r\\n\\r\\n  constructor(uint totalSupply) {\\r\\n    _balances[msg.sender] = totalSupply;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address owner) public view returns (uint256) {\\r\\n    return _balances[owner];\\r\\n  }\\r\\n\\r\\n\\r\\n  function allowance(address owner, address spender) public view returns (uint256)\\r\\n  {\\r\\n    return _allowed[owner][spender];\\r\\n  }\\r\\n\\r\\n  function transfer(address to, uint256 value) public returns (bool) {\\r\\n    require(value <= _balances[msg.sender]);\\r\\n    require(to != address(0));\\r\\n\\r\\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\\r\\n    _balances[to] = _balances[to].add(value);\\r\\n    emit Transfer(msg.sender, to, value);\\r\\n    return true;\\r\\n  }\\r\\n  // <yes> <report> FRONT_RUNNING\\r\\n  function approve(address spender, uint256 value) public returns (bool) {\\r\\n    require(spender != address(0));\\r\\n     // <yes> <report> FRONT_RUNNING\\r\\n    _allowed[msg.sender][spender] = value;\\r\\n    emit Approval(msg.sender, spender, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\\r\\n    require(value <= _balances[from]);\\r\\n    require(value <= _allowed[from][msg.sender]);\\r\\n    require(to != address(0));\\r\\n\\r\\n    _balances[from] = _balances[from].sub(value);\\r\\n    _balances[to] = _balances[to].add(value);\\r\\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\r\\n    emit Transfer(from, to, value);\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xbc242d81e06787fc385cff150ac2c1c4c6729e7aa672b417ddbb70a6383ffdde\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"SafeMath":{"evm":{"deployedBytecode":{"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f18a0966b9a1edfad6bee908bffb1e0395d9b042b112a203faef4d865b51a52464736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL DUP11 MULMOD PUSH7 0xB9A1EDFAD6BEE9 ADDMOD 0xBF 0xFB 0x1E SUB SWAP6 0xD9 0xB0 TIMESTAMP 0xB1 SLT LOG2 SUB STATICCALL 0xEF 0x4D DUP7 JUMPDEST MLOAD 0xA5 0x24 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"459:1589:0:-:0;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Math operations with safety checks that revert on error\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Taken from the OpenZeppelin github\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20.sol\":\"SafeMath\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20.sol\":{\"content\":\"/*\\r\\n * @source: https://github.com/SmartContractSecurity/SWC-registry/blob/master/test_cases/transaction_order_dependence/ERC20.sol\\r\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\r\\n * @author: -\\r\\n * @vulnerable_at_lines: 112,115\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/** Taken from the OpenZeppelin github\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n  /**\\r\\n  * @dev Multiplies two numbers, reverts on overflow.\\r\\n  */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n    // benefit is lost if 'b' is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b);\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\r\\n  */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n  */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b <= a);\\r\\n    uint256 c = a - b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Adds two numbers, reverts on overflow.\\r\\n  */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c >= a);\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\r\\n  * reverts when dividing by zero.\\r\\n  */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0);\\r\\n    return a % b;\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\ncontract ERC20 {\\r\\n\\r\\n  event Transfer( address indexed from, address indexed to, uint256 value );\\r\\n  event Approval( address indexed owner, address indexed spender, uint256 value);\\r\\n  using SafeMath for *;\\r\\n\\r\\n  mapping (address => uint256) private _balances;\\r\\n\\r\\n  mapping (address => mapping (address => uint256)) private _allowed;\\r\\n\\r\\n  uint256 private _totalSupply;\\r\\n\\r\\n  constructor(uint totalSupply) {\\r\\n    _balances[msg.sender] = totalSupply;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address owner) public view returns (uint256) {\\r\\n    return _balances[owner];\\r\\n  }\\r\\n\\r\\n\\r\\n  function allowance(address owner, address spender) public view returns (uint256)\\r\\n  {\\r\\n    return _allowed[owner][spender];\\r\\n  }\\r\\n\\r\\n  function transfer(address to, uint256 value) public returns (bool) {\\r\\n    require(value <= _balances[msg.sender]);\\r\\n    require(to != address(0));\\r\\n\\r\\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\\r\\n    _balances[to] = _balances[to].add(value);\\r\\n    emit Transfer(msg.sender, to, value);\\r\\n    return true;\\r\\n  }\\r\\n  // <yes> <report> FRONT_RUNNING\\r\\n  function approve(address spender, uint256 value) public returns (bool) {\\r\\n    require(spender != address(0));\\r\\n     // <yes> <report> FRONT_RUNNING\\r\\n    _allowed[msg.sender][spender] = value;\\r\\n    emit Approval(msg.sender, spender, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\\r\\n    require(value <= _balances[from]);\\r\\n    require(value <= _allowed[from][msg.sender]);\\r\\n    require(to != address(0));\\r\\n\\r\\n    _balances[from] = _balances[from].sub(value);\\r\\n    _balances[to] = _balances[to].add(value);\\r\\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\r\\n    emit Transfer(from, to, value);\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xbc242d81e06787fc385cff150ac2c1c4c6729e7aa672b417ddbb70a6383ffdde\",\"license\":\"UNLICENSED\"}},\"version\":1}"}}},"sources":{"ERC20.sol":{"id":0}}}
