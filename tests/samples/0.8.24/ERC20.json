{"contracts":{"ERC20.sol":{"ERC20":{"evm":{"deployedBytecode":{"object":"608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd1461008c57806370a08231146100bc578063a9059cbb146100ec578063dd62ed3e1461011c575b600080fd5b610076600480360381019061007191906109fe565b61014c565b6040516100839190610a59565b60405180910390f35b6100a660048036038101906100a19190610a74565b610276565b6040516100b39190610a59565b60405180910390f35b6100d660048036038101906100d19190610ac7565b61062a565b6040516100e39190610b03565b60405180910390f35b610106600480360381019061010191906109fe565b610672565b6040516101139190610a59565b60405180910390f35b61013660048036038101906101319190610b1e565b61088d565b6040516101439190610b03565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361018657600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516102649190610b03565b60405180910390a36001905092915050565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156102c357600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561034c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361038557600080fd5b6103d6826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091490919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610469826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461093d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061053a82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091490919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106179190610b03565b60405180910390a3600190509392505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156106bf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106f857600080fd5b610749826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091490919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107dc826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461093d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161087b9190610b03565b60405180910390a36001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282111561092357600080fd5b600082846109319190610b8d565b90508091505092915050565b600080828461094c9190610bc1565b90508381101561095b57600080fd5b8091505092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109958261096a565b9050919050565b6109a58161098a565b81146109b057600080fd5b50565b6000813590506109c28161099c565b92915050565b6000819050919050565b6109db816109c8565b81146109e657600080fd5b50565b6000813590506109f8816109d2565b92915050565b60008060408385031215610a1557610a14610965565b5b6000610a23858286016109b3565b9250506020610a34858286016109e9565b9150509250929050565b60008115159050919050565b610a5381610a3e565b82525050565b6000602082019050610a6e6000830184610a4a565b92915050565b600080600060608486031215610a8d57610a8c610965565b5b6000610a9b868287016109b3565b9350506020610aac868287016109b3565b9250506040610abd868287016109e9565b9150509250925092565b600060208284031215610add57610adc610965565b5b6000610aeb848285016109b3565b91505092915050565b610afd816109c8565b82525050565b6000602082019050610b186000830184610af4565b92915050565b60008060408385031215610b3557610b34610965565b5b6000610b43858286016109b3565b9250506020610b54858286016109b3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b98826109c8565b9150610ba3836109c8565b9250828203905081811115610bbb57610bba610b5e565b5b92915050565b6000610bcc826109c8565b9150610bd7836109c8565b9250828201905080821115610bef57610bee610b5e565b5b9291505056fea264697066735822122093320e782034c628d1c76a60d04fd81f46df31df94d4cfa9c405a897d530777b64736f6c63430008180033","sourceMap":"1979:1718:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3003:256;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3263:432;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2418:98;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2650:316;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2521:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3003:256;3068:4;3107:1;3088:21;;:7;:21;;;3080:30;;;;;;3185:5;3153:8;:20;3162:10;3153:20;;;;;;;;;;;;;;;:29;3174:7;3153:29;;;;;;;;;;;;;;;:37;;;;3222:7;3201:36;;3210:10;3201:36;;;3231:5;3201:36;;;;;;:::i;:::-;;;;;;;;3250:4;3243:11;;3003:256;;;;:::o;3263:432::-;3342:4;3371:9;:15;3381:4;3371:15;;;;;;;;;;;;;;;;3362:5;:24;;3354:33;;;;;;3410:8;:14;3419:4;3410:14;;;;;;;;;;;;;;;:26;3425:10;3410:26;;;;;;;;;;;;;;;;3401:5;:35;;3393:44;;;;;;3465:1;3451:16;;:2;:16;;;3443:25;;;;;;3493:26;3513:5;3493:9;:15;3503:4;3493:15;;;;;;;;;;;;;;;;:19;;:26;;;;:::i;:::-;3475:9;:15;3485:4;3475:15;;;;;;;;;;;;;;;:44;;;;3541:24;3559:5;3541:9;:13;3551:2;3541:13;;;;;;;;;;;;;;;;:17;;:24;;;;:::i;:::-;3525:9;:13;3535:2;3525:13;;;;;;;;;;;;;;;:40;;;;3600:37;3631:5;3600:8;:14;3609:4;3600:14;;;;;;;;;;;;;;;:26;3615:10;3600:26;;;;;;;;;;;;;;;;:30;;:37;;;;:::i;:::-;3571:8;:14;3580:4;3571:14;;;;;;;;;;;;;;;:26;3586:10;3571:26;;;;;;;;;;;;;;;:66;;;;3663:2;3648:25;;3657:4;3648:25;;;3667:5;3648:25;;;;;;:::i;:::-;;;;;;;;3686:4;3679:11;;3263:432;;;;;:::o;2418:98::-;2473:7;2495:9;:16;2505:5;2495:16;;;;;;;;;;;;;;;;2488:23;;2418:98;;;:::o;2650:316::-;2711:4;2740:9;:21;2750:10;2740:21;;;;;;;;;;;;;;;;2731:5;:30;;2723:39;;;;;;2790:1;2776:16;;:2;:16;;;2768:25;;;;;;2824:32;2850:5;2824:9;:21;2834:10;2824:21;;;;;;;;;;;;;;;;:25;;:32;;;;:::i;:::-;2800:9;:21;2810:10;2800:21;;;;;;;;;;;;;;;:56;;;;2878:24;2896:5;2878:9;:13;2888:2;2878:13;;;;;;;;;;;;;;;;:17;;:24;;;;:::i;:::-;2862:9;:13;2872:2;2862:13;;;;;;;;;;;;;;;:40;;;;2934:2;2913:31;;2922:10;2913:31;;;2938:5;2913:31;;;;;;:::i;:::-;;;;;;;;2957:4;2950:11;;2650:316;;;;:::o;2521:125::-;2593:7;2617:8;:15;2626:5;2617:15;;;;;;;;;;;;;;;:24;2633:7;2617:24;;;;;;;;;;;;;;;;2610:31;;2521:125;;;;:::o;1406:131::-;1464:7;1492:1;1487;:6;;1479:15;;;;;;1500:9;1516:1;1512;:5;;;;:::i;:::-;1500:17;;1531:1;1524:8;;;1406:131;;;;:::o;1600:::-;1658:7;1673:9;1689:1;1685;:5;;;;:::i;:::-;1673:17;;1709:1;1704;:6;;1696:15;;;;;;1725:1;1718:8;;;1600:131;;;;:::o;88:117:1:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:90::-;1711:7;1754:5;1747:13;1740:21;1729:32;;1677:90;;;:::o;1773:109::-;1854:21;1869:5;1854:21;:::i;:::-;1849:3;1842:34;1773:109;;:::o;1888:210::-;1975:4;2013:2;2002:9;1998:18;1990:26;;2026:65;2088:1;2077:9;2073:17;2064:6;2026:65;:::i;:::-;1888:210;;;;:::o;2104:619::-;2181:6;2189;2197;2246:2;2234:9;2225:7;2221:23;2217:32;2214:119;;;2252:79;;:::i;:::-;2214:119;2372:1;2397:53;2442:7;2433:6;2422:9;2418:22;2397:53;:::i;:::-;2387:63;;2343:117;2499:2;2525:53;2570:7;2561:6;2550:9;2546:22;2525:53;:::i;:::-;2515:63;;2470:118;2627:2;2653:53;2698:7;2689:6;2678:9;2674:22;2653:53;:::i;:::-;2643:63;;2598:118;2104:619;;;;;:::o;2729:329::-;2788:6;2837:2;2825:9;2816:7;2812:23;2808:32;2805:119;;;2843:79;;:::i;:::-;2805:119;2963:1;2988:53;3033:7;3024:6;3013:9;3009:22;2988:53;:::i;:::-;2978:63;;2934:117;2729:329;;;;:::o;3064:118::-;3151:24;3169:5;3151:24;:::i;:::-;3146:3;3139:37;3064:118;;:::o;3188:222::-;3281:4;3319:2;3308:9;3304:18;3296:26;;3332:71;3400:1;3389:9;3385:17;3376:6;3332:71;:::i;:::-;3188:222;;;;:::o;3416:474::-;3484:6;3492;3541:2;3529:9;3520:7;3516:23;3512:32;3509:119;;;3547:79;;:::i;:::-;3509:119;3667:1;3692:53;3737:7;3728:6;3717:9;3713:22;3692:53;:::i;:::-;3682:63;;3638:117;3794:2;3820:53;3865:7;3856:6;3845:9;3841:22;3820:53;:::i;:::-;3810:63;;3765:118;3416:474;;;;;:::o;3896:180::-;3944:77;3941:1;3934:88;4041:4;4038:1;4031:15;4065:4;4062:1;4055:15;4082:194;4122:4;4142:20;4160:1;4142:20;:::i;:::-;4137:25;;4176:20;4194:1;4176:20;:::i;:::-;4171:25;;4220:1;4217;4213:9;4205:17;;4244:1;4238:4;4235:11;4232:37;;;4249:18;;:::i;:::-;4232:37;4082:194;;;;:::o;4282:191::-;4322:3;4341:20;4359:1;4341:20;:::i;:::-;4336:25;;4375:20;4393:1;4375:20;:::i;:::-;4370:25;;4418:1;4415;4411:9;4404:16;;4439:3;4436:1;4433:10;4430:36;;;4446:18;;:::i;:::-;4430:36;4282:191;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20.sol\":{\"content\":\"/*\\n * @source: https://github.com/SmartContractSecurity/SWC-registry/blob/master/test_cases/transaction_order_dependence/ERC20.sol\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 112,115\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/** Taken from the OpenZeppelin github\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, reverts on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, reverts on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n  * reverts when dividing by zero.\\n  */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0);\\n    return a % b;\\n  }\\n}\\n\\n\\ncontract ERC20 {\\n\\n  event Transfer( address indexed from, address indexed to, uint256 value );\\n  event Approval( address indexed owner, address indexed spender, uint256 value);\\n  using SafeMath for *;\\n\\n  mapping (address => uint256) private _balances;\\n\\n  mapping (address => mapping (address => uint256)) private _allowed;\\n\\n  uint256 private _totalSupply;\\n\\n  constructor(uint totalSupply) {\\n    _balances[msg.sender] = totalSupply;\\n  }\\n\\n  function balanceOf(address owner) public view returns (uint256) {\\n    return _balances[owner];\\n  }\\n\\n\\n  function allowance(address owner, address spender) public view returns (uint256)\\n  {\\n    return _allowed[owner][spender];\\n  }\\n\\n  function transfer(address to, uint256 value) public returns (bool) {\\n    require(value <= _balances[msg.sender]);\\n    require(to != address(0));\\n\\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\\n    _balances[to] = _balances[to].add(value);\\n    emit Transfer(msg.sender, to, value);\\n    return true;\\n  }\\n  // <yes> <report> FRONT_RUNNING\\n  function approve(address spender, uint256 value) public returns (bool) {\\n    require(spender != address(0));\\n     // <yes> <report> FRONT_RUNNING\\n    _allowed[msg.sender][spender] = value;\\n    emit Approval(msg.sender, spender, value);\\n    return true;\\n  }\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n    require(value <= _balances[from]);\\n    require(value <= _allowed[from][msg.sender]);\\n    require(to != address(0));\\n\\n    _balances[from] = _balances[from].sub(value);\\n    _balances[to] = _balances[to].add(value);\\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n    emit Transfer(from, to, value);\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xe14c76d5e7d9f839c91302271b4b752332022b21f2c4914e25be8a947e38b859\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"SafeMath":{"evm":{"deployedBytecode":{"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0f0f1257fa8c107544f1402648a515d00387443255c42e3c6fb31cbbb0839f164736f6c63430008180033","sourceMap":"445:1531:0:-:0;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Math operations with safety checks that revert on error\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Taken from the OpenZeppelin github\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20.sol\":{\"content\":\"/*\\n * @source: https://github.com/SmartContractSecurity/SWC-registry/blob/master/test_cases/transaction_order_dependence/ERC20.sol\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 112,115\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/** Taken from the OpenZeppelin github\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, reverts on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, reverts on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n  * reverts when dividing by zero.\\n  */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0);\\n    return a % b;\\n  }\\n}\\n\\n\\ncontract ERC20 {\\n\\n  event Transfer( address indexed from, address indexed to, uint256 value );\\n  event Approval( address indexed owner, address indexed spender, uint256 value);\\n  using SafeMath for *;\\n\\n  mapping (address => uint256) private _balances;\\n\\n  mapping (address => mapping (address => uint256)) private _allowed;\\n\\n  uint256 private _totalSupply;\\n\\n  constructor(uint totalSupply) {\\n    _balances[msg.sender] = totalSupply;\\n  }\\n\\n  function balanceOf(address owner) public view returns (uint256) {\\n    return _balances[owner];\\n  }\\n\\n\\n  function allowance(address owner, address spender) public view returns (uint256)\\n  {\\n    return _allowed[owner][spender];\\n  }\\n\\n  function transfer(address to, uint256 value) public returns (bool) {\\n    require(value <= _balances[msg.sender]);\\n    require(to != address(0));\\n\\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\\n    _balances[to] = _balances[to].add(value);\\n    emit Transfer(msg.sender, to, value);\\n    return true;\\n  }\\n  // <yes> <report> FRONT_RUNNING\\n  function approve(address spender, uint256 value) public returns (bool) {\\n    require(spender != address(0));\\n     // <yes> <report> FRONT_RUNNING\\n    _allowed[msg.sender][spender] = value;\\n    emit Approval(msg.sender, spender, value);\\n    return true;\\n  }\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n    require(value <= _balances[from]);\\n    require(value <= _allowed[from][msg.sender]);\\n    require(to != address(0));\\n\\n    _balances[from] = _balances[from].sub(value);\\n    _balances[to] = _balances[to].add(value);\\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n    emit Transfer(from, to, value);\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xe14c76d5e7d9f839c91302271b4b752332022b21f2c4914e25be8a947e38b859\",\"license\":\"UNLICENSED\"}},\"version\":1}"}}},"sources":{"ERC20.sol":{"id":0}}}

