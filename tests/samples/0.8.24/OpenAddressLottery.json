{"contracts":{"OpenAddressLottery.sol":{"OpenAddressLottery":{"evm":{"deployedBytecode":{"object":"6080604052600436106100435760003560e01c806337354a68146100b857806341c0e1b5146100f557806380ca7aec1461010c578063d11711a21461012357610044565b5b67016345785d8a000034101580156100a8575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156100b6576100b561012d565b5b005b3480156100c457600080fd5b506100df60048036038101906100da9190610568565b6102c2565b6040516100ec91906105ae565b60405180910390f35b34801561010157600080fd5b5061010a610335565b005b34801561011857600080fd5b506101216103a6565b005b61012b61012d565b005b67016345785d8a000034106102c05760001515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461019957600080fd5b6003546101a5336102c2565b03610268576001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600060073461021191906105f8565b90504781111561021f574790505b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610265573d6000803e3d6000fd5b50505b6103e860025443610279919061063a565b11156102bf576102be60405180608001604052804173ffffffffffffffffffffffffffffffffffffffff1681526020014481526020014581526020014281525061048d565b5b5b565b600060088273ffffffffffffffffffffffffffffffffffffffff166001546040516020016102f192919061068f565b6040516020818303038152906040528051906020012060006020811061031a576103196106bb565b5b1a60f81b60f81c60ff1661032e9190610719565b9050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038d57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103fe57600080fd5b6104066104dd565b3373ffffffffffffffffffffffffffffffffffffffff16816000018181525050600143610433919061063a565b4060001c8160200181815250504173ffffffffffffffffffffffffffffffffffffffff164461046291906105f8565b81604001818152505060073a61047891906105f8565b81606001818152505061048a8161048d565b50565b80600001518160200151826040015183606001516040516020016104b4949392919061074a565b6040516020818303038152906040528051906020012060001c6001819055504360028190555050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105358261050a565b9050919050565b6105458161052a565b811461055057600080fd5b50565b6000813590506105628161053c565b92915050565b60006020828403121561057e5761057d610505565b5b600061058c84828501610553565b91505092915050565b6000819050919050565b6105a881610595565b82525050565b60006020820190506105c3600083018461059f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061060382610595565b915061060e83610595565b925082820261061c81610595565b91508282048414831517610633576106326105c9565b5b5092915050565b600061064582610595565b915061065083610595565b9250828203905081811115610668576106676105c9565b5b92915050565b6000819050919050565b61068961068482610595565b61066e565b82525050565b600061069b8285610678565b6020820191506106ab8284610678565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061072482610595565b915061072f83610595565b92508261073f5761073e6106ea565b5b828206905092915050565b60006107568287610678565b6020820191506107668286610678565b6020820191506107768285610678565b6020820191506107868284610678565b6020820191508190509594505050505056fea26469706673582212204a450167c00ddcf4c379c9bd68fc9920ba8da0ed99c556911228eca2d2cb3dab64736f6c63430008180033","sourceMap":"1131:3241:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4249:9;4238;:20;;:41;;;;;4274:5;;;;;;;;;;4262:17;;:10;:17;;;;4238:41;4235:127;;;4349:13;:11;:13::i;:::-;4235:127;1131:3241;2841:239;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3485:118;;;;;;;;;;;;;:::i;:::-;;3613:485;;;;;;;;;;;;;:::i;:::-;;1916:915;;;:::i;:::-;;;1977:9;1967;:19;2000:7;1964:43;2120:5;2098:27;;:6;:18;2105:10;2098:18;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;2090:36;;;;;;2184:11;;2148:32;2169:10;2148:20;:32::i;:::-;:47;2145:451;;2254:4;2233:6;:18;2240:10;2233:18;;;;;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;2320:8;2339:1;2329:9;:11;;;;:::i;:::-;2320:20;;2407:21;2403:3;:25;2400:107;;;2486:21;2482:25;;2400:107;2560:10;2552:28;;:33;2581:3;2552:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2196:400;2145:451;2641:4;2630:10;;2617:12;:23;;;;:::i;:::-;:28;2614:177;;;2678:113;2685:105;;;;;;;;2721:14;2700:38;;2685:105;;;;2740:16;2685:105;;;;2758:14;2685:105;;;;2774:15;2685:105;;;2678:6;:113::i;:::-;2614:177;1916:915;:::o;2841:239::-;2905:6;3072:1;3044:4;3031:19;;3052:10;;3014:49;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3004:60;;;;;;3065:1;3004:63;;;;;;;:::i;:::-;;;;;2998:70;;2993:76;;:80;;;;:::i;:::-;2989:84;;2841:239;;;:::o;3485:118::-;3538:5;;;;;;;;;;3526:17;;:10;:17;;;3518:26;;;;;;3584:10;3563:33;;;3613:485;3728:5;;;;;;;;;;3716:17;;:10;:17;;;3708:26;;;;;;3800:23;;:::i;:::-;3861:10;3848:25;;3833:1;:12;;:40;;;;;3931:1;3916:12;:16;;;;:::i;:::-;3906:27;3898:36;;3883:1;:12;;:51;;;;;3997:14;3976:38;;3959:16;:55;;;;:::i;:::-;3944:1;:12;;:70;;;;;4053:1;4039:11;:15;;;;:::i;:::-;4024:1;:12;;:30;;;;;4073:9;4080:1;4073:6;:9::i;:::-;3643:455;3613:485::o;3090:385::-;3220:10;:21;;;3255:10;:21;;;3290:10;:21;;;3325:10;:21;;;3190:166;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3180:177;;;;;;3172:186;;3159:10;:199;;;;3456:12;3443:10;:25;;;;3090:385;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;88:117:1:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:77::-;1213:7;1242:5;1231:16;;1176:77;;;:::o;1259:118::-;1346:24;1364:5;1346:24;:::i;:::-;1341:3;1334:37;1259:118;;:::o;1383:222::-;1476:4;1514:2;1503:9;1499:18;1491:26;;1527:71;1595:1;1584:9;1580:17;1571:6;1527:71;:::i;:::-;1383:222;;;;:::o;1611:180::-;1659:77;1656:1;1649:88;1756:4;1753:1;1746:15;1780:4;1777:1;1770:15;1797:410;1837:7;1860:20;1878:1;1860:20;:::i;:::-;1855:25;;1894:20;1912:1;1894:20;:::i;:::-;1889:25;;1949:1;1946;1942:9;1971:30;1989:11;1971:30;:::i;:::-;1960:41;;2150:1;2141:7;2137:15;2134:1;2131:22;2111:1;2104:9;2084:83;2061:139;;2180:18;;:::i;:::-;2061:139;1845:362;1797:410;;;;:::o;2213:194::-;2253:4;2273:20;2291:1;2273:20;:::i;:::-;2268:25;;2307:20;2325:1;2307:20;:::i;:::-;2302:25;;2351:1;2348;2344:9;2336:17;;2375:1;2369:4;2366:11;2363:37;;;2380:18;;:::i;:::-;2363:37;2213:194;;;;:::o;2413:79::-;2452:7;2481:5;2470:16;;2413:79;;;:::o;2498:157::-;2603:45;2623:24;2641:5;2623:24;:::i;:::-;2603:45;:::i;:::-;2598:3;2591:58;2498:157;;:::o;2661:397::-;2801:3;2816:75;2887:3;2878:6;2816:75;:::i;:::-;2916:2;2911:3;2907:12;2900:19;;2929:75;3000:3;2991:6;2929:75;:::i;:::-;3029:2;3024:3;3020:12;3013:19;;3049:3;3042:10;;2661:397;;;;;:::o;3064:180::-;3112:77;3109:1;3102:88;3209:4;3206:1;3199:15;3233:4;3230:1;3223:15;3250:180;3298:77;3295:1;3288:88;3395:4;3392:1;3385:15;3419:4;3416:1;3409:15;3436:176;3468:1;3485:20;3503:1;3485:20;:::i;:::-;3480:25;;3519:20;3537:1;3519:20;:::i;:::-;3514:25;;3558:1;3548:35;;3563:18;;:::i;:::-;3548:35;3604:1;3601;3597:9;3592:14;;3436:176;;;;:::o;3618:679::-;3814:3;3829:75;3900:3;3891:6;3829:75;:::i;:::-;3929:2;3924:3;3920:12;3913:19;;3942:75;4013:3;4004:6;3942:75;:::i;:::-;4042:2;4037:3;4033:12;4026:19;;4055:75;4126:3;4117:6;4055:75;:::i;:::-;4155:2;4150:3;4146:12;4139:19;;4168:75;4239:3;4230:6;4168:75;:::i;:::-;4268:2;4263:3;4259:12;4252:19;;4288:3;4281:10;;3618:679;;;;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"forceReseed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"luckyNumberOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"OpenAddressLottery.sol\":\"OpenAddressLottery\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenAddressLottery.sol\":{\"content\":\"/*\\n * @source: https://etherscan.io/address/0x741f1923974464efd0aa70e77800ba5d9ed18902#code\\n * Upgraded from Solidity 0.4 to 0.8, vulnerability may no longer exist\\n * @vulnerable_at_lines: 93\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n/*\\n * This is a distributed lottery that chooses random addresses as lucky addresses. If these\\n * participate, they get the jackpot: 7 times the price of their bet.\\n * Of course one address can only win once. The owner regularly reseeds the secret\\n * seed of the contract (based on which the lucky addresses are chosen), so if you did not win,\\n * just wait for a reseed and try again!\\n *\\n * Jackpot chance:   1 in 8\\n * Ticket price: Anything larger than (or equal to) 0.1 ETH\\n * Jackpot size: 7 times the ticket price\\n *\\n * HOW TO PARTICIPATE: Just send any amount greater than (or equal to) 0.1 ETH to the contract's address\\n * Keep in mind that your address can only win once\\n *\\n * If the contract doesn't have enough ETH to pay the jackpot, it sends the whole balance.\\n\\n https://www.reddit.com/r/ethdev/comments/7wp363/how_does_this_honeypot_work_it_seems_like_a/\\n*/\\n\\ncontract OpenAddressLottery{\\n    struct SeedComponents{\\n        uint component1;\\n        uint component2;\\n        uint component3;\\n        uint component4;\\n    }\\n    \\n    address owner; //address of the owner\\n    uint private secretSeed; //seed used to calculate number of an address\\n    uint private lastReseed; //last reseed - used to automatically reseed the contract every 1000 blocks\\n    uint LuckyNumber = 7; //if the number of an address equals 7, it wins\\n        \\n    mapping (address => bool) winner; //keeping track of addresses that have already won\\n    \\n    constructor() {\\n        owner = msg.sender;\\n        reseed(SeedComponents(uint(uint160(address(block.coinbase))), block.prevrandao, block.gaslimit, block.timestamp)); //generate a quality random seed\\n    }\\n    \\n    function participate() public payable {\\n        if(msg.value<0.1 ether)\\n            return; //verify ticket price\\n        \\n        // make sure he hasn't won already\\n        require(winner[msg.sender] == false);\\n        \\n        if(luckyNumberOfAddress(msg.sender) == LuckyNumber){ //check if it equals 7\\n            winner[msg.sender] = true; // every address can only win once\\n            \\n            uint win=msg.value*7; //win = 7 times the ticket price\\n            \\n            if(win>address(this).balance) //if the balance isnt sufficient...\\n                win=address(this).balance; //...send everything we've got\\n            payable(msg.sender).transfer(win);\\n        }\\n        \\n        if(block.number-lastReseed>1000) //reseed if needed\\n            reseed(SeedComponents(uint(uint160(address(block.coinbase))), block.prevrandao, block.gaslimit, block.timestamp)); //generate a quality random seed\\n    }\\n    \\n    function luckyNumberOfAddress(address addr) public view returns(uint n){\\n        // calculate the number of current address - 1 in 8 chance\\n        n = uint(uint8(keccak256(abi.encodePacked(uint(uint160(addr)), secretSeed))[0])) % 8;\\n    }\\n    \\n    function reseed(SeedComponents memory components) internal {\\n        secretSeed = uint256(keccak256(abi.encodePacked(\\n            components.component1,\\n            components.component2,\\n            components.component3,\\n            components.component4\\n        ))); //hash the incoming parameters and use the hash to (re)initialize the seed\\n        lastReseed = block.number;\\n    }\\n    \\n    function kill() public {\\n        require(msg.sender==owner);\\n        \\n        selfdestruct(payable(msg.sender));\\n    }\\n    \\n    function forceReseed() public { //reseed initiated by the owner - for testing purposes\\n        require(msg.sender==owner);\\n        // <yes> <report> OTHER - uninitialized storage\\n        SeedComponents memory s;\\n        s.component1 = uint(uint160(msg.sender));\\n        s.component2 = uint256(blockhash(block.number - 1));\\n        s.component3 = block.prevrandao*uint(uint160(address(block.coinbase)));\\n        s.component4 = tx.gasprice * 7;\\n        \\n        reseed(s); //reseed\\n    }\\n    \\n    fallback() external payable { //if someone sends money without any function call, just assume he wanted to participate\\n        if(msg.value>=0.1 ether && msg.sender!=owner) //owner can't participate, he can only fund the jackpot\\n            participate();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1d3110c59c553b00987a196af9e05471b24745e7c76045943f5ecf0b36363776\",\"license\":\"UNLICENSED\"}},\"version\":1}"}}},"errors":[{"component":"general","errorCode":"3628","formattedMessage":"Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.\n  --> OpenAddressLottery.sol:28:1:\n   |\n28 | contract OpenAddressLottery{\n   | ^ (Relevant source part starts here and spans across multiple lines).\nNote: The payable fallback function is defined here.\n   --> OpenAddressLottery.sol:102:5:\n    |\n102 |     fallback() external payable { //if someone sends money without any function call, just assume he wanted to participate\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.","secondarySourceLocations":[{"end":4369,"file":"OpenAddressLottery.sol","message":"The payable fallback function is defined here.","start":4108}],"severity":"warning","sourceLocation":{"end":4372,"file":"OpenAddressLottery.sol","start":1131},"type":"Warning"},{"component":"general","errorCode":"9432","formattedMessage":"Warning: \"prevrandao\" is not supported by the VM version and will be treated as \"difficulty\".\n  --> OpenAddressLottery.sol:45:71:\n   |\n45 |  ... uint160(address(block.coinbase))), block.prevrandao, block.gaslimit, block.timestamp)) ...\n   |                                         ^^^^^^^^^^^^^^^^\n\n","message":"\"prevrandao\" is not supported by the VM version and will be treated as \"difficulty\".","severity":"warning","sourceLocation":{"end":1831,"file":"OpenAddressLottery.sol","start":1815},"type":"Warning"},{"component":"general","errorCode":"9432","formattedMessage":"Warning: \"prevrandao\" is not supported by the VM version and will be treated as \"difficulty\".\n  --> OpenAddressLottery.sol:66:75:\n   |\n66 |  ... uint160(address(block.coinbase))), block.prevrandao, block.gaslimit, block.timestamp)) ...\n   |                                         ^^^^^^^^^^^^^^^^\n\n","message":"\"prevrandao\" is not supported by the VM version and will be treated as \"difficulty\".","severity":"warning","sourceLocation":{"end":2756,"file":"OpenAddressLottery.sol","start":2740},"type":"Warning"},{"component":"general","errorCode":"5159","formattedMessage":"Warning: \"selfdestruct\" has been deprecated. Note that, starting from the Cancun hard fork, the underlying opcode no longer deletes the code and data associated with an account and only transfers its Ether to the beneficiary, unless executed in the same transaction in which the contract was created (see EIP-6780). Any use in newly deployed contracts is strongly discouraged even if the new behavior is taken into account. Future changes to the EVM might further reduce the functionality of the opcode.\n  --> OpenAddressLottery.sol:87:9:\n   |\n87 |         selfdestruct(payable(msg.sender));\n   |         ^^^^^^^^^^^^\n\n","message":"\"selfdestruct\" has been deprecated. Note that, starting from the Cancun hard fork, the underlying opcode no longer deletes the code and data associated with an account and only transfers its Ether to the beneficiary, unless executed in the same transaction in which the contract was created (see EIP-6780). Any use in newly deployed contracts is strongly discouraged even if the new behavior is taken into account. Future changes to the EVM might further reduce the functionality of the opcode.","severity":"warning","sourceLocation":{"end":3575,"file":"OpenAddressLottery.sol","start":3563},"type":"Warning"},{"component":"general","errorCode":"9432","formattedMessage":"Warning: \"prevrandao\" is not supported by the VM version and will be treated as \"difficulty\".\n  --> OpenAddressLottery.sol:96:24:\n   |\n96 |         s.component3 = block.prevrandao*uint(uint160(address(block.coinbase)));\n   |                        ^^^^^^^^^^^^^^^^\n\n","message":"\"prevrandao\" is not supported by the VM version and will be treated as \"difficulty\".","severity":"warning","sourceLocation":{"end":3975,"file":"OpenAddressLottery.sol","start":3959},"type":"Warning"}],"sources":{"OpenAddressLottery.sol":{"id":0}}}

