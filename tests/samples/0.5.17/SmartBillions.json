{"contracts":{"SmartBillions.sol":{"BasicToken":{"evm":{"deployedBytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"return\":\"An uint representing the amount owned by the passed address.\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"BasicToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\n * Upgraded from Solidity 0.4 to 0.5, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 524,561,701,703,705,707,709,711,713,715,717,719\\n */\\n\\npragma solidity ^0.5.0;\\n\\nlibrary SafeMath {\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n  function add(uint a, uint b) internal pure returns (uint) {\\n    uint c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n}\\n\\ncontract ERC20Basic {\\n  uint public totalSupply;\\n  address public owner; //owner\\n  address public animator; //animator\\n  function balanceOf(address who) public view returns (uint);\\n  function transfer(address to, uint value) public;\\n  event Transfer(address indexed from, address indexed to, uint value);\\n  function commitDividend(address who) internal; // pays remaining dividend\\n}\\n\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view returns (uint);\\n  function transferFrom(address from, address to, uint value) public;\\n  function approve(address spender, uint value) public;\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint;\\n  mapping(address => uint) balances;\\n\\n  modifier onlyPayloadSize(uint size) {\\n     assert(msg.data.length >= size + 4);\\n     _;\\n  }\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n    commitDividend(msg.sender);\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    if(_to == address(this)) {\\n        commitDividend(owner);\\n        balances[owner] = balances[owner].add(_value);\\n        emit Transfer(msg.sender, owner, _value);\\n    }\\n    else {\\n        commitDividend(_to);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n    }\\n  }\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\ncontract StandardToken is BasicToken, ERC20 {\\n  mapping (address => mapping (address => uint)) allowed;\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint the amout of tokens to be transfered\\n   */\\n  function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n    uint _allowance = allowed[_from][msg.sender];\\n    commitDividend(_from);\\n    commitDividend(_to);\\n    balances[_to] = balances[_to].add(_value);\\n    balances[_from] = balances[_from].sub(_value);\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\n    emit Transfer(_from, _to, _value);\\n  }\\n  /**\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint _value) public {\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n  }\\n  /**\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view returns (uint remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title SmartBillions contract\\n */\\ncontract SmartBillions is StandardToken {\\n\\n    // metadata\\n    string public constant name = \\\"SmartBillions Token\\\";\\n    string public constant symbol = \\\"PLAY\\\";\\n    uint public constant decimals = 0;\\n\\n    // contract state\\n    struct Wallet {\\n        uint208 balance; // current balance of user\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\n    }\\n    mapping (address => Wallet) wallets;\\n    struct Bet {\\n        uint192 value; // bet size\\n        uint32 betHash; // selected numbers\\n        uint32 blockNum; // blocknumber when lottery runs\\n    }\\n    mapping (address => Bet) bets;\\n\\n    uint public walletBalance = 0; // sum of funds in wallets\\n\\n    // investment parameters\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\n    uint public investBalance = 0; // funding from investors\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\n    uint public dividendPeriod = 1;\\n    uint[] public dividends; // dividens collected per period, growing array\\n\\n    // betting parameters\\n    uint public maxWin = 0; // maximum prize won\\n    uint public hashFirst = 0; // start time of building hashes database\\n    uint public hashLast = 0; // last saved block of hashes\\n    uint public hashNext = 0; // next available bet block.number\\n    uint public hashBetSum = 0; // used bet volume of next block\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\n    uint[] public hashes; // space for storing lottery results\\n\\n    // constants\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\n\\n    // events\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\n    event LogRecordWin(address indexed player, uint amount);\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\n    event LogDividend(address indexed investor, uint amount, uint period);\\n\\n    modifier onlyOwner() {\\n        assert(msg.sender == owner);\\n        _;\\n    }\\n\\n    modifier onlyAnimator() {\\n        assert(msg.sender == animator);\\n        _;\\n    }\\n\\n    // constructor\\n    constructor() public {\\n        owner = msg.sender;\\n        animator = msg.sender;\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\n        dividends.push(0); // not used\\n        dividends.push(0); // current dividend\\n    }\\n\\n/* getters */\\n\\n    /**\\n     * @dev Show length of allocated swap space\\n     */\\n    function hashesLength() external view returns (uint) {\\n        return uint(hashes.length);\\n    }\\n\\n    /**\\n     * @dev Show balance of wallet\\n     * @param _owner The address of the account.\\n     */\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].balance);\\n    }\\n\\n    /**\\n     * @dev Show last dividend period processed\\n     * @param _owner The address of the account.\\n     */\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].lastDividendPeriod);\\n    }\\n\\n    /**\\n     * @dev Show block number when withdraw can continue\\n     * @param _owner The address of the account.\\n     */\\n    function walletBlockOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].nextWithdrawBlock);\\n    }\\n\\n    /**\\n     * @dev Show bet size.\\n     * @param _owner The address of the player.\\n     */\\n    function betValueOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].value);\\n    }\\n\\n    /**\\n     * @dev Show block number of lottery run for the bet.\\n     * @param _owner The address of the player.\\n     */\\n    function betHashOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].betHash);\\n    }\\n\\n    /**\\n     * @dev Show block number of lottery run for the bet.\\n     * @param _owner The address of the player.\\n     */\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].blockNum);\\n    }\\n\\n    /**\\n     * @dev Print number of block till next expected dividend payment\\n     */\\n    function dividendsBlocks() external view returns (uint) {\\n        if(investStart > 0) {\\n            return(0);\\n        }\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\n        if(period > dividendPeriod) {\\n            return(0);\\n        }\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\n    }\\n\\n/* administrative functions */\\n\\n    /**\\n     * @dev Change owner.\\n     * @param _who The address of new owner.\\n     */\\n    function changeOwner(address _who) external onlyOwner {\\n        assert(_who != address(0));\\n        commitDividend(msg.sender);\\n        commitDividend(_who);\\n        owner = _who;\\n    }\\n\\n    /**\\n     * @dev Change animator.\\n     * @param _who The address of new animator.\\n     */\\n    function changeAnimator(address _who) external onlyAnimator {\\n        assert(_who != address(0));\\n        commitDividend(msg.sender);\\n        commitDividend(_who);\\n        animator = _who;\\n    }\\n\\n    /**\\n     * @dev Set ICO Start block.\\n     * @param _when The block number of the ICO.\\n     */\\n    function setInvestStart(uint _when) external onlyOwner {\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\n        investStart = _when;\\n    }\\n\\n    /**\\n     * @dev Set maximum bet size per block\\n     * @param _maxsum The maximum bet size in wei.\\n     */\\n    function setBetMax(uint _maxsum) external onlyOwner {\\n        hashBetMax = _maxsum;\\n    }\\n\\n    /**\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\n     */\\n    function resetBet() external onlyOwner {\\n        hashNext = block.number + 3;\\n        hashBetSum = 0;\\n    }\\n\\n    /**\\n     * @dev Move funds to cold storage\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\n     * @param _amount The amount of wei to move to cold storage\\n     */\\n    function coldStore(uint _amount) external onlyOwner {\\n        houseKeeping();\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\n        }\\n        msg.sender.transfer(_amount);\\n        coldStoreLast = block.number;\\n    }\\n\\n    /**\\n     * @dev Move funds to contract jackpot\\n     */\\n    function hotStore() payable external {\\n        houseKeeping();\\n    }\\n\\n/* housekeeping functions */\\n\\n    /**\\n     * @dev Update accounting\\n     */\\n    function houseKeeping() public {\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\n            investStart = 0; // start dividend payments\\n        }\\n        else {\\n            if(hashFirst > 0){\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\n                if(period > dividends.length - 2) {\\n                    dividends.push(0);\\n                }\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\n                    dividendPeriod++;\\n                }\\n            }\\n        }\\n    }\\n\\n/* payments */\\n\\n    /**\\n     * @dev Pay balance from wallet\\n     */\\n    function payWallet() public {\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\n            uint balance = wallets[msg.sender].balance;\\n            wallets[msg.sender].balance = 0;\\n            walletBalance -= balance;\\n            pay(balance);\\n        }\\n    }\\n\\n    function pay(uint _amount) private {\\n        uint maxpay = address(this).balance / 2;\\n        if(maxpay >= _amount) {\\n            msg.sender.transfer(_amount);\\n            if(_amount > 1 finney) {\\n                houseKeeping();\\n            }\\n        }\\n        else {\\n            uint keepbalance = _amount - maxpay;\\n            walletBalance += keepbalance;\\n            wallets[msg.sender].balance += uint208(keepbalance);\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\n            msg.sender.transfer(maxpay);\\n        }\\n    }\\n\\n/* investment functions */\\n\\n    /**\\n     * @dev Buy tokens\\n     */\\n    function investDirect() payable external {\\n        invest(owner);\\n    }\\n\\n    /**\\n     * @dev Buy tokens with affiliate partner\\n     * @param _partner Affiliate partner\\n     */\\n    function invest(address _partner) public payable {\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\n        uint investing = msg.value;\\n        if(investing > investBalanceMax - investBalance) {\\n            investing = investBalanceMax - investBalance;\\n            investBalance = investBalanceMax;\\n            investStart = 0; // close investment round\\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\\n        }\\n        else{\\n            investBalance += investing;\\n        }\\n        if(_partner == address(0) || _partner == owner){\\n            walletBalance += investing / 10;\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\n        else{\\n            walletBalance += (investing * 5 / 100) * 2;\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\n        uint senderBalance = investing / 10**15;\\n        uint ownerBalance = investing * 16 / 10**17  ;\\n        uint animatorBalance = investing * 10 / 10**17  ;\\n        balances[msg.sender] += senderBalance;\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\n        emit LogInvestment(msg.sender,_partner,investing);\\n    }\\n\\n    /**\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\n     */\\n    function disinvest() external {\\n        require(investStart == 0);\\n        commitDividend(msg.sender);\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\n        investBalance -= initialInvestment;\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\n        payWallet();\\n    }\\n\\n    /**\\n     * @dev Pay unpaid dividends\\n     */\\n    function payDividends() external {\\n        require(investStart == 0);\\n        commitDividend(msg.sender);\\n        payWallet();\\n    }\\n\\n    /**\\n     * @dev Commit remaining dividends before transfer of tokens\\n     */\\n    function commitDividend(address _who) internal {\\n        uint last = wallets[_who].lastDividendPeriod;\\n        if((balances[_who]==0) || (last==0)){\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\n            return;\\n        }\\n        if(last==dividendPeriod) {\\n            return;\\n        }\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\n        uint balance = 0;\\n        for(;last<dividendPeriod;last++) {\\n            balance += share * dividends[last];\\n        }\\n        balance = (balance / 0xffffffff);\\n        walletBalance += balance;\\n        wallets[_who].balance += uint208(balance);\\n        wallets[_who].lastDividendPeriod = uint16(last);\\n        emit LogDividend(_who,balance,last);\\n    }\\n\\n/* lottery functions */\\n\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\n        uint24 bethash = uint24(_player.betHash);\\n        uint24 hit = bethash ^ _hash;\\n        uint24 matches =\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\n        if(matches == 6){\\n            return(uint(_player.value) * 7000000);\\n        }\\n        if(matches == 5){\\n            return(uint(_player.value) * 20000);\\n        }\\n        if(matches == 4){\\n            return(uint(_player.value) * 500);\\n        }\\n        if(matches == 3){\\n            return(uint(_player.value) * 25);\\n        }\\n        if(matches == 2){\\n            return(uint(_player.value) * 3);\\n        }\\n        return(0);\\n    }\\n\\n    /**\\n     * @dev Check if won in lottery\\n     */\\n    function betOf(address _who) external view returns (uint)  {\\n        Bet memory player = bets[_who];\\n        if( (player.value==0) ||\\n            (player.blockNum<=1) ||\\n            (block.number<player.blockNum) ||\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\n            return(0);\\n        }\\n        if(block.number<player.blockNum+256){\\n            // <yes> <report> BAD_RANDOMNESS\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\n        }\\n        if(hashFirst>0){\\n            uint32 hash = getHash(player.blockNum);\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\n                return(uint(player.value));\\n            }\\n            else{\\n                return(betPrize(player,uint24(hash)));\\n            }\\n\\t}\\n        return(0);\\n    }\\n\\n    /**\\n     * @dev Check if won in lottery\\n     */\\n    function won() public {\\n        Bet memory player = bets[msg.sender];\\n        if(player.blockNum==0){ // create a new player\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n            return;\\n        }\\n        if((player.value==0) || (player.blockNum==1)){\\n            payWallet();\\n            return;\\n        }\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n            return;\\n        }\\n        uint prize = 0;\\n        uint32 hash = 0;\\n        if(block.number<player.blockNum+256){\\n            // <yes> <report> BAD_RANDOMNESS\\n            hash = uint24(uint(blockhash(player.blockNum)));\\n            prize = betPrize(player,uint24(hash));\\n        }\\n        else {\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\n                hash = getHash(player.blockNum);\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\n                    prize = uint(player.value);\\n                }\\n                else{\\n                    prize = betPrize(player,uint24(hash));\\n                }\\n\\t    }\\n            else{\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n                return();\\n            }\\n        }\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n        if(prize>0) {\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\n            if(prize > maxWin){\\n                maxWin = prize;\\n                emit LogRecordWin(msg.sender,prize);\\n            }\\n            pay(prize);\\n        }\\n        else{\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\n        }\\n    }\\n\\n    /**\\n     * @dev Send ether to buy tokens during ICO\\n     * @dev or send less than 1 ether to contract to play\\n     * @dev or send 0 to collect prize\\n     */\\n    function () external payable {\\n        if(msg.value > 0){\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\n                invest(owner);\\n            }\\n            else{ // if not ICO running payment to contract is treated as play\\n                play();\\n            }\\n            return;\\n        }\\n        //check for dividends and other assets\\n        if(investStart == 0 && balances[msg.sender]>0){\\n            commitDividend(msg.sender);}\\n        won(); // will run payWallet() if nothing else available\\n    }\\n\\n    /**\\n     * @dev Play in lottery\\n     */\\n    function play() payable public returns (uint) {\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\n    }\\n\\n    /**\\n     * @dev Play in lottery with random numbers\\n     * @param _partner Affiliate partner\\n     */\\n    function playRandom(address _partner) payable public returns (uint) {\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\n    }\\n\\n    /**\\n     * @dev Play in lottery with own numbers\\n     * @param _partner Affiliate partner\\n     */\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\n        won(); // check if player did not win\\n        uint24 bethash = uint24(_hash);\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\n        if(msg.value > 0){\\n            if(investStart==0) { // dividends only after investment finished\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\n            }\\n            if(_partner != address(0)) {\\n                uint fee = msg.value / 100;\\n                walletBalance += fee;\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\n            }\\n            if(hashNext < block.number + 3) {\\n                hashNext = block.number + 3;\\n                hashBetSum = msg.value;\\n            }\\n            else{\\n                if(hashBetSum > hashBetMax) {\\n                    hashNext++;\\n                    hashBetSum = msg.value;\\n                }\\n                else{\\n                    hashBetSum += msg.value;\\n                }\\n            }\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\n        }\\n        putHash(); // players help collecing data\\n        return(hashNext);\\n    }\\n\\n/* database functions */\\n\\n    /**\\n     * @dev Create hash data swap space\\n     * @param _sadd Number of hashes to add (<=256)\\n     */\\n    function addHashes(uint _sadd) public returns (uint) {\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\n        uint n = hashes.length;\\n        if(n + _sadd > hashesSize){\\n            hashes.length = hashesSize;\\n        }\\n        else{\\n            hashes.length += _sadd;\\n        }\\n        for(;n<hashes.length;n++){ // make sure to burn gas\\n            hashes[n] = 1;\\n        }\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\n            hashFirst = block.number - ( block.number % 10);\\n            hashLast = hashFirst;\\n        }\\n        return(hashes.length);\\n    }\\n\\n    /**\\n     * @dev Create hash data swap space, add 128 hashes\\n     */\\n    function addHashes128() external returns (uint) {\\n        return(addHashes(128));\\n    }\\n\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\n        // <yes> <report> BAD_RANDOMNESS\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\n        // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\n            | ( ( uint(_delta) / hashesSize) << 240));\\n    }\\n\\n    function getHash(uint _block) private view returns (uint32) {\\n        uint delta = (_block - hashFirst) / 10;\\n        uint hash = hashes[delta % hashesSize];\\n        if(delta / hashesSize != hash >> 240) {\\n            return(0x1000000); // load failed, incorrect data in hashes\\n        }\\n        uint slotp = (_block - hashFirst) % 10;\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\n    }\\n\\n    /**\\n     * @dev Fill hash data\\n     */\\n    function putHash() public returns (bool) {\\n        uint lastb = hashLast;\\n        if(lastb == 0 || block.number <= lastb + 10) {\\n            return(false);\\n        }\\n        uint blockn256;\\n        if(block.number<256) { // useless test for testnet :-(\\n            blockn256 = 0;\\n        }\\n        else{\\n            blockn256 = block.number - 256;\\n        }\\n        if(lastb < blockn256) {\\n            uint num = blockn256;\\n            num += num % 10;\\n            lastb = num;\\n        }\\n        uint delta = (lastb - hashFirst) / 10;\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\n        hashLast = lastb + 10;\\n        return(true);\\n    }\\n\\n    /**\\n     * @dev Fill hash data many times\\n     * @param _num Number of iterations\\n     */\\n    function putHashes(uint _num) external {\\n        uint n=0;\\n        for(;n<_num;n++){\\n            if(!putHash()){\\n                return;\\n            }\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x587e66eb81eda2e15c6f15fd49e3c1398a4e904aeaa838671b86414337156fa6\"}},\"version\":1}"},"ERC20":{"evm":{"deployedBytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\n * Upgraded from Solidity 0.4 to 0.5, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 524,561,701,703,705,707,709,711,713,715,717,719\\n */\\n\\npragma solidity ^0.5.0;\\n\\nlibrary SafeMath {\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n  function add(uint a, uint b) internal pure returns (uint) {\\n    uint c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n}\\n\\ncontract ERC20Basic {\\n  uint public totalSupply;\\n  address public owner; //owner\\n  address public animator; //animator\\n  function balanceOf(address who) public view returns (uint);\\n  function transfer(address to, uint value) public;\\n  event Transfer(address indexed from, address indexed to, uint value);\\n  function commitDividend(address who) internal; // pays remaining dividend\\n}\\n\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view returns (uint);\\n  function transferFrom(address from, address to, uint value) public;\\n  function approve(address spender, uint value) public;\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint;\\n  mapping(address => uint) balances;\\n\\n  modifier onlyPayloadSize(uint size) {\\n     assert(msg.data.length >= size + 4);\\n     _;\\n  }\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n    commitDividend(msg.sender);\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    if(_to == address(this)) {\\n        commitDividend(owner);\\n        balances[owner] = balances[owner].add(_value);\\n        emit Transfer(msg.sender, owner, _value);\\n    }\\n    else {\\n        commitDividend(_to);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n    }\\n  }\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\ncontract StandardToken is BasicToken, ERC20 {\\n  mapping (address => mapping (address => uint)) allowed;\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint the amout of tokens to be transfered\\n   */\\n  function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n    uint _allowance = allowed[_from][msg.sender];\\n    commitDividend(_from);\\n    commitDividend(_to);\\n    balances[_to] = balances[_to].add(_value);\\n    balances[_from] = balances[_from].sub(_value);\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\n    emit Transfer(_from, _to, _value);\\n  }\\n  /**\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint _value) public {\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n  }\\n  /**\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view returns (uint remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title SmartBillions contract\\n */\\ncontract SmartBillions is StandardToken {\\n\\n    // metadata\\n    string public constant name = \\\"SmartBillions Token\\\";\\n    string public constant symbol = \\\"PLAY\\\";\\n    uint public constant decimals = 0;\\n\\n    // contract state\\n    struct Wallet {\\n        uint208 balance; // current balance of user\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\n    }\\n    mapping (address => Wallet) wallets;\\n    struct Bet {\\n        uint192 value; // bet size\\n        uint32 betHash; // selected numbers\\n        uint32 blockNum; // blocknumber when lottery runs\\n    }\\n    mapping (address => Bet) bets;\\n\\n    uint public walletBalance = 0; // sum of funds in wallets\\n\\n    // investment parameters\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\n    uint public investBalance = 0; // funding from investors\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\n    uint public dividendPeriod = 1;\\n    uint[] public dividends; // dividens collected per period, growing array\\n\\n    // betting parameters\\n    uint public maxWin = 0; // maximum prize won\\n    uint public hashFirst = 0; // start time of building hashes database\\n    uint public hashLast = 0; // last saved block of hashes\\n    uint public hashNext = 0; // next available bet block.number\\n    uint public hashBetSum = 0; // used bet volume of next block\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\n    uint[] public hashes; // space for storing lottery results\\n\\n    // constants\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\n\\n    // events\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\n    event LogRecordWin(address indexed player, uint amount);\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\n    event LogDividend(address indexed investor, uint amount, uint period);\\n\\n    modifier onlyOwner() {\\n        assert(msg.sender == owner);\\n        _;\\n    }\\n\\n    modifier onlyAnimator() {\\n        assert(msg.sender == animator);\\n        _;\\n    }\\n\\n    // constructor\\n    constructor() public {\\n        owner = msg.sender;\\n        animator = msg.sender;\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\n        dividends.push(0); // not used\\n        dividends.push(0); // current dividend\\n    }\\n\\n/* getters */\\n\\n    /**\\n     * @dev Show length of allocated swap space\\n     */\\n    function hashesLength() external view returns (uint) {\\n        return uint(hashes.length);\\n    }\\n\\n    /**\\n     * @dev Show balance of wallet\\n     * @param _owner The address of the account.\\n     */\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].balance);\\n    }\\n\\n    /**\\n     * @dev Show last dividend period processed\\n     * @param _owner The address of the account.\\n     */\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].lastDividendPeriod);\\n    }\\n\\n    /**\\n     * @dev Show block number when withdraw can continue\\n     * @param _owner The address of the account.\\n     */\\n    function walletBlockOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].nextWithdrawBlock);\\n    }\\n\\n    /**\\n     * @dev Show bet size.\\n     * @param _owner The address of the player.\\n     */\\n    function betValueOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].value);\\n    }\\n\\n    /**\\n     * @dev Show block number of lottery run for the bet.\\n     * @param _owner The address of the player.\\n     */\\n    function betHashOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].betHash);\\n    }\\n\\n    /**\\n     * @dev Show block number of lottery run for the bet.\\n     * @param _owner The address of the player.\\n     */\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].blockNum);\\n    }\\n\\n    /**\\n     * @dev Print number of block till next expected dividend payment\\n     */\\n    function dividendsBlocks() external view returns (uint) {\\n        if(investStart > 0) {\\n            return(0);\\n        }\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\n        if(period > dividendPeriod) {\\n            return(0);\\n        }\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\n    }\\n\\n/* administrative functions */\\n\\n    /**\\n     * @dev Change owner.\\n     * @param _who The address of new owner.\\n     */\\n    function changeOwner(address _who) external onlyOwner {\\n        assert(_who != address(0));\\n        commitDividend(msg.sender);\\n        commitDividend(_who);\\n        owner = _who;\\n    }\\n\\n    /**\\n     * @dev Change animator.\\n     * @param _who The address of new animator.\\n     */\\n    function changeAnimator(address _who) external onlyAnimator {\\n        assert(_who != address(0));\\n        commitDividend(msg.sender);\\n        commitDividend(_who);\\n        animator = _who;\\n    }\\n\\n    /**\\n     * @dev Set ICO Start block.\\n     * @param _when The block number of the ICO.\\n     */\\n    function setInvestStart(uint _when) external onlyOwner {\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\n        investStart = _when;\\n    }\\n\\n    /**\\n     * @dev Set maximum bet size per block\\n     * @param _maxsum The maximum bet size in wei.\\n     */\\n    function setBetMax(uint _maxsum) external onlyOwner {\\n        hashBetMax = _maxsum;\\n    }\\n\\n    /**\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\n     */\\n    function resetBet() external onlyOwner {\\n        hashNext = block.number + 3;\\n        hashBetSum = 0;\\n    }\\n\\n    /**\\n     * @dev Move funds to cold storage\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\n     * @param _amount The amount of wei to move to cold storage\\n     */\\n    function coldStore(uint _amount) external onlyOwner {\\n        houseKeeping();\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\n        }\\n        msg.sender.transfer(_amount);\\n        coldStoreLast = block.number;\\n    }\\n\\n    /**\\n     * @dev Move funds to contract jackpot\\n     */\\n    function hotStore() payable external {\\n        houseKeeping();\\n    }\\n\\n/* housekeeping functions */\\n\\n    /**\\n     * @dev Update accounting\\n     */\\n    function houseKeeping() public {\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\n            investStart = 0; // start dividend payments\\n        }\\n        else {\\n            if(hashFirst > 0){\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\n                if(period > dividends.length - 2) {\\n                    dividends.push(0);\\n                }\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\n                    dividendPeriod++;\\n                }\\n            }\\n        }\\n    }\\n\\n/* payments */\\n\\n    /**\\n     * @dev Pay balance from wallet\\n     */\\n    function payWallet() public {\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\n            uint balance = wallets[msg.sender].balance;\\n            wallets[msg.sender].balance = 0;\\n            walletBalance -= balance;\\n            pay(balance);\\n        }\\n    }\\n\\n    function pay(uint _amount) private {\\n        uint maxpay = address(this).balance / 2;\\n        if(maxpay >= _amount) {\\n            msg.sender.transfer(_amount);\\n            if(_amount > 1 finney) {\\n                houseKeeping();\\n            }\\n        }\\n        else {\\n            uint keepbalance = _amount - maxpay;\\n            walletBalance += keepbalance;\\n            wallets[msg.sender].balance += uint208(keepbalance);\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\n            msg.sender.transfer(maxpay);\\n        }\\n    }\\n\\n/* investment functions */\\n\\n    /**\\n     * @dev Buy tokens\\n     */\\n    function investDirect() payable external {\\n        invest(owner);\\n    }\\n\\n    /**\\n     * @dev Buy tokens with affiliate partner\\n     * @param _partner Affiliate partner\\n     */\\n    function invest(address _partner) public payable {\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\n        uint investing = msg.value;\\n        if(investing > investBalanceMax - investBalance) {\\n            investing = investBalanceMax - investBalance;\\n            investBalance = investBalanceMax;\\n            investStart = 0; // close investment round\\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\\n        }\\n        else{\\n            investBalance += investing;\\n        }\\n        if(_partner == address(0) || _partner == owner){\\n            walletBalance += investing / 10;\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\n        else{\\n            walletBalance += (investing * 5 / 100) * 2;\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\n        uint senderBalance = investing / 10**15;\\n        uint ownerBalance = investing * 16 / 10**17  ;\\n        uint animatorBalance = investing * 10 / 10**17  ;\\n        balances[msg.sender] += senderBalance;\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\n        emit LogInvestment(msg.sender,_partner,investing);\\n    }\\n\\n    /**\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\n     */\\n    function disinvest() external {\\n        require(investStart == 0);\\n        commitDividend(msg.sender);\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\n        investBalance -= initialInvestment;\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\n        payWallet();\\n    }\\n\\n    /**\\n     * @dev Pay unpaid dividends\\n     */\\n    function payDividends() external {\\n        require(investStart == 0);\\n        commitDividend(msg.sender);\\n        payWallet();\\n    }\\n\\n    /**\\n     * @dev Commit remaining dividends before transfer of tokens\\n     */\\n    function commitDividend(address _who) internal {\\n        uint last = wallets[_who].lastDividendPeriod;\\n        if((balances[_who]==0) || (last==0)){\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\n            return;\\n        }\\n        if(last==dividendPeriod) {\\n            return;\\n        }\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\n        uint balance = 0;\\n        for(;last<dividendPeriod;last++) {\\n            balance += share * dividends[last];\\n        }\\n        balance = (balance / 0xffffffff);\\n        walletBalance += balance;\\n        wallets[_who].balance += uint208(balance);\\n        wallets[_who].lastDividendPeriod = uint16(last);\\n        emit LogDividend(_who,balance,last);\\n    }\\n\\n/* lottery functions */\\n\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\n        uint24 bethash = uint24(_player.betHash);\\n        uint24 hit = bethash ^ _hash;\\n        uint24 matches =\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\n        if(matches == 6){\\n            return(uint(_player.value) * 7000000);\\n        }\\n        if(matches == 5){\\n            return(uint(_player.value) * 20000);\\n        }\\n        if(matches == 4){\\n            return(uint(_player.value) * 500);\\n        }\\n        if(matches == 3){\\n            return(uint(_player.value) * 25);\\n        }\\n        if(matches == 2){\\n            return(uint(_player.value) * 3);\\n        }\\n        return(0);\\n    }\\n\\n    /**\\n     * @dev Check if won in lottery\\n     */\\n    function betOf(address _who) external view returns (uint)  {\\n        Bet memory player = bets[_who];\\n        if( (player.value==0) ||\\n            (player.blockNum<=1) ||\\n            (block.number<player.blockNum) ||\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\n            return(0);\\n        }\\n        if(block.number<player.blockNum+256){\\n            // <yes> <report> BAD_RANDOMNESS\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\n        }\\n        if(hashFirst>0){\\n            uint32 hash = getHash(player.blockNum);\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\n                return(uint(player.value));\\n            }\\n            else{\\n                return(betPrize(player,uint24(hash)));\\n            }\\n\\t}\\n        return(0);\\n    }\\n\\n    /**\\n     * @dev Check if won in lottery\\n     */\\n    function won() public {\\n        Bet memory player = bets[msg.sender];\\n        if(player.blockNum==0){ // create a new player\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n            return;\\n        }\\n        if((player.value==0) || (player.blockNum==1)){\\n            payWallet();\\n            return;\\n        }\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n            return;\\n        }\\n        uint prize = 0;\\n        uint32 hash = 0;\\n        if(block.number<player.blockNum+256){\\n            // <yes> <report> BAD_RANDOMNESS\\n            hash = uint24(uint(blockhash(player.blockNum)));\\n            prize = betPrize(player,uint24(hash));\\n        }\\n        else {\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\n                hash = getHash(player.blockNum);\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\n                    prize = uint(player.value);\\n                }\\n                else{\\n                    prize = betPrize(player,uint24(hash));\\n                }\\n\\t    }\\n            else{\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n                return();\\n            }\\n        }\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n        if(prize>0) {\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\n            if(prize > maxWin){\\n                maxWin = prize;\\n                emit LogRecordWin(msg.sender,prize);\\n            }\\n            pay(prize);\\n        }\\n        else{\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\n        }\\n    }\\n\\n    /**\\n     * @dev Send ether to buy tokens during ICO\\n     * @dev or send less than 1 ether to contract to play\\n     * @dev or send 0 to collect prize\\n     */\\n    function () external payable {\\n        if(msg.value > 0){\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\n                invest(owner);\\n            }\\n            else{ // if not ICO running payment to contract is treated as play\\n                play();\\n            }\\n            return;\\n        }\\n        //check for dividends and other assets\\n        if(investStart == 0 && balances[msg.sender]>0){\\n            commitDividend(msg.sender);}\\n        won(); // will run payWallet() if nothing else available\\n    }\\n\\n    /**\\n     * @dev Play in lottery\\n     */\\n    function play() payable public returns (uint) {\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\n    }\\n\\n    /**\\n     * @dev Play in lottery with random numbers\\n     * @param _partner Affiliate partner\\n     */\\n    function playRandom(address _partner) payable public returns (uint) {\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\n    }\\n\\n    /**\\n     * @dev Play in lottery with own numbers\\n     * @param _partner Affiliate partner\\n     */\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\n        won(); // check if player did not win\\n        uint24 bethash = uint24(_hash);\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\n        if(msg.value > 0){\\n            if(investStart==0) { // dividends only after investment finished\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\n            }\\n            if(_partner != address(0)) {\\n                uint fee = msg.value / 100;\\n                walletBalance += fee;\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\n            }\\n            if(hashNext < block.number + 3) {\\n                hashNext = block.number + 3;\\n                hashBetSum = msg.value;\\n            }\\n            else{\\n                if(hashBetSum > hashBetMax) {\\n                    hashNext++;\\n                    hashBetSum = msg.value;\\n                }\\n                else{\\n                    hashBetSum += msg.value;\\n                }\\n            }\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\n        }\\n        putHash(); // players help collecing data\\n        return(hashNext);\\n    }\\n\\n/* database functions */\\n\\n    /**\\n     * @dev Create hash data swap space\\n     * @param _sadd Number of hashes to add (<=256)\\n     */\\n    function addHashes(uint _sadd) public returns (uint) {\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\n        uint n = hashes.length;\\n        if(n + _sadd > hashesSize){\\n            hashes.length = hashesSize;\\n        }\\n        else{\\n            hashes.length += _sadd;\\n        }\\n        for(;n<hashes.length;n++){ // make sure to burn gas\\n            hashes[n] = 1;\\n        }\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\n            hashFirst = block.number - ( block.number % 10);\\n            hashLast = hashFirst;\\n        }\\n        return(hashes.length);\\n    }\\n\\n    /**\\n     * @dev Create hash data swap space, add 128 hashes\\n     */\\n    function addHashes128() external returns (uint) {\\n        return(addHashes(128));\\n    }\\n\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\n        // <yes> <report> BAD_RANDOMNESS\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\n        // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\n            | ( ( uint(_delta) / hashesSize) << 240));\\n    }\\n\\n    function getHash(uint _block) private view returns (uint32) {\\n        uint delta = (_block - hashFirst) / 10;\\n        uint hash = hashes[delta % hashesSize];\\n        if(delta / hashesSize != hash >> 240) {\\n            return(0x1000000); // load failed, incorrect data in hashes\\n        }\\n        uint slotp = (_block - hashFirst) % 10;\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\n    }\\n\\n    /**\\n     * @dev Fill hash data\\n     */\\n    function putHash() public returns (bool) {\\n        uint lastb = hashLast;\\n        if(lastb == 0 || block.number <= lastb + 10) {\\n            return(false);\\n        }\\n        uint blockn256;\\n        if(block.number<256) { // useless test for testnet :-(\\n            blockn256 = 0;\\n        }\\n        else{\\n            blockn256 = block.number - 256;\\n        }\\n        if(lastb < blockn256) {\\n            uint num = blockn256;\\n            num += num % 10;\\n            lastb = num;\\n        }\\n        uint delta = (lastb - hashFirst) / 10;\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\n        hashLast = lastb + 10;\\n        return(true);\\n    }\\n\\n    /**\\n     * @dev Fill hash data many times\\n     * @param _num Number of iterations\\n     */\\n    function putHashes(uint _num) external {\\n        uint n=0;\\n        for(;n<_num;n++){\\n            if(!putHash()){\\n                return;\\n            }\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x587e66eb81eda2e15c6f15fd49e3c1398a4e904aeaa838671b86414337156fa6\"}},\"version\":1}"},"ERC20Basic":{"evm":{"deployedBytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"ERC20Basic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\n * Upgraded from Solidity 0.4 to 0.5, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 524,561,701,703,705,707,709,711,713,715,717,719\\n */\\n\\npragma solidity ^0.5.0;\\n\\nlibrary SafeMath {\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n  function add(uint a, uint b) internal pure returns (uint) {\\n    uint c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n}\\n\\ncontract ERC20Basic {\\n  uint public totalSupply;\\n  address public owner; //owner\\n  address public animator; //animator\\n  function balanceOf(address who) public view returns (uint);\\n  function transfer(address to, uint value) public;\\n  event Transfer(address indexed from, address indexed to, uint value);\\n  function commitDividend(address who) internal; // pays remaining dividend\\n}\\n\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view returns (uint);\\n  function transferFrom(address from, address to, uint value) public;\\n  function approve(address spender, uint value) public;\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint;\\n  mapping(address => uint) balances;\\n\\n  modifier onlyPayloadSize(uint size) {\\n     assert(msg.data.length >= size + 4);\\n     _;\\n  }\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n    commitDividend(msg.sender);\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    if(_to == address(this)) {\\n        commitDividend(owner);\\n        balances[owner] = balances[owner].add(_value);\\n        emit Transfer(msg.sender, owner, _value);\\n    }\\n    else {\\n        commitDividend(_to);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n    }\\n  }\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\ncontract StandardToken is BasicToken, ERC20 {\\n  mapping (address => mapping (address => uint)) allowed;\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint the amout of tokens to be transfered\\n   */\\n  function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n    uint _allowance = allowed[_from][msg.sender];\\n    commitDividend(_from);\\n    commitDividend(_to);\\n    balances[_to] = balances[_to].add(_value);\\n    balances[_from] = balances[_from].sub(_value);\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\n    emit Transfer(_from, _to, _value);\\n  }\\n  /**\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint _value) public {\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n  }\\n  /**\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view returns (uint remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title SmartBillions contract\\n */\\ncontract SmartBillions is StandardToken {\\n\\n    // metadata\\n    string public constant name = \\\"SmartBillions Token\\\";\\n    string public constant symbol = \\\"PLAY\\\";\\n    uint public constant decimals = 0;\\n\\n    // contract state\\n    struct Wallet {\\n        uint208 balance; // current balance of user\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\n    }\\n    mapping (address => Wallet) wallets;\\n    struct Bet {\\n        uint192 value; // bet size\\n        uint32 betHash; // selected numbers\\n        uint32 blockNum; // blocknumber when lottery runs\\n    }\\n    mapping (address => Bet) bets;\\n\\n    uint public walletBalance = 0; // sum of funds in wallets\\n\\n    // investment parameters\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\n    uint public investBalance = 0; // funding from investors\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\n    uint public dividendPeriod = 1;\\n    uint[] public dividends; // dividens collected per period, growing array\\n\\n    // betting parameters\\n    uint public maxWin = 0; // maximum prize won\\n    uint public hashFirst = 0; // start time of building hashes database\\n    uint public hashLast = 0; // last saved block of hashes\\n    uint public hashNext = 0; // next available bet block.number\\n    uint public hashBetSum = 0; // used bet volume of next block\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\n    uint[] public hashes; // space for storing lottery results\\n\\n    // constants\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\n\\n    // events\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\n    event LogRecordWin(address indexed player, uint amount);\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\n    event LogDividend(address indexed investor, uint amount, uint period);\\n\\n    modifier onlyOwner() {\\n        assert(msg.sender == owner);\\n        _;\\n    }\\n\\n    modifier onlyAnimator() {\\n        assert(msg.sender == animator);\\n        _;\\n    }\\n\\n    // constructor\\n    constructor() public {\\n        owner = msg.sender;\\n        animator = msg.sender;\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\n        dividends.push(0); // not used\\n        dividends.push(0); // current dividend\\n    }\\n\\n/* getters */\\n\\n    /**\\n     * @dev Show length of allocated swap space\\n     */\\n    function hashesLength() external view returns (uint) {\\n        return uint(hashes.length);\\n    }\\n\\n    /**\\n     * @dev Show balance of wallet\\n     * @param _owner The address of the account.\\n     */\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].balance);\\n    }\\n\\n    /**\\n     * @dev Show last dividend period processed\\n     * @param _owner The address of the account.\\n     */\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].lastDividendPeriod);\\n    }\\n\\n    /**\\n     * @dev Show block number when withdraw can continue\\n     * @param _owner The address of the account.\\n     */\\n    function walletBlockOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].nextWithdrawBlock);\\n    }\\n\\n    /**\\n     * @dev Show bet size.\\n     * @param _owner The address of the player.\\n     */\\n    function betValueOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].value);\\n    }\\n\\n    /**\\n     * @dev Show block number of lottery run for the bet.\\n     * @param _owner The address of the player.\\n     */\\n    function betHashOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].betHash);\\n    }\\n\\n    /**\\n     * @dev Show block number of lottery run for the bet.\\n     * @param _owner The address of the player.\\n     */\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].blockNum);\\n    }\\n\\n    /**\\n     * @dev Print number of block till next expected dividend payment\\n     */\\n    function dividendsBlocks() external view returns (uint) {\\n        if(investStart > 0) {\\n            return(0);\\n        }\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\n        if(period > dividendPeriod) {\\n            return(0);\\n        }\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\n    }\\n\\n/* administrative functions */\\n\\n    /**\\n     * @dev Change owner.\\n     * @param _who The address of new owner.\\n     */\\n    function changeOwner(address _who) external onlyOwner {\\n        assert(_who != address(0));\\n        commitDividend(msg.sender);\\n        commitDividend(_who);\\n        owner = _who;\\n    }\\n\\n    /**\\n     * @dev Change animator.\\n     * @param _who The address of new animator.\\n     */\\n    function changeAnimator(address _who) external onlyAnimator {\\n        assert(_who != address(0));\\n        commitDividend(msg.sender);\\n        commitDividend(_who);\\n        animator = _who;\\n    }\\n\\n    /**\\n     * @dev Set ICO Start block.\\n     * @param _when The block number of the ICO.\\n     */\\n    function setInvestStart(uint _when) external onlyOwner {\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\n        investStart = _when;\\n    }\\n\\n    /**\\n     * @dev Set maximum bet size per block\\n     * @param _maxsum The maximum bet size in wei.\\n     */\\n    function setBetMax(uint _maxsum) external onlyOwner {\\n        hashBetMax = _maxsum;\\n    }\\n\\n    /**\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\n     */\\n    function resetBet() external onlyOwner {\\n        hashNext = block.number + 3;\\n        hashBetSum = 0;\\n    }\\n\\n    /**\\n     * @dev Move funds to cold storage\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\n     * @param _amount The amount of wei to move to cold storage\\n     */\\n    function coldStore(uint _amount) external onlyOwner {\\n        houseKeeping();\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\n        }\\n        msg.sender.transfer(_amount);\\n        coldStoreLast = block.number;\\n    }\\n\\n    /**\\n     * @dev Move funds to contract jackpot\\n     */\\n    function hotStore() payable external {\\n        houseKeeping();\\n    }\\n\\n/* housekeeping functions */\\n\\n    /**\\n     * @dev Update accounting\\n     */\\n    function houseKeeping() public {\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\n            investStart = 0; // start dividend payments\\n        }\\n        else {\\n            if(hashFirst > 0){\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\n                if(period > dividends.length - 2) {\\n                    dividends.push(0);\\n                }\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\n                    dividendPeriod++;\\n                }\\n            }\\n        }\\n    }\\n\\n/* payments */\\n\\n    /**\\n     * @dev Pay balance from wallet\\n     */\\n    function payWallet() public {\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\n            uint balance = wallets[msg.sender].balance;\\n            wallets[msg.sender].balance = 0;\\n            walletBalance -= balance;\\n            pay(balance);\\n        }\\n    }\\n\\n    function pay(uint _amount) private {\\n        uint maxpay = address(this).balance / 2;\\n        if(maxpay >= _amount) {\\n            msg.sender.transfer(_amount);\\n            if(_amount > 1 finney) {\\n                houseKeeping();\\n            }\\n        }\\n        else {\\n            uint keepbalance = _amount - maxpay;\\n            walletBalance += keepbalance;\\n            wallets[msg.sender].balance += uint208(keepbalance);\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\n            msg.sender.transfer(maxpay);\\n        }\\n    }\\n\\n/* investment functions */\\n\\n    /**\\n     * @dev Buy tokens\\n     */\\n    function investDirect() payable external {\\n        invest(owner);\\n    }\\n\\n    /**\\n     * @dev Buy tokens with affiliate partner\\n     * @param _partner Affiliate partner\\n     */\\n    function invest(address _partner) public payable {\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\n        uint investing = msg.value;\\n        if(investing > investBalanceMax - investBalance) {\\n            investing = investBalanceMax - investBalance;\\n            investBalance = investBalanceMax;\\n            investStart = 0; // close investment round\\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\\n        }\\n        else{\\n            investBalance += investing;\\n        }\\n        if(_partner == address(0) || _partner == owner){\\n            walletBalance += investing / 10;\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\n        else{\\n            walletBalance += (investing * 5 / 100) * 2;\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\n        uint senderBalance = investing / 10**15;\\n        uint ownerBalance = investing * 16 / 10**17  ;\\n        uint animatorBalance = investing * 10 / 10**17  ;\\n        balances[msg.sender] += senderBalance;\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\n        emit LogInvestment(msg.sender,_partner,investing);\\n    }\\n\\n    /**\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\n     */\\n    function disinvest() external {\\n        require(investStart == 0);\\n        commitDividend(msg.sender);\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\n        investBalance -= initialInvestment;\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\n        payWallet();\\n    }\\n\\n    /**\\n     * @dev Pay unpaid dividends\\n     */\\n    function payDividends() external {\\n        require(investStart == 0);\\n        commitDividend(msg.sender);\\n        payWallet();\\n    }\\n\\n    /**\\n     * @dev Commit remaining dividends before transfer of tokens\\n     */\\n    function commitDividend(address _who) internal {\\n        uint last = wallets[_who].lastDividendPeriod;\\n        if((balances[_who]==0) || (last==0)){\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\n            return;\\n        }\\n        if(last==dividendPeriod) {\\n            return;\\n        }\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\n        uint balance = 0;\\n        for(;last<dividendPeriod;last++) {\\n            balance += share * dividends[last];\\n        }\\n        balance = (balance / 0xffffffff);\\n        walletBalance += balance;\\n        wallets[_who].balance += uint208(balance);\\n        wallets[_who].lastDividendPeriod = uint16(last);\\n        emit LogDividend(_who,balance,last);\\n    }\\n\\n/* lottery functions */\\n\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\n        uint24 bethash = uint24(_player.betHash);\\n        uint24 hit = bethash ^ _hash;\\n        uint24 matches =\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\n        if(matches == 6){\\n            return(uint(_player.value) * 7000000);\\n        }\\n        if(matches == 5){\\n            return(uint(_player.value) * 20000);\\n        }\\n        if(matches == 4){\\n            return(uint(_player.value) * 500);\\n        }\\n        if(matches == 3){\\n            return(uint(_player.value) * 25);\\n        }\\n        if(matches == 2){\\n            return(uint(_player.value) * 3);\\n        }\\n        return(0);\\n    }\\n\\n    /**\\n     * @dev Check if won in lottery\\n     */\\n    function betOf(address _who) external view returns (uint)  {\\n        Bet memory player = bets[_who];\\n        if( (player.value==0) ||\\n            (player.blockNum<=1) ||\\n            (block.number<player.blockNum) ||\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\n            return(0);\\n        }\\n        if(block.number<player.blockNum+256){\\n            // <yes> <report> BAD_RANDOMNESS\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\n        }\\n        if(hashFirst>0){\\n            uint32 hash = getHash(player.blockNum);\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\n                return(uint(player.value));\\n            }\\n            else{\\n                return(betPrize(player,uint24(hash)));\\n            }\\n\\t}\\n        return(0);\\n    }\\n\\n    /**\\n     * @dev Check if won in lottery\\n     */\\n    function won() public {\\n        Bet memory player = bets[msg.sender];\\n        if(player.blockNum==0){ // create a new player\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n            return;\\n        }\\n        if((player.value==0) || (player.blockNum==1)){\\n            payWallet();\\n            return;\\n        }\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n            return;\\n        }\\n        uint prize = 0;\\n        uint32 hash = 0;\\n        if(block.number<player.blockNum+256){\\n            // <yes> <report> BAD_RANDOMNESS\\n            hash = uint24(uint(blockhash(player.blockNum)));\\n            prize = betPrize(player,uint24(hash));\\n        }\\n        else {\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\n                hash = getHash(player.blockNum);\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\n                    prize = uint(player.value);\\n                }\\n                else{\\n                    prize = betPrize(player,uint24(hash));\\n                }\\n\\t    }\\n            else{\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n                return();\\n            }\\n        }\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n        if(prize>0) {\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\n            if(prize > maxWin){\\n                maxWin = prize;\\n                emit LogRecordWin(msg.sender,prize);\\n            }\\n            pay(prize);\\n        }\\n        else{\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\n        }\\n    }\\n\\n    /**\\n     * @dev Send ether to buy tokens during ICO\\n     * @dev or send less than 1 ether to contract to play\\n     * @dev or send 0 to collect prize\\n     */\\n    function () external payable {\\n        if(msg.value > 0){\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\n                invest(owner);\\n            }\\n            else{ // if not ICO running payment to contract is treated as play\\n                play();\\n            }\\n            return;\\n        }\\n        //check for dividends and other assets\\n        if(investStart == 0 && balances[msg.sender]>0){\\n            commitDividend(msg.sender);}\\n        won(); // will run payWallet() if nothing else available\\n    }\\n\\n    /**\\n     * @dev Play in lottery\\n     */\\n    function play() payable public returns (uint) {\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\n    }\\n\\n    /**\\n     * @dev Play in lottery with random numbers\\n     * @param _partner Affiliate partner\\n     */\\n    function playRandom(address _partner) payable public returns (uint) {\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\n    }\\n\\n    /**\\n     * @dev Play in lottery with own numbers\\n     * @param _partner Affiliate partner\\n     */\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\n        won(); // check if player did not win\\n        uint24 bethash = uint24(_hash);\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\n        if(msg.value > 0){\\n            if(investStart==0) { // dividends only after investment finished\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\n            }\\n            if(_partner != address(0)) {\\n                uint fee = msg.value / 100;\\n                walletBalance += fee;\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\n            }\\n            if(hashNext < block.number + 3) {\\n                hashNext = block.number + 3;\\n                hashBetSum = msg.value;\\n            }\\n            else{\\n                if(hashBetSum > hashBetMax) {\\n                    hashNext++;\\n                    hashBetSum = msg.value;\\n                }\\n                else{\\n                    hashBetSum += msg.value;\\n                }\\n            }\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\n        }\\n        putHash(); // players help collecing data\\n        return(hashNext);\\n    }\\n\\n/* database functions */\\n\\n    /**\\n     * @dev Create hash data swap space\\n     * @param _sadd Number of hashes to add (<=256)\\n     */\\n    function addHashes(uint _sadd) public returns (uint) {\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\n        uint n = hashes.length;\\n        if(n + _sadd > hashesSize){\\n            hashes.length = hashesSize;\\n        }\\n        else{\\n            hashes.length += _sadd;\\n        }\\n        for(;n<hashes.length;n++){ // make sure to burn gas\\n            hashes[n] = 1;\\n        }\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\n            hashFirst = block.number - ( block.number % 10);\\n            hashLast = hashFirst;\\n        }\\n        return(hashes.length);\\n    }\\n\\n    /**\\n     * @dev Create hash data swap space, add 128 hashes\\n     */\\n    function addHashes128() external returns (uint) {\\n        return(addHashes(128));\\n    }\\n\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\n        // <yes> <report> BAD_RANDOMNESS\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\n        // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\n            | ( ( uint(_delta) / hashesSize) << 240));\\n    }\\n\\n    function getHash(uint _block) private view returns (uint32) {\\n        uint delta = (_block - hashFirst) / 10;\\n        uint hash = hashes[delta % hashesSize];\\n        if(delta / hashesSize != hash >> 240) {\\n            return(0x1000000); // load failed, incorrect data in hashes\\n        }\\n        uint slotp = (_block - hashFirst) % 10;\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\n    }\\n\\n    /**\\n     * @dev Fill hash data\\n     */\\n    function putHash() public returns (bool) {\\n        uint lastb = hashLast;\\n        if(lastb == 0 || block.number <= lastb + 10) {\\n            return(false);\\n        }\\n        uint blockn256;\\n        if(block.number<256) { // useless test for testnet :-(\\n            blockn256 = 0;\\n        }\\n        else{\\n            blockn256 = block.number - 256;\\n        }\\n        if(lastb < blockn256) {\\n            uint num = blockn256;\\n            num += num % 10;\\n            lastb = num;\\n        }\\n        uint delta = (lastb - hashFirst) / 10;\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\n        hashLast = lastb + 10;\\n        return(true);\\n    }\\n\\n    /**\\n     * @dev Fill hash data many times\\n     * @param _num Number of iterations\\n     */\\n    function putHashes(uint _num) external {\\n        uint n=0;\\n        for(;n<_num;n++){\\n            if(!putHash()){\\n                return;\\n            }\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x587e66eb81eda2e15c6f15fd49e3c1398a4e904aeaa838671b86414337156fa6\"}},\"version\":1}"},"SafeMath":{"evm":{"deployedBytecode":{"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600436106023575b60006000fdfea265627a7a723158206ec4c93ddc63f9ccc35eb773e0cd5fc28ab022a5a2a2a11be10d81152e16b37264736f6c63430005110032","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x23 JUMPI JUMPDEST PUSH1 0x0 PUSH1 0x0 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH15 0xC4C93DDC63F9CCC35EB773E0CD5FC2 DUP11 0xB0 0x22 0xA5 LOG2 LOG2 LOG1 SHL 0xE1 0xD DUP2 ISZERO 0x2E AND 0xB3 PUSH19 0x64736F6C634300051100320000000000000000 ","sourceMap":"281:244:0:-;;;;;;;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\n * Upgraded from Solidity 0.4 to 0.5, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 524,561,701,703,705,707,709,711,713,715,717,719\\n */\\n\\npragma solidity ^0.5.0;\\n\\nlibrary SafeMath {\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n  function add(uint a, uint b) internal pure returns (uint) {\\n    uint c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n}\\n\\ncontract ERC20Basic {\\n  uint public totalSupply;\\n  address public owner; //owner\\n  address public animator; //animator\\n  function balanceOf(address who) public view returns (uint);\\n  function transfer(address to, uint value) public;\\n  event Transfer(address indexed from, address indexed to, uint value);\\n  function commitDividend(address who) internal; // pays remaining dividend\\n}\\n\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view returns (uint);\\n  function transferFrom(address from, address to, uint value) public;\\n  function approve(address spender, uint value) public;\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint;\\n  mapping(address => uint) balances;\\n\\n  modifier onlyPayloadSize(uint size) {\\n     assert(msg.data.length >= size + 4);\\n     _;\\n  }\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n    commitDividend(msg.sender);\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    if(_to == address(this)) {\\n        commitDividend(owner);\\n        balances[owner] = balances[owner].add(_value);\\n        emit Transfer(msg.sender, owner, _value);\\n    }\\n    else {\\n        commitDividend(_to);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n    }\\n  }\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\ncontract StandardToken is BasicToken, ERC20 {\\n  mapping (address => mapping (address => uint)) allowed;\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint the amout of tokens to be transfered\\n   */\\n  function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n    uint _allowance = allowed[_from][msg.sender];\\n    commitDividend(_from);\\n    commitDividend(_to);\\n    balances[_to] = balances[_to].add(_value);\\n    balances[_from] = balances[_from].sub(_value);\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\n    emit Transfer(_from, _to, _value);\\n  }\\n  /**\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint _value) public {\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n  }\\n  /**\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view returns (uint remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title SmartBillions contract\\n */\\ncontract SmartBillions is StandardToken {\\n\\n    // metadata\\n    string public constant name = \\\"SmartBillions Token\\\";\\n    string public constant symbol = \\\"PLAY\\\";\\n    uint public constant decimals = 0;\\n\\n    // contract state\\n    struct Wallet {\\n        uint208 balance; // current balance of user\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\n    }\\n    mapping (address => Wallet) wallets;\\n    struct Bet {\\n        uint192 value; // bet size\\n        uint32 betHash; // selected numbers\\n        uint32 blockNum; // blocknumber when lottery runs\\n    }\\n    mapping (address => Bet) bets;\\n\\n    uint public walletBalance = 0; // sum of funds in wallets\\n\\n    // investment parameters\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\n    uint public investBalance = 0; // funding from investors\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\n    uint public dividendPeriod = 1;\\n    uint[] public dividends; // dividens collected per period, growing array\\n\\n    // betting parameters\\n    uint public maxWin = 0; // maximum prize won\\n    uint public hashFirst = 0; // start time of building hashes database\\n    uint public hashLast = 0; // last saved block of hashes\\n    uint public hashNext = 0; // next available bet block.number\\n    uint public hashBetSum = 0; // used bet volume of next block\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\n    uint[] public hashes; // space for storing lottery results\\n\\n    // constants\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\n\\n    // events\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\n    event LogRecordWin(address indexed player, uint amount);\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\n    event LogDividend(address indexed investor, uint amount, uint period);\\n\\n    modifier onlyOwner() {\\n        assert(msg.sender == owner);\\n        _;\\n    }\\n\\n    modifier onlyAnimator() {\\n        assert(msg.sender == animator);\\n        _;\\n    }\\n\\n    // constructor\\n    constructor() public {\\n        owner = msg.sender;\\n        animator = msg.sender;\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\n        dividends.push(0); // not used\\n        dividends.push(0); // current dividend\\n    }\\n\\n/* getters */\\n\\n    /**\\n     * @dev Show length of allocated swap space\\n     */\\n    function hashesLength() external view returns (uint) {\\n        return uint(hashes.length);\\n    }\\n\\n    /**\\n     * @dev Show balance of wallet\\n     * @param _owner The address of the account.\\n     */\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].balance);\\n    }\\n\\n    /**\\n     * @dev Show last dividend period processed\\n     * @param _owner The address of the account.\\n     */\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].lastDividendPeriod);\\n    }\\n\\n    /**\\n     * @dev Show block number when withdraw can continue\\n     * @param _owner The address of the account.\\n     */\\n    function walletBlockOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].nextWithdrawBlock);\\n    }\\n\\n    /**\\n     * @dev Show bet size.\\n     * @param _owner The address of the player.\\n     */\\n    function betValueOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].value);\\n    }\\n\\n    /**\\n     * @dev Show block number of lottery run for the bet.\\n     * @param _owner The address of the player.\\n     */\\n    function betHashOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].betHash);\\n    }\\n\\n    /**\\n     * @dev Show block number of lottery run for the bet.\\n     * @param _owner The address of the player.\\n     */\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].blockNum);\\n    }\\n\\n    /**\\n     * @dev Print number of block till next expected dividend payment\\n     */\\n    function dividendsBlocks() external view returns (uint) {\\n        if(investStart > 0) {\\n            return(0);\\n        }\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\n        if(period > dividendPeriod) {\\n            return(0);\\n        }\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\n    }\\n\\n/* administrative functions */\\n\\n    /**\\n     * @dev Change owner.\\n     * @param _who The address of new owner.\\n     */\\n    function changeOwner(address _who) external onlyOwner {\\n        assert(_who != address(0));\\n        commitDividend(msg.sender);\\n        commitDividend(_who);\\n        owner = _who;\\n    }\\n\\n    /**\\n     * @dev Change animator.\\n     * @param _who The address of new animator.\\n     */\\n    function changeAnimator(address _who) external onlyAnimator {\\n        assert(_who != address(0));\\n        commitDividend(msg.sender);\\n        commitDividend(_who);\\n        animator = _who;\\n    }\\n\\n    /**\\n     * @dev Set ICO Start block.\\n     * @param _when The block number of the ICO.\\n     */\\n    function setInvestStart(uint _when) external onlyOwner {\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\n        investStart = _when;\\n    }\\n\\n    /**\\n     * @dev Set maximum bet size per block\\n     * @param _maxsum The maximum bet size in wei.\\n     */\\n    function setBetMax(uint _maxsum) external onlyOwner {\\n        hashBetMax = _maxsum;\\n    }\\n\\n    /**\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\n     */\\n    function resetBet() external onlyOwner {\\n        hashNext = block.number + 3;\\n        hashBetSum = 0;\\n    }\\n\\n    /**\\n     * @dev Move funds to cold storage\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\n     * @param _amount The amount of wei to move to cold storage\\n     */\\n    function coldStore(uint _amount) external onlyOwner {\\n        houseKeeping();\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\n        }\\n        msg.sender.transfer(_amount);\\n        coldStoreLast = block.number;\\n    }\\n\\n    /**\\n     * @dev Move funds to contract jackpot\\n     */\\n    function hotStore() payable external {\\n        houseKeeping();\\n    }\\n\\n/* housekeeping functions */\\n\\n    /**\\n     * @dev Update accounting\\n     */\\n    function houseKeeping() public {\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\n            investStart = 0; // start dividend payments\\n        }\\n        else {\\n            if(hashFirst > 0){\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\n                if(period > dividends.length - 2) {\\n                    dividends.push(0);\\n                }\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\n                    dividendPeriod++;\\n                }\\n            }\\n        }\\n    }\\n\\n/* payments */\\n\\n    /**\\n     * @dev Pay balance from wallet\\n     */\\n    function payWallet() public {\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\n            uint balance = wallets[msg.sender].balance;\\n            wallets[msg.sender].balance = 0;\\n            walletBalance -= balance;\\n            pay(balance);\\n        }\\n    }\\n\\n    function pay(uint _amount) private {\\n        uint maxpay = address(this).balance / 2;\\n        if(maxpay >= _amount) {\\n            msg.sender.transfer(_amount);\\n            if(_amount > 1 finney) {\\n                houseKeeping();\\n            }\\n        }\\n        else {\\n            uint keepbalance = _amount - maxpay;\\n            walletBalance += keepbalance;\\n            wallets[msg.sender].balance += uint208(keepbalance);\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\n            msg.sender.transfer(maxpay);\\n        }\\n    }\\n\\n/* investment functions */\\n\\n    /**\\n     * @dev Buy tokens\\n     */\\n    function investDirect() payable external {\\n        invest(owner);\\n    }\\n\\n    /**\\n     * @dev Buy tokens with affiliate partner\\n     * @param _partner Affiliate partner\\n     */\\n    function invest(address _partner) public payable {\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\n        uint investing = msg.value;\\n        if(investing > investBalanceMax - investBalance) {\\n            investing = investBalanceMax - investBalance;\\n            investBalance = investBalanceMax;\\n            investStart = 0; // close investment round\\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\\n        }\\n        else{\\n            investBalance += investing;\\n        }\\n        if(_partner == address(0) || _partner == owner){\\n            walletBalance += investing / 10;\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\n        else{\\n            walletBalance += (investing * 5 / 100) * 2;\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\n        uint senderBalance = investing / 10**15;\\n        uint ownerBalance = investing * 16 / 10**17  ;\\n        uint animatorBalance = investing * 10 / 10**17  ;\\n        balances[msg.sender] += senderBalance;\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\n        emit LogInvestment(msg.sender,_partner,investing);\\n    }\\n\\n    /**\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\n     */\\n    function disinvest() external {\\n        require(investStart == 0);\\n        commitDividend(msg.sender);\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\n        investBalance -= initialInvestment;\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\n        payWallet();\\n    }\\n\\n    /**\\n     * @dev Pay unpaid dividends\\n     */\\n    function payDividends() external {\\n        require(investStart == 0);\\n        commitDividend(msg.sender);\\n        payWallet();\\n    }\\n\\n    /**\\n     * @dev Commit remaining dividends before transfer of tokens\\n     */\\n    function commitDividend(address _who) internal {\\n        uint last = wallets[_who].lastDividendPeriod;\\n        if((balances[_who]==0) || (last==0)){\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\n            return;\\n        }\\n        if(last==dividendPeriod) {\\n            return;\\n        }\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\n        uint balance = 0;\\n        for(;last<dividendPeriod;last++) {\\n            balance += share * dividends[last];\\n        }\\n        balance = (balance / 0xffffffff);\\n        walletBalance += balance;\\n        wallets[_who].balance += uint208(balance);\\n        wallets[_who].lastDividendPeriod = uint16(last);\\n        emit LogDividend(_who,balance,last);\\n    }\\n\\n/* lottery functions */\\n\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\n        uint24 bethash = uint24(_player.betHash);\\n        uint24 hit = bethash ^ _hash;\\n        uint24 matches =\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\n        if(matches == 6){\\n            return(uint(_player.value) * 7000000);\\n        }\\n        if(matches == 5){\\n            return(uint(_player.value) * 20000);\\n        }\\n        if(matches == 4){\\n            return(uint(_player.value) * 500);\\n        }\\n        if(matches == 3){\\n            return(uint(_player.value) * 25);\\n        }\\n        if(matches == 2){\\n            return(uint(_player.value) * 3);\\n        }\\n        return(0);\\n    }\\n\\n    /**\\n     * @dev Check if won in lottery\\n     */\\n    function betOf(address _who) external view returns (uint)  {\\n        Bet memory player = bets[_who];\\n        if( (player.value==0) ||\\n            (player.blockNum<=1) ||\\n            (block.number<player.blockNum) ||\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\n            return(0);\\n        }\\n        if(block.number<player.blockNum+256){\\n            // <yes> <report> BAD_RANDOMNESS\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\n        }\\n        if(hashFirst>0){\\n            uint32 hash = getHash(player.blockNum);\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\n                return(uint(player.value));\\n            }\\n            else{\\n                return(betPrize(player,uint24(hash)));\\n            }\\n\\t}\\n        return(0);\\n    }\\n\\n    /**\\n     * @dev Check if won in lottery\\n     */\\n    function won() public {\\n        Bet memory player = bets[msg.sender];\\n        if(player.blockNum==0){ // create a new player\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n            return;\\n        }\\n        if((player.value==0) || (player.blockNum==1)){\\n            payWallet();\\n            return;\\n        }\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n            return;\\n        }\\n        uint prize = 0;\\n        uint32 hash = 0;\\n        if(block.number<player.blockNum+256){\\n            // <yes> <report> BAD_RANDOMNESS\\n            hash = uint24(uint(blockhash(player.blockNum)));\\n            prize = betPrize(player,uint24(hash));\\n        }\\n        else {\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\n                hash = getHash(player.blockNum);\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\n                    prize = uint(player.value);\\n                }\\n                else{\\n                    prize = betPrize(player,uint24(hash));\\n                }\\n\\t    }\\n            else{\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n                return();\\n            }\\n        }\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n        if(prize>0) {\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\n            if(prize > maxWin){\\n                maxWin = prize;\\n                emit LogRecordWin(msg.sender,prize);\\n            }\\n            pay(prize);\\n        }\\n        else{\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\n        }\\n    }\\n\\n    /**\\n     * @dev Send ether to buy tokens during ICO\\n     * @dev or send less than 1 ether to contract to play\\n     * @dev or send 0 to collect prize\\n     */\\n    function () external payable {\\n        if(msg.value > 0){\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\n                invest(owner);\\n            }\\n            else{ // if not ICO running payment to contract is treated as play\\n                play();\\n            }\\n            return;\\n        }\\n        //check for dividends and other assets\\n        if(investStart == 0 && balances[msg.sender]>0){\\n            commitDividend(msg.sender);}\\n        won(); // will run payWallet() if nothing else available\\n    }\\n\\n    /**\\n     * @dev Play in lottery\\n     */\\n    function play() payable public returns (uint) {\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\n    }\\n\\n    /**\\n     * @dev Play in lottery with random numbers\\n     * @param _partner Affiliate partner\\n     */\\n    function playRandom(address _partner) payable public returns (uint) {\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\n    }\\n\\n    /**\\n     * @dev Play in lottery with own numbers\\n     * @param _partner Affiliate partner\\n     */\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\n        won(); // check if player did not win\\n        uint24 bethash = uint24(_hash);\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\n        if(msg.value > 0){\\n            if(investStart==0) { // dividends only after investment finished\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\n            }\\n            if(_partner != address(0)) {\\n                uint fee = msg.value / 100;\\n                walletBalance += fee;\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\n            }\\n            if(hashNext < block.number + 3) {\\n                hashNext = block.number + 3;\\n                hashBetSum = msg.value;\\n            }\\n            else{\\n                if(hashBetSum > hashBetMax) {\\n                    hashNext++;\\n                    hashBetSum = msg.value;\\n                }\\n                else{\\n                    hashBetSum += msg.value;\\n                }\\n            }\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\n        }\\n        putHash(); // players help collecing data\\n        return(hashNext);\\n    }\\n\\n/* database functions */\\n\\n    /**\\n     * @dev Create hash data swap space\\n     * @param _sadd Number of hashes to add (<=256)\\n     */\\n    function addHashes(uint _sadd) public returns (uint) {\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\n        uint n = hashes.length;\\n        if(n + _sadd > hashesSize){\\n            hashes.length = hashesSize;\\n        }\\n        else{\\n            hashes.length += _sadd;\\n        }\\n        for(;n<hashes.length;n++){ // make sure to burn gas\\n            hashes[n] = 1;\\n        }\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\n            hashFirst = block.number - ( block.number % 10);\\n            hashLast = hashFirst;\\n        }\\n        return(hashes.length);\\n    }\\n\\n    /**\\n     * @dev Create hash data swap space, add 128 hashes\\n     */\\n    function addHashes128() external returns (uint) {\\n        return(addHashes(128));\\n    }\\n\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\n        // <yes> <report> BAD_RANDOMNESS\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\n        // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\n            | ( ( uint(_delta) / hashesSize) << 240));\\n    }\\n\\n    function getHash(uint _block) private view returns (uint32) {\\n        uint delta = (_block - hashFirst) / 10;\\n        uint hash = hashes[delta % hashesSize];\\n        if(delta / hashesSize != hash >> 240) {\\n            return(0x1000000); // load failed, incorrect data in hashes\\n        }\\n        uint slotp = (_block - hashFirst) % 10;\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\n    }\\n\\n    /**\\n     * @dev Fill hash data\\n     */\\n    function putHash() public returns (bool) {\\n        uint lastb = hashLast;\\n        if(lastb == 0 || block.number <= lastb + 10) {\\n            return(false);\\n        }\\n        uint blockn256;\\n        if(block.number<256) { // useless test for testnet :-(\\n            blockn256 = 0;\\n        }\\n        else{\\n            blockn256 = block.number - 256;\\n        }\\n        if(lastb < blockn256) {\\n            uint num = blockn256;\\n            num += num % 10;\\n            lastb = num;\\n        }\\n        uint delta = (lastb - hashFirst) / 10;\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\n        hashLast = lastb + 10;\\n        return(true);\\n    }\\n\\n    /**\\n     * @dev Fill hash data many times\\n     * @param _num Number of iterations\\n     */\\n    function putHashes(uint _num) external {\\n        uint n=0;\\n        for(;n<_num;n++){\\n            if(!putHash()){\\n                return;\\n            }\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x587e66eb81eda2e15c6f15fd49e3c1398a4e904aeaa838671b86414337156fa6\"}},\"version\":1}"},"SmartBillions":{"evm":{"deployedBytecode":{"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x814B3FE0 GT PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xC27509CF GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xDE469071 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDF1EAD82 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xDF1EAD82 EQ PUSH2 0x11CC JUMPI DUP1 PUSH4 0xE4CC98A5 EQ PUSH2 0x11E4 JUMPI DUP1 PUSH4 0xE73CC2EB EQ PUSH2 0x1210 JUMPI DUP1 PUSH4 0xE76ECE01 EQ PUSH2 0x1277 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0xDE469071 EQ PUSH2 0x115C JUMPI DUP1 PUSH4 0xDE88A342 EQ PUSH2 0x1188 JUMPI DUP1 PUSH4 0xDF12B94E EQ PUSH2 0x11A0 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0xCD88333E GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xCD88333E EQ PUSH2 0x1054 JUMPI DUP1 PUSH4 0xD6D25008 EQ PUSH2 0x1091 JUMPI DUP1 PUSH4 0xD9FA9335 EQ PUSH2 0x10BD JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x10D5 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0xC27509CF EQ PUSH2 0xFF2 JUMPI DUP1 PUSH4 0xC4164365 EQ PUSH2 0xFFC JUMPI DUP1 PUSH4 0xCD0A314B EQ PUSH2 0x1028 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0xA367D99A GT PUSH2 0x164 JUMPI DUP1 PUSH4 0xB3470E97 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0xB3470E97 EQ PUSH2 0xF64 JUMPI DUP1 PUSH4 0xBC851718 EQ PUSH2 0xF90 JUMPI DUP1 PUSH4 0xBE1EEFBF EQ PUSH2 0xFBC JUMPI DUP1 PUSH4 0xBFBA9029 EQ PUSH2 0xFC6 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0xA367D99A EQ PUSH2 0xE88 JUMPI DUP1 PUSH4 0xA6F9DAE1 EQ PUSH2 0xEB4 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xF07 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x904D2248 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x904D2248 EQ PUSH2 0xD59 JUMPI DUP1 PUSH4 0x93E84CD9 EQ PUSH2 0xDC0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0xDDE JUMPI DUP1 PUSH4 0x9CE962CA EQ PUSH2 0xE70 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x814B3FE0 EQ PUSH2 0xC49 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC9A JUMPI DUP1 PUSH4 0x8EECDDCF EQ PUSH2 0xCF2 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x380F3087 GT PUSH2 0x2A0 JUMPI DUP1 PUSH4 0x501895AE GT PUSH2 0x23E JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x218 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xB23 JUMPI DUP1 PUSH4 0x70CCD928 EQ PUSH2 0xB8A JUMPI DUP1 PUSH4 0x7227C7CE EQ PUSH2 0xBB6 JUMPI DUP1 PUSH4 0x785CE7CA EQ PUSH2 0xBE2 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x501895AE EQ PUSH2 0xA3F JUMPI DUP1 PUSH4 0x66CE3BD2 EQ PUSH2 0xA90 JUMPI DUP1 PUSH4 0x6B486818 EQ PUSH2 0xAF7 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x40C73D17 GT PUSH2 0x27A JUMPI DUP1 PUSH4 0x40C73D17 EQ PUSH2 0x930 JUMPI DUP1 PUSH4 0x413E90E7 EQ PUSH2 0x983 JUMPI DUP1 PUSH4 0x4288D759 EQ PUSH2 0x9C0 JUMPI DUP1 PUSH4 0x43146F36 EQ PUSH2 0xA27 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x380F3087 EQ PUSH2 0x84C JUMPI DUP1 PUSH4 0x3DE8D340 EQ PUSH2 0x89D JUMPI DUP1 PUSH4 0x3E43B652 EQ PUSH2 0x8C9 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x30D JUMPI DUP1 PUSH4 0x26699576 GT PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x26699576 EQ PUSH2 0x739 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x79C JUMPI DUP1 PUSH4 0x31C2B6E6 EQ PUSH2 0x7C8 JUMPI DUP1 PUSH4 0x37C43088 EQ PUSH2 0x820 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x18160DDD EQ PUSH2 0x637 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x663 JUMPI DUP1 PUSH4 0x2406E9FA EQ PUSH2 0x6E0 JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x349 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0x12C8052F EQ PUSH2 0x5C3 JUMPI DUP1 PUSH4 0x13E4B51F EQ PUSH2 0x5DB JUMPI DUP1 PUSH4 0x16D190E3 EQ PUSH2 0x60B JUMPI PUSH2 0x36F JUMP JUMPDEST DUP1 PUSH4 0x3F9C793 EQ PUSH2 0x452 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x497 JUMPI DUP1 PUSH4 0x751076D EQ PUSH2 0x529 JUMPI PUSH2 0x36F JUMP JUMPDEST JUMPDEST PUSH1 0x0 CALLVALUE GT ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 POP SLOAD GT ISZERO PUSH2 0x3BD JUMPI PUSH2 0x3B8 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x12B4 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x3CB PUSH2 0x1B22 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMPDEST PUSH2 0x450 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP SLOAD EQ DUP1 ISZERO PUSH2 0x42C JUMPI POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD GT JUMPDEST ISZERO PUSH2 0x441 JUMPI PUSH2 0x440 CALLER PUSH2 0x1B9F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH2 0x44F PUSH2 0x1F2A PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 0x495 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x469 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x12B4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A4 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x4AD PUSH2 0x2881 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4EE JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4D2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x51B JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x536 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x564 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x54E JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x28BD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x573 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x5C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x58B JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2927 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D0 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x5D9 PUSH2 0x1F2A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x5F1 PUSH2 0x2ABD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x618 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x621 PUSH2 0x2BAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x644 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x64D PUSH2 0x2BB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x670 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x6DE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x688 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2BC1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x723 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6F7 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x786 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x750 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2F4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A9 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x7B2 PUSH2 0x333E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D5 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x7DE PUSH2 0x3343 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82D JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x836 PUSH2 0x3369 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x859 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x887 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x871 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x336F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8AA JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x8B3 PUSH2 0x348C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x91A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8EE JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3503 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x93D JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x981 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x955 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3598 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x990 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x9BE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9A8 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x368E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9CD JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xA11 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9E5 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x36CA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA34 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xA3D PUSH2 0x391E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA4C JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xA7A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA64 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3997 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA9D JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xAE1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAB5 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x39BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB04 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xB0D PUSH2 0x3A58 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB30 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xB74 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB48 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3A61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB97 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xBA0 PUSH2 0x3AB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBC3 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xBCC PUSH2 0x3ACA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBEF JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xC33 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC07 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3AD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC56 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xC84 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC6E JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3B40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCA7 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xCB0 PUSH2 0x3B68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCFF JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xD43 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD17 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3B8E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD66 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xDAA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD7E JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3BFB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDC8 PUSH2 0x1B22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDEB JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xDF4 PUSH2 0x3C68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE35 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xE19 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xE62 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE7D JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xE86 PUSH2 0x3CA4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE95 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xE9E PUSH2 0x3EEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEC1 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xF05 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xED9 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3EF5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF14 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xF62 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xF2C JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3FEB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF71 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xF7A PUSH2 0x43A9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9D JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xFA6 PUSH2 0x43C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFC4 PUSH2 0x43CE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFD3 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xFDC PUSH2 0x43DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFFA PUSH2 0x43E8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1009 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1012 PUSH2 0x441C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1035 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x103E PUSH2 0x4425 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1061 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x108F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1079 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x442E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x109E JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x10A7 PUSH2 0x4579 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10CA JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x10D3 PUSH2 0x4582 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10E2 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1146 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x10FA JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4682 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1169 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1172 PUSH2 0x4717 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1195 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x119E PUSH2 0x4720 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11AD JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x11B6 PUSH2 0x4755 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11D9 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x11E2 PUSH2 0x475E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11F1 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x11FA PUSH2 0x49BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x121D JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1261 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1235 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x49C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1284 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x12B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x129C JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4A2E JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 POP SLOAD GT DUP1 ISZERO PUSH2 0x12D4 JUMPI POP PUSH1 0x5 PUSH2 0x4000 MUL PUSH1 0x8 PUSH1 0x0 POP SLOAD ADD NUMBER LT JUMPDEST DUP1 ISZERO PUSH2 0x12E9 JUMPI POP PUSH1 0xA PUSH1 0x0 POP SLOAD PUSH1 0x9 PUSH1 0x0 POP SLOAD LT JUMPDEST ISZERO ISZERO PUSH2 0x12F5 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 CALLVALUE SWAP1 POP PUSH1 0x9 PUSH1 0x0 POP SLOAD PUSH1 0xA PUSH1 0x0 POP SLOAD SUB DUP2 GT ISZERO PUSH2 0x139C JUMPI PUSH1 0x9 PUSH1 0x0 POP SLOAD PUSH1 0xA PUSH1 0x0 POP SLOAD SUB SWAP1 POP DUP1 POP PUSH1 0xA PUSH1 0x0 POP SLOAD PUSH1 0x9 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0x136A DUP4 CALLVALUE PUSH2 0x4AC9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1396 JUMPI RETURNDATASIZE PUSH1 0x0 PUSH1 0x0 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x13B1 JUMP JUMPDEST DUP1 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1439 JUMPI POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x154F JUMPI PUSH1 0xA DUP2 DUP2 ISZERO ISZERO PUSH2 0x144A JUMPI INVALID JUMPDEST DIV PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0xA DUP2 DUP2 ISZERO ISZERO PUSH2 0x146A JUMPI INVALID JUMPDEST DIV PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1732 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x64 PUSH1 0x5 DUP4 MUL DUP2 ISZERO ISZERO PUSH2 0x1560 JUMPI INVALID JUMPDEST DIV MUL PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0x64 PUSH1 0x5 DUP3 MUL DUP2 ISZERO ISZERO PUSH2 0x1584 JUMPI INVALID JUMPDEST DIV PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x64 PUSH1 0x5 DUP3 MUL DUP2 ISZERO ISZERO PUSH2 0x1673 JUMPI INVALID JUMPDEST DIV PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0xB PUSH1 0x0 POP SLOAD PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1A PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH7 0x38D7EA4C68000 DUP3 DUP2 ISZERO ISZERO PUSH2 0x17AE JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH8 0x16345785D8A0000 PUSH1 0x10 DUP5 MUL DUP2 ISZERO ISZERO PUSH2 0x17C9 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH8 0x16345785D8A0000 PUSH1 0xA DUP6 MUL DUP2 ISZERO ISZERO PUSH2 0x17E4 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP3 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP2 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP1 DUP3 DUP5 ADD ADD PUSH1 0x0 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x36A013C86C271C703C54DEE591BC768E347954A0A9A1937DD17F5A29E9A8E645 DUP7 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B95 CALLER NUMBER PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR PUSH1 0x0 PUSH2 0x2F4E PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1B9C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1A SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD EQ DUP1 PUSH2 0x1C52 JUMPI POP PUSH1 0x0 DUP2 EQ JUMPDEST ISZERO PUSH2 0x1CC5 JUMPI PUSH1 0xB PUSH1 0x0 POP SLOAD PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1A PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x1F27 JUMP JUMPDEST PUSH1 0xB PUSH1 0x0 POP SLOAD DUP2 EQ ISZERO PUSH2 0x1CD8 JUMPI POP PUSH2 0x1F27 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 PUSH1 0x0 POP SLOAD PUSH4 0xFFFFFFFF PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD MUL DUP2 ISZERO ISZERO PUSH2 0x1D35 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0xB PUSH1 0x0 POP SLOAD DUP4 LT ISZERO PUSH2 0x1D84 JUMPI PUSH1 0xC PUSH1 0x0 POP DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1D5E JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST POP SLOAD DUP3 MUL DUP2 ADD SWAP1 POP DUP1 POP JUMPDEST DUP3 DUP1 PUSH1 0x1 ADD SWAP4 POP POP PUSH2 0x1D3F JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 DUP2 ISZERO ISZERO PUSH2 0x1D93 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1A PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE1E87F40E4DE2A6B68365D854F85940AAD44D84933D399007702C6D340DA445F DUP3 DUP6 PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1F32 PUSH2 0x50DB JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x217A JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP PUSH2 0x287F JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x21B1 JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x21CA JUMPI PUSH2 0x21C4 PUSH2 0x3CA4 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH2 0x287F JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND NUMBER GT ISZERO ISZERO PUSH2 0x21E3 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST NUMBER PUSH2 0x4000 PUSH1 0xA MUL DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND ADD GT ISZERO ISZERO PUSH2 0x238F JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x770D64C654906EBAB085526DD881064F61F0E5990CAA94C94167EB29BC4645C6 DUP3 PUSH1 0x40 ADD MLOAD NUMBER PUSH1 0x40 MLOAD DUP1 DUP4 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP PUSH2 0x287F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH1 0x0 SWAP1 POP PUSH2 0x100 DUP4 PUSH1 0x40 ADD MLOAD ADD PUSH4 0xFFFFFFFF AND NUMBER LT ISZERO PUSH2 0x23E2 JUMPI DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR PUSH3 0xFFFFFF AND SWAP1 POP DUP1 POP PUSH2 0x23D9 DUP4 DUP3 PUSH2 0x4AE7 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP DUP2 POP PUSH2 0x25F6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE PUSH1 0x0 POP SLOAD GT ISZERO PUSH2 0x2461 JUMPI PUSH2 0x2409 DUP4 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x4CE2 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 POP PUSH4 0x1000000 DUP2 PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x2447 JUMPI DUP3 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP2 POP PUSH2 0x245C JUMP JUMPDEST PUSH2 0x2457 DUP4 DUP3 PUSH2 0x4AE7 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP DUP2 POP JUMPDEST PUSH2 0x25F5 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x770D64C654906EBAB085526DD881064F61F0E5990CAA94C94167EB29BC4645C6 DUP5 PUSH1 0x40 ADD MLOAD NUMBER PUSH1 0x40 MLOAD DUP1 DUP4 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP PUSH2 0x287F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x2814 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH31 0x362509948EA59AFAC5C6FA93FEA5327B624BC705A6574F4E9F26E9D8BD7CCC DUP5 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0xD PUSH1 0x0 POP SLOAD DUP3 GT ISZERO PUSH2 0x2800 JUMPI DUP2 PUSH1 0xD PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x955214D16F858518F04C701D01A6E2F5668548B6BE3C6F2F0F8981F77F2CFC06 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH2 0x280F DUP3 PUSH2 0x4D8D PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x287B JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7375ED8230669EA9D64A9DB629D7CE9501779604A67C95C0111377CF09F5B9B9 DUP5 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536D61727442696C6C696F6E7320546F6B656E00000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD POP DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x2916 JUMPI INVALID JUMPDEST DUP1 PUSH1 0x12 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 0x29BE JUMPI POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD EQ ISZERO JUMPDEST ISZERO ISZERO ISZERO PUSH2 0x29C7 JUMPI INVALID JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 PUSH1 0xF PUSH1 0x0 POP SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ DUP1 PUSH2 0x2ADB JUMPI POP PUSH1 0xA DUP2 ADD NUMBER GT ISZERO JUMPDEST ISZERO PUSH2 0x2AEA JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x2BAC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 NUMBER LT ISZERO PUSH2 0x2B01 JUMPI PUSH1 0x0 SWAP1 POP DUP1 POP PUSH2 0x2B0B JUMP JUMPDEST PUSH2 0x100 NUMBER SUB SWAP1 POP DUP1 POP JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x2B32 JUMPI PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0xA DUP2 DUP2 ISZERO ISZERO PUSH2 0x2B24 JUMPI INVALID JUMPDEST MOD DUP2 ADD SWAP1 POP DUP1 POP DUP1 SWAP3 POP DUP3 POP POP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0xE PUSH1 0x0 POP SLOAD DUP5 SUB DUP2 ISZERO ISZERO PUSH2 0x2B47 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x2B5A DUP4 DUP3 PUSH2 0x4FA6 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x13 PUSH1 0x0 POP PUSH2 0x4000 DUP4 DUP2 ISZERO ISZERO PUSH2 0x2B6C JUMPI INVALID JUMPDEST MOD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2B79 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0xA DUP4 ADD PUSH1 0xF PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x2BAC JUMP POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xD PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP2 ADD PUSH1 0x0 CALLDATASIZE SWAP1 POP LT ISZERO ISZERO ISZERO PUSH2 0x2BD6 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD SWAP1 POP PUSH2 0x2C6F DUP6 PUSH2 0x1B9F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2C7E DUP5 PUSH2 0x1B9F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x2CD6 DUP4 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD PUSH2 0x50B6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH2 0x2D79 DUP4 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD PUSH2 0x4AC9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH2 0x2DD7 DUP4 DUP3 PUSH2 0x4AC9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 POP PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F42 CALLER NUMBER PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR DUP4 PUSH2 0x2F4E PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2F49 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F5E PUSH2 0x1F2A PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP4 SWAP1 POP PUSH8 0xDE0B6B3A7640000 CALLVALUE GT ISZERO DUP1 ISZERO PUSH2 0x2F7F JUMPI POP PUSH1 0x12 PUSH1 0x0 POP SLOAD CALLVALUE LT JUMPDEST ISZERO ISZERO PUSH2 0x2F8B JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 CALLVALUE GT ISZERO PUSH2 0x331A JUMPI PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP SLOAD EQ ISZERO PUSH2 0x2FE4 JUMPI PUSH1 0x14 CALLVALUE DUP2 ISZERO ISZERO PUSH2 0x2FAE JUMPI INVALID JUMPDEST DIV PUSH1 0xC PUSH1 0x0 POP PUSH1 0xB PUSH1 0x0 POP SLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2FC6 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x30FF JUMPI PUSH1 0x0 PUSH1 0x64 CALLVALUE DUP2 ISZERO ISZERO PUSH2 0x3028 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x3 NUMBER ADD PUSH1 0x10 PUSH1 0x0 POP SLOAD LT ISZERO PUSH2 0x312F JUMPI PUSH1 0x3 NUMBER ADD PUSH1 0x10 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP CALLVALUE PUSH1 0x11 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH2 0x317E JUMP JUMPDEST PUSH1 0x12 PUSH1 0x0 POP SLOAD PUSH1 0x11 PUSH1 0x0 POP SLOAD GT ISZERO PUSH2 0x3168 JUMPI PUSH1 0x10 PUSH1 0x0 DUP2 DUP2 POP SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SWAP1 SWAP1 SSTORE POP CALLVALUE PUSH1 0x11 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH2 0x317D JUMP JUMPDEST CALLVALUE PUSH1 0x11 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 CALLVALUE PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH3 0xFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x10 PUSH1 0x0 POP SLOAD PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x63F4540040CF99A22F577EF321C170763020E6277E47275ED9B3D17EC14E13D DUP3 PUSH3 0xFFFFFF AND PUSH1 0x10 PUSH1 0x0 POP SLOAD CALLVALUE PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH2 0x3328 PUSH2 0x2ABD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH1 0x10 PUSH1 0x0 POP SLOAD SWAP2 POP POP PUSH2 0x3338 JUMP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x4000 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 PUSH1 0xE PUSH1 0x0 POP SLOAD EQ DUP1 ISZERO PUSH2 0x3386 JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST DUP1 ISZERO PUSH2 0x3394 JUMPI POP PUSH2 0x4000 DUP3 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x33A0 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x13 PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP SWAP1 POP PUSH2 0x4000 DUP4 DUP3 ADD GT ISZERO PUSH2 0x33D2 JUMPI PUSH2 0x4000 PUSH1 0x13 PUSH1 0x0 POP DUP2 PUSH2 0x33CC SWAP2 SWAP1 PUSH2 0x5125 JUMP JUMPDEST POP PUSH2 0x33EE JUMP JUMPDEST DUP3 PUSH1 0x13 PUSH1 0x0 POP DUP2 DUP2 DUP1 SLOAD SWAP1 POP ADD SWAP2 POP DUP2 PUSH2 0x33EC SWAP2 SWAP1 PUSH2 0x5125 JUMP JUMPDEST POP JUMPDEST JUMPDEST PUSH1 0x13 PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0x3436 JUMPI PUSH1 0x1 PUSH1 0x13 PUSH1 0x0 POP DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3413 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x33EF JUMP JUMPDEST PUSH2 0x4000 PUSH1 0x13 PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP LT ISZERO ISZERO PUSH2 0x3475 JUMPI PUSH1 0xA NUMBER DUP2 ISZERO ISZERO PUSH2 0x3455 JUMPI INVALID JUMPDEST MOD NUMBER SUB PUSH1 0xE PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0xE PUSH1 0x0 POP SLOAD PUSH1 0xF PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST PUSH1 0x13 PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP SWAP2 POP POP PUSH2 0x3487 JUMP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP SLOAD GT ISZERO PUSH2 0x34A5 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x3500 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4000 PUSH1 0xA MUL PUSH1 0xE PUSH1 0x0 POP SLOAD NUMBER SUB DUP2 ISZERO ISZERO PUSH2 0x34BE JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0xB PUSH1 0x0 POP SLOAD DUP2 GT ISZERO PUSH2 0x34D8 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x3500 JUMP JUMPDEST PUSH2 0x4000 PUSH1 0xA MUL PUSH1 0xE PUSH1 0x0 POP SLOAD NUMBER SUB DUP2 ISZERO ISZERO PUSH2 0x34EF JUMPI INVALID JUMPDEST MOD PUSH2 0x4000 PUSH1 0xA MUL SUB SWAP2 POP POP PUSH2 0x3500 JUMP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x3593 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x35F1 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x362A JUMPI INVALID JUMPDEST PUSH2 0x3639 CALLER PUSH2 0x1B9F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3648 DUP2 PUSH2 0x1B9F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 SWAP1 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x36C5 JUMPI PUSH2 0x36AB PUSH2 0x2ABD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO ISZERO PUSH2 0x36B7 JUMPI POP PUSH2 0x36C7 JUMP JUMPDEST JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x3695 JUMP JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36D4 PUSH2 0x50DB JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x380F JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST DUP1 PUSH2 0x3823 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND NUMBER LT JUMPDEST DUP1 PUSH2 0x383F JUMPI POP PUSH2 0x4000 PUSH1 0xA MUL DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND ADD NUMBER LT ISZERO JUMPDEST ISZERO PUSH2 0x384E JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x3919 JUMP JUMPDEST PUSH2 0x100 DUP2 PUSH1 0x40 ADD MLOAD ADD PUSH4 0xFFFFFFFF AND NUMBER LT ISZERO PUSH2 0x388A JUMPI PUSH2 0x3882 DUP2 DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR PUSH2 0x4AE7 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3919 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE PUSH1 0x0 POP SLOAD GT ISZERO PUSH2 0x390E JUMPI PUSH1 0x0 PUSH2 0x38B3 DUP3 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0x4CE2 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH4 0x1000000 DUP2 PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x38F3 JUMPI DUP2 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 POP POP POP PUSH2 0x3919 JUMP PUSH2 0x390C JUMP JUMPDEST PUSH2 0x3903 DUP3 DUP3 PUSH2 0x4AE7 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x3919 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x3919 JUMP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x3977 JUMPI INVALID JUMPDEST PUSH1 0x3 NUMBER ADD PUSH1 0x10 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x11 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x13 PUSH1 0x0 POP DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x39A9 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x3A53 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xE PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD SWAP1 POP PUSH2 0x3AB0 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x13 PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP SWAP1 POP PUSH2 0x3AC7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH2 0x3B3B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 POP DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3B52 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH2 0x3BF6 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH2 0x3C63 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x504C415900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 ADD POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT DUP1 ISZERO PUSH2 0x3D9C JUMPI POP NUMBER PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x3EE9 JUMPI PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH2 0x3EE7 DUP2 PUSH2 0x4D8D PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x3F4E JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x3F87 JUMPI INVALID JUMPDEST PUSH2 0x3F96 CALLER PUSH2 0x1B9F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3FA5 DUP2 PUSH2 0x1B9F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 PUSH1 0x4 DUP2 ADD PUSH1 0x0 CALLDATASIZE SWAP1 POP LT ISZERO ISZERO ISZERO PUSH2 0x4000 JUMPI INVALID JUMPDEST PUSH2 0x400F CALLER PUSH2 0x1B9F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4067 DUP3 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD PUSH2 0x4AC9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x428A JUMPI PUSH2 0x4117 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1B9F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4191 DUP3 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD PUSH2 0x50B6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x43A2 JUMP JUMPDEST PUSH2 0x4299 DUP4 PUSH2 0x1B9F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x42F1 DUP3 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD PUSH2 0x50B6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43BB PUSH1 0x80 PUSH2 0x336F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x43C2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x43DC PUSH2 0x4582 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x12 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x4419 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x12B4 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x4487 JUMPI INVALID JUMPDEST PUSH2 0x4495 PUSH2 0x4582 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x44C2 JUMPI POP DUP1 PUSH1 0x7 PUSH1 0x0 POP SLOAD PUSH1 0xA PUSH1 0x9 PUSH1 0x9 PUSH1 0x0 POP SLOAD MUL DUP2 ISZERO ISZERO PUSH2 0x44BB JUMPI INVALID JUMPDEST DIV ADD ADD SELFBALANCE LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x44CE JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xA PUSH1 0x0 POP SLOAD DUP2 ISZERO ISZERO PUSH2 0x44DF JUMPI INVALID JUMPDEST DIV PUSH1 0x9 PUSH1 0x0 POP SLOAD LT ISZERO ISZERO PUSH2 0x4520 JUMPI PUSH2 0x190 SELFBALANCE DUP2 ISZERO ISZERO PUSH2 0x44FA JUMPI INVALID JUMPDEST DIV DUP2 GT ISZERO DUP1 ISZERO PUSH2 0x4513 JUMPI POP NUMBER PUSH2 0x9D80 PUSH1 0x14 PUSH1 0x0 POP SLOAD ADD GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x451F JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4567 JUMPI RETURNDATASIZE PUSH1 0x0 PUSH1 0x0 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP NUMBER PUSH1 0x14 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x14 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 POP SLOAD GT DUP1 ISZERO PUSH2 0x45A3 JUMPI POP PUSH1 0x5 PUSH2 0x4000 MUL PUSH1 0x8 PUSH1 0x0 POP SLOAD ADD NUMBER LT ISZERO JUMPDEST ISZERO PUSH2 0x45BA JUMPI PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH2 0x467F JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE PUSH1 0x0 POP SLOAD GT ISZERO PUSH2 0x467E JUMPI PUSH1 0x0 PUSH2 0x4000 PUSH1 0xA MUL PUSH1 0xE PUSH1 0x0 POP SLOAD NUMBER SUB DUP2 ISZERO ISZERO PUSH2 0x45E1 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x2 PUSH1 0xC PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP SUB DUP2 GT ISZERO PUSH2 0x462C JUMPI PUSH1 0xC PUSH1 0x0 POP PUSH1 0x0 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP SWAP1 PUSH1 0x1 DUP3 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST SWAP1 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 SWAP2 POP SWAP1 SWAP1 SSTORE POP JUMPDEST PUSH1 0xB PUSH1 0x0 POP SLOAD DUP2 GT DUP1 ISZERO PUSH2 0x4645 JUMPI POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP SLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 0x4660 JUMPI POP PUSH1 0x1 PUSH1 0xC PUSH1 0x0 POP DUP1 SLOAD SWAP1 POP SUB PUSH1 0xB PUSH1 0x0 POP SLOAD LT JUMPDEST ISZERO PUSH2 0x467C JUMPI PUSH1 0xB PUSH1 0x0 DUP2 DUP2 POP SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SWAP1 SWAP1 SSTORE POP JUMPDEST POP JUMPDEST JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD SWAP1 POP PUSH2 0x4711 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x11 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP SLOAD EQ ISZERO ISZERO PUSH2 0x4735 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x4744 CALLER PUSH2 0x1B9F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x4752 PUSH2 0x3CA4 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 POP SLOAD EQ ISZERO ISZERO PUSH2 0x4773 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x4782 CALLER PUSH2 0x1B9F PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH7 0x38D7EA4C68000 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD MUL SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x3 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 SWAP1 SSTORE DUP1 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP PUSH1 0xA PUSH1 0x9 DUP3 MUL DUP2 ISZERO ISZERO PUSH2 0x48EC JUMPI INVALID JUMPDEST DIV PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x49B8 PUSH2 0x3CA4 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMPDEST JUMP JUMPDEST PUSH1 0xB PUSH1 0x0 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1A SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND SWAP1 POP PUSH2 0x4A29 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x4A87 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 POP SLOAD EQ DUP1 ISZERO PUSH2 0x4AA1 JUMPI POP PUSH1 0x0 PUSH1 0xE PUSH1 0x0 POP SLOAD GT JUMPDEST DUP1 ISZERO PUSH2 0x4AAC JUMPI POP DUP1 NUMBER LT JUMPDEST ISZERO ISZERO PUSH2 0x4AB8 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP1 PUSH1 0x8 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x4AD7 JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP PUSH2 0x4AE1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP4 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP4 DUP3 XOR SWAP1 POP PUSH1 0x0 PUSH1 0x0 PUSH3 0xF00000 DUP4 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4B14 JUMPI PUSH1 0x0 PUSH2 0x4B17 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH3 0xF0000 DUP5 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4B30 JUMPI PUSH1 0x0 PUSH2 0x4B33 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH2 0xF000 DUP6 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4B4B JUMPI PUSH1 0x0 PUSH2 0x4B4E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH2 0xF00 DUP7 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4B66 JUMPI PUSH1 0x0 PUSH2 0x4B69 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH1 0xF0 DUP8 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4B80 JUMPI PUSH1 0x0 PUSH2 0x4B83 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH1 0xF DUP9 AND PUSH3 0xFFFFFF AND EQ PUSH2 0x4B9A JUMPI PUSH1 0x0 PUSH2 0x4B9D JUMP JUMPDEST PUSH1 0x1 JUMPDEST ADD ADD ADD ADD ADD PUSH1 0xFF AND SWAP1 POP PUSH1 0x6 DUP2 PUSH3 0xFFFFFF AND EQ ISZERO PUSH2 0x4BE3 JUMPI PUSH3 0x6ACFC0 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP4 POP POP POP POP PUSH2 0x4CDC JUMP JUMPDEST PUSH1 0x5 DUP2 PUSH3 0xFFFFFF AND EQ ISZERO PUSH2 0x4C1E JUMPI PUSH2 0x4E20 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP4 POP POP POP POP PUSH2 0x4CDC JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH3 0xFFFFFF AND EQ ISZERO PUSH2 0x4C59 JUMPI PUSH2 0x1F4 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP4 POP POP POP POP PUSH2 0x4CDC JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH3 0xFFFFFF AND EQ ISZERO PUSH2 0x4C93 JUMPI PUSH1 0x19 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP4 POP POP POP POP PUSH2 0x4CDC JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH3 0xFFFFFF AND EQ ISZERO PUSH2 0x4CCD JUMPI PUSH1 0x3 DUP7 PUSH1 0x0 ADD MLOAD PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL SWAP4 POP POP POP POP PUSH2 0x4CDC JUMP JUMPDEST PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x4CDC JUMP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 PUSH1 0xA PUSH1 0xE PUSH1 0x0 POP SLOAD DUP5 SUB DUP2 ISZERO ISZERO PUSH2 0x4CF9 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x13 PUSH1 0x0 POP PUSH2 0x4000 DUP4 DUP2 ISZERO ISZERO PUSH2 0x4D10 JUMPI INVALID JUMPDEST MOD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x4D1D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 ADD PUSH1 0x0 JUMPDEST POP SLOAD SWAP1 POP PUSH1 0xF0 DUP2 SWAP1 SHR PUSH2 0x4000 DUP4 DUP2 ISZERO ISZERO PUSH2 0x4D41 JUMPI INVALID JUMPDEST DIV EQ ISZERO ISZERO PUSH2 0x4D57 JUMPI PUSH4 0x1000000 SWAP3 POP POP POP PUSH2 0x4D88 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0xE PUSH1 0x0 POP SLOAD DUP7 SUB DUP2 ISZERO ISZERO PUSH2 0x4D6C JUMPI INVALID JUMPDEST MOD SWAP1 POP PUSH3 0xFFFFFF DUP2 PUSH1 0x18 MUL DUP4 SWAP1 SHR AND SWAP4 POP POP POP POP PUSH2 0x4D88 JUMP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SELFBALANCE DUP2 ISZERO ISZERO PUSH2 0x4D9B JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP2 DUP2 LT ISZERO ISZERO PUSH2 0x4E12 JUMPI CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4DEE JUMPI RETURNDATASIZE PUSH1 0x0 PUSH1 0x0 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH7 0x38D7EA4C68000 DUP3 GT ISZERO PUSH2 0x4E0D JUMPI PUSH2 0x4E0C PUSH2 0x4582 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH2 0x4FA1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SUB SWAP1 POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP3 DUP3 DUP3 POP SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP DUP1 PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH3 0x2A300 NUMBER ADD PUSH1 0x5 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 POP PUSH1 0x0 ADD PUSH1 0x1C PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x4F9E JUMPI RETURNDATASIZE PUSH1 0x0 PUSH1 0x0 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF0 PUSH2 0x4000 DUP4 PUSH4 0xFFFFFFFF AND DUP2 ISZERO ISZERO PUSH2 0x4FBD JUMPI INVALID JUMPDEST DIV SWAP1 SHL PUSH1 0xD8 PUSH3 0xFFFFFF PUSH1 0x9 DUP7 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0xC0 PUSH3 0xFFFFFF PUSH1 0x8 DUP8 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0xA8 PUSH3 0xFFFFFF PUSH1 0x7 DUP9 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x90 PUSH3 0xFFFFFF PUSH1 0x6 DUP10 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x78 PUSH3 0xFFFFFF PUSH1 0x5 DUP11 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x60 PUSH3 0xFFFFFF PUSH1 0x4 DUP12 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x48 PUSH3 0xFFFFFF PUSH1 0x3 DUP13 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x30 PUSH3 0xFFFFFF PUSH1 0x2 DUP14 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH1 0x18 PUSH3 0xFFFFFF PUSH1 0x1 DUP15 ADD PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND SWAP1 SHL PUSH3 0xFFFFFF DUP14 PUSH4 0xFFFFFFFF AND BLOCKHASH PUSH1 0x0 SHR AND OR OR OR OR OR OR OR OR OR OR SWAP1 POP PUSH2 0x50B0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x50CB JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP PUSH2 0x50D5 JUMP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD POP SWAP1 JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 0x514C JUMPI DUP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x514B SWAP2 SWAP1 PUSH2 0x5151 JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x5179 SWAP2 SWAP1 PUSH2 0x515B JUMP JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x5175 JUMPI PUSH1 0x0 DUP2 DUP2 POP PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x515B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH9 0x6EC1A7381525E0F370 0x2E RETURNDATACOPY PUSH30 0xCEF1A8D9CA19FE9413D6CC48DC78483DB7F43164736F6C63430005110032 ","sourceMap":"4159:22732:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20871:558;20925:1;20913:9;:13;20910:304;;;20956:1;20944:11;;;;:13;20941:243;;;21039:13;21046:5;;;;;;;;;;;21039:6;:13;;:::i;:::-;20941:243;;;21163:6;:4;:6;;:::i;:::-;;20941:243;21197:7;;20910:304;21288:1;21273:11;;;;:16;:42;;;;;21314:1;21293:8;;;:20;21302:10;21293:20;;;;;;;;;;;;;;;;;;:22;21273:42;21270:88;;;21330:26;21345:10;21330:14;:26;;:::i;:::-;21270:88;21367:5;:3;:5;;:::i;:::-;20871:558;4159:22732;13169:1956;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13169:1956:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;4222:51;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4222:51:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;8:100;52:2;49:1;45:10;40:15;;8:100;;;12:14;4222:51:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10033:89;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10033:89:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10033:89:0;;;;;;;;;;;;;;;;;:::i;:::-;;3372:297;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3372:297:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3372:297:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;18641:2063;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18641:2063:0;;;:::i;:::-;;25951:671;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25951:671:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5313:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5313:22:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;551:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;551:23:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2747:395;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2747:395:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2747:395:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;21742:172;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21742:172:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;22022:1326;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22022:1326:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4323:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4323:33:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;610:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;610:23:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5839:39;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5839:39:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;23488:608;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23488:608:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;23488:608:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8690:353;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8690:353:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7993:113;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7993:113:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7993:113:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9452:194;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9452:194:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9452:194:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;26722:166;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26722:166:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;26722:166:0;;;;;;;;;;;;;;;;;:::i;:::-;;17765:818;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17765:818:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;17765:818:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10224:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10224:107:0;;;:::i;:::-;;5693:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5693:20:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5693:20:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7262:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7262:123:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7262:123:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5362:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5362:25:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2266:104;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2266:104:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2266:104:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7060:96;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7060:96:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5495:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5495:24:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7765:131;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7765:131:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7765:131:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5209:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5209:23:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5209:23:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;578:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;578:20:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8476:122;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8476:122:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8476:122:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8234:114;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8234:114:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8234:114:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;21479:152;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4279:38;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4279:38:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;8:100;52:2;49:1;45:10;40:15;;8:100;;;12:14;4279:38:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11994:312;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11994:312:0;;;:::i;:::-;;4958:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4958:27:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9168:185;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9168:185:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9168:185:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;1577:491;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1577:491:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1577:491:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;24174:87;;8:9:-1;5:2;;;30:1;27;20:12;5:2;24174:87:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5435:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5435:24:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11157:68;;;:::i;:::-;;5625:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5625:32:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12989:71;;;:::i;:::-;;5105:43;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5105:43:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4866:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4866:29:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10616:476;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10616:476:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10616:476:0;;;;;;;;;;;;;;;;;:::i;:::-;;5906:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5906:29:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11307:613;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11307:613:0;;;:::i;:::-;;3981:133;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3981:133:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3981:133:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5560:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5560:26:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;15796:132;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15796:132:0;;;:::i;:::-;;5044:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5044:29:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;15251:490;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15251:490:0;;;:::i;:::-;;5173:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5173:30:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7504:133;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7504:133:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7504:133:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9750:167;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9750:167:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9750:167:0;;;;;;;;;;;;;;;;;:::i;:::-;;13169:1956;13324:1;13310:11;;;;:15;:64;;;;;13372:1;5873:5;13359:14;13344:11;;;;:30;13329:12;:45;13310:64;:100;;;;;13394:16;;;;13378:13;;;;:32;13310:100;13302:109;;;;;;;;13421:14;13438:9;13421:26;;13491:13;;;;13472:16;;;;:32;13460:9;:44;13457:373;;;13551:13;;;;13532:16;;;;:32;13520:44;;;;13594:16;;;;13578:13;;:32;;;;;;;13638:1;13624:11;;:15;;;;;;;13679:10;:19;;:45;13699:24;13713:9;13699;:13;;:24;;;;:::i;:::-;13679:45;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13679:45:0;13457:373;;;13810:9;13793:13;;:26;;;;;;;;;;;;;;;13457:373;13862:1;13842:22;;:8;:22;;;:43;;;;13880:5;;;;;;;;;;;13868:17;;:8;:17;;;13842:43;13839:435;;;13929:2;13917:9;:14;;;;;;;;13900:13;;:31;;;;;;;;;;;;;;;13991:2;13979:9;:14;;;;;;;;13945:7;;;:14;13953:5;;;;;;;;;;;13945:14;;;;;;;;;;;;;;;;;:22;;;:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13839:435;;;14102:1;14095:3;14091:1;14079:9;:13;:19;;;;;;;;14078:25;14061:13;;:42;;;;;;;;;;;;;;;14167:3;14163:1;14151:9;:13;:19;;;;;;;;14117:7;;;:14;14125:5;;;;;;;;;;;14117:14;;;;;;;;;;;;;;;;;:22;;;:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14268:3;14264:1;14252:9;:13;:19;;;;;;;;14215:7;;;:17;14223:8;14215:17;;;;;;;;;;;;;;;;;:25;;;:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13839:435;14352:14;;;;14304:7;;;:19;14312:10;14304:19;;;;;;;;;;;;;;;;;:38;;;:63;;;;;;;;;;;;;;;;;;14409:18;14442:6;14430:9;:18;;;;;;;;14409:39;;14458:17;14495:6;14490:2;14478:9;:14;:23;;;;;;;;14458:43;;14513:20;14553:6;14548:2;14536:9;:14;:23;;;;;;;;14513:46;;14595:13;14571:8;;;:20;14580:10;14571:20;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;14637:12;14618:8;;;:15;14627:5;;;;;;;;;;;14618:15;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;14716:15;14694:8;;;:18;14703:8;;;;;;;;;;;14694:18;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;14819:15;14804:12;14788:13;:28;:46;14773:11;;:61;;;;;;;;;;;;;;;14869:10;14849:45;;14866:1;14849:45;;;14880:13;14849:45;;;;;;;;;;;;;;;;;;14946:5;;;;;;;;;;;14926:39;;14943:1;14926:39;;;14952:12;14926:39;;;;;;;;;;;;;;;;;;15017:8;;;;;;;;;;;14997:45;;15014:1;14997:45;;;15026:15;14997:45;;;;;;;;;;;;;;;;;;15099:8;15074:44;;15088:10;15074:44;;;15108:9;15074:44;;;;;;;;;;;;;;;;;;13169:1956;;;;;;:::o;21479:152::-;21519:4;21542:82;21585:10;21596:12;21568:41;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;21568:41:0;;;21558:52;;;;;;21553:58;;21621:1;21542:10;:82;;:::i;:::-;21535:89;;;;21479:152;;:::o;16015:738::-;16072:9;16084:7;;;:13;16092:4;16084:13;;;;;;;;;;;;;;;;;:32;;;;;;;;;;;;16072:44;;;;16146:1;16130:8;;;:14;16139:4;16130:14;;;;;;;;;;;;;;;;;;:17;16129:32;;;;16159:1;16153:4;:7;16129:32;16126:136;;;16216:14;;;;16176:7;;;:13;16184:4;16176:13;;;;;;;;;;;;;;;;;:32;;;:55;;;;;;;;;;;;;;;;;;16245:7;;;16126:136;16280:14;;;;16274:4;:20;16271:56;;;16310:7;;;16271:56;16336:10;16379:11;;;;16366:10;16349:8;;;:14;16358:4;16349:14;;;;;;;;;;;;;;;;;;:27;:41;;;;;;;;16336:54;;16400:12;16415:1;16400:16;;16426:92;16436:14;;;;16431:4;:19;16426:92;;;16492:9;;;16502:4;16492:15;;;;;;;;;;;;;;;;;;;;;;16484:5;:23;16473:34;;;;;;16426:92;16451:6;;;;;;;16426:92;;;16548:10;16538:7;:20;;;;;;;;16527:32;;;;16586:7;16569:13;;:24;;;;;;;;;;;;;;;16636:7;16603;;;:13;16611:4;16603:13;;;;;;;;;;;;;;;;;:21;;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16696:4;16654:7;;;:13;16662:4;16654:13;;;;;;;;;;;;;;;;;:32;;;:47;;;;;;;;;;;;;;;;;;16728:4;16716:30;;;16733:7;16741:4;16716:30;;;;;;;;;;;;;;;;;;;;;;;;16015:738;;;;;:::o;18641:2063::-;18673:17;;:::i;:::-;18693:4;;;:16;18698:10;18693:16;;;;;;;;;;;;;;;;;18673:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18739:1;18722:6;:15;;;:18;;;18719:149;;;18797:40;;;;;;;;18809:1;18797:40;;;;;;18821:1;18797:40;;;;;;18834:1;18797:40;;;;;;;18778:4;;;:16;18783:10;18778:16;;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18851:7;;;18719:149;18895:1;18881:6;:12;;;:15;;;18880:41;;;;18919:1;18902:6;:15;;;:18;;;18880:41;18877:101;;;18936:11;:9;:11;;:::i;:::-;18961:7;;;18877:101;19008:6;:15;;;18995:28;;:12;:28;18987:37;;;;;;;;19114:12;5873:5;19094:2;:15;19075:6;:15;;;:35;;;:51;;19072:259;;;19187:10;19179:48;;;19198:6;:15;;;19214:12;19179:48;;;;;;;;;;;;;;;;;;;;;;;;;;19260:40;;;;;;;;19272:1;19260:40;;;;;;19284:1;19260:40;;;;;;19297:1;19260:40;;;;;;;19241:4;;;:16;19246:10;19241:16;;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19314:7;;;19072:259;19340:10;19353:1;19340:14;;19364:11;19378:1;19364:15;;19421:3;19405:6;:15;;;:19;19392:32;;:12;:32;19389:884;;;19513:6;:15;;;19503:26;;;19498:32;;19484:47;;;;;;19553:29;19562:6;19576:4;19553:8;:29;;:::i;:::-;19545:37;;;;19389:884;;;19634:1;19624:9;;;;:11;19621:642;;;19782:24;19790:6;:15;;;19782:24;;:7;:24;;:::i;:::-;19775:31;;;;19835:9;19827:4;:17;;;19824:226;;;19919:6;:12;;;19914:18;;19906:26;;;;19824:226;;;20002:29;20011:6;20025:4;20002:8;:29;;:::i;:::-;19994:37;;;;19824:226;19621:642;;;20105:10;20097:48;;;20116:6;:15;;;20132:12;20097:48;;;;;;;;;;;;;;;;;;;;;;;;;;20182:40;;;;;;;;20194:1;20182:40;;;;;;20206:1;20182:40;;;;;;20219:1;20182:40;;;;;;;20163:4;;;:16;20168:10;20163:16;;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20240:8;;;;;19621:642;19389:884;20301:40;;;;;;;;20313:1;20301:40;;;;;;20325:1;20301:40;;;;;;20338:1;20301:40;;;;;;;20282:4;;;:16;20287:10;20282:16;;;;;;;;;;;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20360:1;20354:5;:7;20351:347;;;20389:10;20382:56;;;20405:6;:14;;;20400:20;;20426:4;20421:10;;20432:5;20382:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20463:6;;;;20455:5;:14;20452:118;;;20497:5;20488:6;;:14;;;;;;;20538:10;20525:30;;;20549:5;20525:30;;;;;;;;;;;;;;;;;;20452:118;20583:10;20587:5;20583:3;:10;;:::i;:::-;20351:347;;;20644:10;20636:51;;;20660:6;:14;;;20655:20;;20681:4;20676:10;;20636:51;;;;;;;;;;;;;;;;;;;;;;;;20351:347;18641:2063;;;;:::o;4222:51::-;;;;;;;;;;;;;;;;;;;;;:::o;10033:89::-;6597:5;;;;;;;;;;;6583:19;;:10;:19;;;6576:27;;;;;;10108:7;10095:10;;:20;;;;;;;6613:1;10033:89;;:::o;3372:297::-;3527:1;3517:6;:11;;3516:53;;;;;3567:1;3534:7;;;:19;3542:10;3534:19;;;;;;;;;;;;;;;;;:29;3554:8;3534:29;;;;;;;;;;;;;;;;;;:34;;3516:53;3514:56;3507:64;;;;;;3609:6;3577:7;;;:19;3585:10;3577:19;;;;;;;;;;;;;;;;;:29;3597:8;3577:29;;;;;;;;;;;;;;;;:38;;;;;;;3647:8;3626:38;;3635:10;3626:38;;;3657:6;3626:38;;;;;;;;;;;;;;;;;;3372:297;;;:::o;25951:671::-;25986:4;26002:10;26015:8;;;;26002:21;;26045:1;26036:5;:10;:40;;;;26074:2;26066:5;:10;26050:12;:26;;26036:40;26033:83;;;26099:5;26092:13;;;;;26033:83;26125:14;26165:3;26152:12;:16;26149:159;;;26228:1;26216:13;;;;26149:159;;;26294:3;26279:12;:18;26267:30;;;;26149:159;26328:9;26320:5;:17;26317:121;;;26353:8;26364:9;26353:20;;26400:2;26394:3;:8;;;;;;;;26387:15;;;;;;26424:3;26416:11;;;;26317:121;;26447:10;26482:2;26469:9;;;;26461:5;:17;26460:24;;;;;;;;26447:37;;26523:39;26541:5;26555;26523:10;:39;;:::i;:::-;26494:6;;;5873:5;26501;:18;;;;;;;;26494:26;;;;;;;;;;;;;;;;;;;;:68;;;;;;;26591:2;26583:5;:10;26572:8;;:21;;;;;;;26610:4;26603:12;;;;;;;25951:671;;;;;:::o;5313:22::-;;;;;;:::o;551:23::-;;;;;;:::o;2747:395::-;2833:6;1409:1;1402:4;:8;1383;;:15;;:27;;1376:35;;;;;;2847:15;2865:7;;;:14;2873:5;2865:14;;;;;;;;;;;;;;;;;:26;2880:10;2865:26;;;;;;;;;;;;;;;;;;2847:44;;2897:21;2912:5;2897:14;:21;;:::i;:::-;2924:19;2939:3;2924:14;:19;;:::i;:::-;2965:25;2983:6;2965:8;;;:13;2974:3;2965:13;;;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2949:8;;;:13;2958:3;2949:13;;;;;;;;;;;;;;;;:41;;;;;;;3014:27;3034:6;3014:8;;;:15;3023:5;3014:15;;;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;2996:8;;;:15;3005:5;2996:15;;;;;;;;;;;;;;;;:45;;;;;;;3076:22;3091:6;3076:10;:14;;:22;;;;:::i;:::-;3047:7;;;:14;3055:5;3047:14;;;;;;;;;;;;;;;;;:26;3062:10;3047:26;;;;;;;;;;;;;;;;:51;;;;;;;3125:3;3109:28;;3118:5;3109:28;;;3130:6;3109:28;;;;;;;;;;;;;;;;;;1418:1;;2747:395;;;;;:::o;21742:172::-;21804:4;21827:80;21870:10;21881:12;21853:41;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;21853:41:0;;;21843:52;;;;;;21838:58;;21898:8;21827:10;:80;;:::i;:::-;21820:87;;;;21742:172;;;;:::o;22022:1326::-;22096:4;22112:5;:3;:5;;:::i;:::-;22158:14;22182:5;22158:30;;22219:7;22206:9;:20;;:46;;;;;22242:10;;;;22230:9;:22;22206:46;22198:55;;;;;;;;22278:1;22266:9;:13;22263:1003;;;22310:1;22297:11;;;;:14;22294:154;;;22416:2;22404:9;:14;;;;;;;;22375:9;;;22385:14;;;;22375:25;;;;;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;;;;22294:154;22484:1;22464:22;;:8;:22;;;;22461:204;;;22506:8;22529:3;22517:9;:15;;;;;;;;22506:26;;22567:3;22550:13;;:20;;;;;;;;;;;;;;;22625:3;22588:7;;;:17;22596:8;22588:17;;;;;;;;;;;;;;;;;:25;;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22461:204;;22707:1;22692:12;:16;22681:8;;;;:27;22678:389;;;22754:1;22739:12;:16;22728:8;;:27;;;;;;;22786:9;22773:10;;:22;;;;;;;22678:389;;;22861:10;;;;22848;;;;:23;22845:208;;;22895:8;;:10;;;;;;;;;;;;;;;;;22940:9;22927:10;;:22;;;;;;;22845:208;;;23025:9;23011:10;;:23;;;;;;;;;;;;;;;22845:208;22678:389;23099:86;;;;;;;;23119:9;23099:86;;;;;;23147:7;23140:15;;23099:86;;;;;;23174:8;;;;23099:86;;;;;;;23080:4;;;:16;23085:10;23080:16;;;;;;;;;;;;;;;;:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23211:10;23204:51;;;23227:7;23222:13;;23236:8;;;;23245:9;23204:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22263:1003;23275:9;:7;:9;;:::i;:::-;;23332:8;;;;23325:16;;;;;22022:1326;;;;;;:::o;4323:33::-;4355:1;4323:33;:::o;610:23::-;;;;;;;;;;;;;:::o;5839:39::-;5873:5;5839:39;:::o;23488:608::-;23535:4;23572:1;23559:9;;;;:14;:27;;;;;23585:1;23577:5;:9;23559:27;:50;;;;;5873:5;23590;:19;;23559:50;23551:59;;;;;;;;23620:6;23629;;;:13;;;;23620:22;;5873:5;23659;23655:1;:9;:22;23652:137;;;5873:5;23692:6;;;:26;;;;;:::i;:::-;;23652:137;;;23773:5;23756:6;;;:22;;;;;;;;;;;;;;:::i;:::-;;23652:137;23798:88;23805:6;;;:13;;;;23803:1;:15;23798:88;;;23874:1;23862:6;;;23869:1;23862:9;;;;;;;;;;;;;;;;;;;;:13;;;;;;;23798:88;23819:3;;;;;;;23798:88;;;5873:5;23898:6;;;:13;;;;:25;;23895:164;;;24011:2;23996:12;:17;;;;;;;;23979:12;:35;23967:9;;:47;;;;;;;24039:9;;;;24028:8;;:20;;;;;;;23895:164;24075:6;;;:13;;;;24068:21;;;;;23488:608;;;;;:::o;8690:353::-;8740:4;8773:1;8759:11;;;;:15;8756:54;;;8797:1;8790:9;;;;8756:54;8819:11;5873:5;8863:2;:15;8849:9;;;;8834:12;:24;8833:46;;;;;;;;8819:60;;8901:14;;;;8892:6;:23;8889:62;;;8938:1;8931:9;;;;;8889:62;5873:5;9018:2;:15;9004:9;;;;8989:12;:24;8988:46;;;;;;;;5873:5;8968:2;:15;8967:68;8960:76;;;;;8690:353;;;:::o;7993:113::-;8052:4;8080;;;:12;8085:6;8080:12;;;;;;;;;;;;;;;;;:18;;;;;;;;;;;;8075:24;;8068:31;;;;7993:113;;;;:::o;9452:194::-;6682:8;;;;;;;;;;;6668:22;;:10;:22;;;6661:30;;;;;;9545:1;9529:18;;:4;:18;;;;9522:26;;;;;;9558;9573:10;9558:14;:26;;:::i;:::-;9594:20;9609:4;9594:14;:20;;:::i;:::-;9635:4;9624:8;;:15;;;;;;;;;;;;;;;;;;6701:1;9452:194;;:::o;26722:166::-;26771:6;26778:1;26771:8;;26789:93;26796:4;26794:1;:6;26789:93;;;26823:9;:7;:9;;:::i;:::-;26822:10;26819:53;;;26851:7;;;26819:53;26789:93;26801:3;;;;;;;26789:93;;;26722:166;;;:::o;17765:818::-;17817:4;17834:17;;:::i;:::-;17854:4;;;:10;17859:4;17854:10;;;;;;;;;;;;;;;;;17834:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17893:1;17879:6;:12;;;:15;;;17878:53;;;;17929:1;17912:6;:15;;;:18;;;;17878:53;:99;;;;17961:6;:15;;;17948:28;;:12;:28;17878:99;:166;;;;5873:5;18027:2;:15;18008:6;:15;;;:35;;;17994:12;:49;;17878:166;17874:205;;;18066:1;18059:9;;;;;17874:205;18120:3;18104:6;:15;;;:19;18091:32;;:12;:32;18088:171;;;18190:57;18199:6;18228;:15;;;18218:26;;;18213:32;;18190:8;:57;;:::i;:::-;18183:65;;;;;18088:171;18281:1;18271:9;;;;:11;18268:290;;;18297:11;18311:24;18319:6;:15;;;18311:24;;:7;:24;;:::i;:::-;18297:38;;18360:9;18352:4;:17;;;18349:206;;;18439:6;:12;;;18434:18;;18427:26;;;;;;18349:206;;;18510:29;18519:6;18533:4;18510:8;:29;;:::i;:::-;18503:37;;;;;;18349:206;18268:290;;18574:1;18567:9;;;;;17765:818;;;;;:::o;10224:107::-;6597:5;;;;;;;;;;;6583:19;;:10;:19;;;6576:27;;;;;;10299:1;10284:12;:16;10273:8;;:27;;;;;;;10323:1;10310:10;;:14;;;;;;;6613:1;10224:107;:::o;5693:20::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7262:123::-;7326:4;7354:7;;;:15;7362:6;7354:15;;;;;;;;;;;;;;;;;:23;;;;;;;;;;;;7349:29;;7342:36;;;;7262:123;;;;:::o;5362:25::-;;;;;;:::o;2266:104::-;2322:12;2349:8;;;:16;2358:6;2349:16;;;;;;;;;;;;;;;;;;2342:23;;;;2266:104;;;;:::o;7060:96::-;7107:4;7135:6;;;:13;;;;7123:26;;;;7060:96;;:::o;5495:24::-;;;;;;:::o;7765:131::-;7827:4;7855:7;;;:15;7863:6;7855:15;;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;7850:39;;7843:46;;;;7765:131;;;;:::o;5209:23::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;578:20::-;;;;;;;;;;;;;:::o;8476:122::-;8541:4;8569;;;:12;8574:6;8569:12;;;;;;;;;;;;;;;;;:21;;;;;;;;;;;;8564:27;;8557:34;;;;8476:122;;;;:::o;8234:114::-;8292:4;8320;;;:12;8325:6;8320:12;;;;;;;;;;;;;;;;;:20;;;;;;;;;;;;8315:26;;8308:33;;;;8234:114;;;;:::o;4279:38::-;;;;;;;;;;;;;;;;;;;;;:::o;11994:312::-;12065:1;12035:7;;;:19;12043:10;12035:19;;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;:31;;;:88;;;;;12111:12;12070:7;;;:19;12078:10;12070:19;;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;:53;;;;12035:88;12032:268;;;12138:12;12153:7;;;:19;12161:10;12153:19;;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;12138:42;;;;12224:1;12194:7;;;:19;12202:10;12194:19;;;;;;;;;;;;;;;;;:27;;;:31;;;;;;;;;;;;;;;;;;12256:7;12239:13;;:24;;;;;;;;;;;;;;;12277:12;12281:7;12277:3;:12;;:::i;:::-;12032:268;;11994:312;:::o;4958:27::-;;;;;;:::o;9168:185::-;6597:5;;;;;;;;;;;6583:19;;:10;:19;;;6576:27;;;;;;9255:1;9239:18;;:4;:18;;;;9232:26;;;;;;9268;9283:10;9268:14;:26;;:::i;:::-;9304:20;9319:4;9304:14;:20;;:::i;:::-;9342:4;9334:5;;:12;;;;;;;;;;;;;;;;;;6613:1;9168:185;;:::o;1577:491::-;1644:6;1409:1;1402:4;:8;1383;;:15;;:27;;1376:35;;;;;;1658:26;1673:10;1658:14;:26;;:::i;:::-;1713:32;1738:6;1713:8;;;:20;1722:10;1713:20;;;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;1690:8;;;:20;1699:10;1690:20;;;;;;;;;;;;;;;;:55;;;;;;;1769:4;1754:20;;:3;:20;;;1751:313;;;1786:21;1801:5;;;;;;;;;;;1786:14;:21;;:::i;:::-;1835:27;1855:6;1835:8;;;:15;1844:5;;;;;;;;;;;1835:15;;;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;1817:8;;;:15;1826:5;;;;;;;;;;;1817:15;;;;;;;;;;;;;;;;:45;;;;;;;1898:5;;;;;;;;;;;1877:35;;1886:10;1877:35;;;1905:6;1877:35;;;;;;;;;;;;;;;;;;1751:313;;;1939:19;1954:3;1939:14;:19;;:::i;:::-;1984:25;2002:6;1984:8;;;:13;1993:3;1984:13;;;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;1968:8;;;:13;1977:3;1968:13;;;;;;;;;;;;;;;;:41;;;;;;;2045:3;2024:33;;2033:10;2024:33;;;2050:6;2024:33;;;;;;;;;;;;;;;;;;1751:313;1418:1;1577:491;;;;:::o;24174:87::-;24216:4;24239:14;24249:3;24239:9;:14;;:::i;:::-;24232:22;;;;24174:87;;:::o;5435:24::-;;;;;;:::o;11157:68::-;11204:14;:12;:14;;:::i;:::-;11157:68;:::o;5625:32::-;;;;;;:::o;12989:71::-;13040:13;13047:5;;;;;;;;;;;13040:6;:13;;:::i;:::-;12989:71;:::o;5105:43::-;;;;;;:::o;4866:29::-;;;;;;:::o;10616:476::-;6597:5;;;;;;;;;;;6583:19;;:10;:19;;;6576:27;;;;;;10678:14;:12;:14;;:::i;:::-;10720:1;10710:7;:11;:90;;;;;10793:7;10777:13;;;;10771:2;10767:1;10751:13;;;;:17;:22;;;;;;;;10750:40;:50;10725:21;:75;;10710:90;10702:99;;;;;;;;10850:1;10831:16;;;;:20;;;;;;;;10814:13;;;;:37;;10811:199;;;10943:3;10919:21;:27;;;;;;;;10908:7;:38;;10907:91;;;;;10986:12;10967:15;10951:13;;;;:31;:47;;10907:91;10899:100;;;;;;;;10811:199;11019:10;:19;;:28;11039:7;11019:28;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11019:28:0;11073:12;11057:13;;:28;;;;;;;6613:1;10616:476;;:::o;5906:29::-;;;;;;:::o;11307:613::-;11365:1;11351:11;;;;:15;:65;;;;;11414:1;5873:5;11401:14;11386:11;;;;:30;11370:12;:46;;11351:65;11348:566;;;11460:1;11446:11;;:15;;;;;;;11348:566;;;11542:1;11530:9;;;;:13;11527:377;;;11556:11;5873:5;11600:2;:15;11586:9;;;;11571:12;:24;11570:47;;;;;;;;11556:61;;11666:1;11647:9;;;:16;;;;:20;11638:6;:29;11635:92;;;11691:9;;;11706:1;11691:17;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;11691:17:0;;;;;;;;;;;;;;;;;;;;;;;;;;11635:92;11756:14;;;;11747:6;:23;:43;;;;;11789:1;11774:11;;;;:16;11747:43;:84;;;;;11830:1;11811:9;;;:16;;;;:20;11794:14;;;;:37;11747:84;11744:146;;;11855:14;;:16;;;;;;;;;;;;;;;;;11744:146;11527:377;;11348:566;11307:613;:::o;3981:133::-;4055:14;4084:7;;;:15;4092:6;4084:15;;;;;;;;;;;;;;;;;:25;4100:8;4084:25;;;;;;;;;;;;;;;;;;4077:32;;;;3981:133;;;;;:::o;5560:26::-;;;;;;:::o;15796:132::-;15862:1;15847:11;;;;:16;15839:25;;;;;;;;15874:26;15889:10;15874:14;:26;;:::i;:::-;15910:11;:9;:11;;:::i;:::-;15796:132;:::o;5044:29::-;;;;;;:::o;15251:490::-;15314:1;15299:11;;;;:16;15291:25;;;;;;;;15326:26;15341:10;15326:14;:26;;:::i;:::-;15362:22;15410:6;15387:8;;;:20;15396:10;15387:20;;;;;;;;;;;;;;;;;;:29;15362:54;;15459:1;15431:52;;15440:10;15431:52;;;15462:8;;;:20;15471:10;15462:20;;;;;;;;;;;;;;;;;;15431:52;;;;;;;;;;;;;;;;;;15517:8;;;:20;15526:10;15517:20;;;;;;;;;;;;;;;;15510:27;;;;15620:17;15603:13;;:34;;;;;;;;;;;;;;;15710:2;15706:1;15686:17;:21;:26;;;;;;;;15647:7;;;:19;15655:10;15647:19;;;;;;;;;;;;;;;;;:27;;;:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15723:11;:9;:11;;:::i;:::-;15251:490;;:::o;5173:30::-;;;;;;:::o;7504:133::-;7567:4;7595:7;;;:15;7603:6;7595:15;;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;7590:40;;7583:47;;;;7504:133;;;;:::o;9750:167::-;6597:5;;;;;;;;;;;6583:19;;:10;:19;;;6576:27;;;;;;9838:1;9823:11;;;;:16;:33;;;;;9855:1;9843:9;;;;:13;9823:33;:57;;;;;9875:5;9860:12;:20;9823:57;9815:66;;;;;;;;9905:5;9891:11;;:19;;;;;;;6613:1;9750:167;;:::o;302:101::-;354:4;378:1;373;:6;;366:14;;;;;;397:1;393;:5;386:12;;;;302:101;;;;;:::o;16784:923::-;16858:4;16894:14;16918:7;:15;;;16894:40;;16944:10;16967:5;16957:7;:15;16944:28;;16982:14;17252:1;17239:8;17233:3;:14;17232:21;;;:29;;17260:1;17232:29;;;17256:1;17232:29;17205:1;17193:7;17187:3;:13;17186:20;;;:28;;17213:1;17186:28;;;17209:1;17186:28;17159:1;17148:6;17142:3;:12;17141:19;;;:27;;17167:1;17141:27;;;17163:1;17141:27;17114:1;17104:5;17098:3;:11;17097:18;;;:26;;17122:1;17097:26;;;17118:1;17097:26;17070:1;17061:4;17055:3;:10;17054:17;;;:25;;17078:1;17054:25;;;17074:1;17054:25;17027:1;17019:3;17013;:9;17012:16;;;:24;;17035:1;17012:24;;;17031:1;17012:24;17011:70;:114;:159;:205;:252;16982:281;;;;17287:1;17276:7;:12;;;17273:78;;;17332:7;17315;:13;;;17310:19;;:29;17303:37;;;;;;;17273:78;17374:1;17363:7;:12;;;17360:76;;;17419:5;17402:7;:13;;;17397:19;;:27;17390:35;;;;;;;17360:76;17459:1;17448:7;:12;;;17445:74;;;17504:3;17487:7;:13;;;17482:19;;:25;17475:33;;;;;;;17445:74;17542:1;17531:7;:12;;;17528:73;;;17587:2;17570:7;:13;;;17565:19;;:24;17558:32;;;;;;;17528:73;17624:1;17613:7;:12;;;17610:72;;;17669:1;17652:7;:13;;;17647:19;;:23;17640:31;;;;;;;17610:72;17698:1;17691:9;;;;;;;16784:923;;;;;;;;:::o;25502:400::-;25554:6;25572:10;25608:2;25595:9;;;;25586:6;:18;25585:25;;;;;;;;25572:38;;25620:9;25632:6;;;5873:5;25639;:18;;;;;;;;25632:26;;;;;;;;;;;;;;;;;;;;;;25620:38;;25701:3;25693:4;:11;;5873:5;25671;:18;;;;;;;;:33;;25668:121;;;25727:9;25720:17;;;;;;25668:121;25798:10;25834:2;25821:9;;;;25812:6;:18;25811:25;;;;;;;;25798:38;;25885:8;25875:5;25870:2;:10;25861:4;:20;;25860:33;25846:49;;;;;;;25502:400;;;;;;;:::o;12312:604::-;12357:11;12395:1;12371:21;:25;;;;;;;;12357:39;;12419:7;12409:6;:17;;12406:504;;;12442:10;:19;;:28;12462:7;12442:28;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12442:28:0;12497:8;12487:7;:18;12484:70;;;12525:14;:12;:14;;:::i;:::-;12484:70;12406:504;;;12592:16;12621:6;12611:7;:16;12592:35;;12658:11;12641:13;;:28;;;;;;;;;;;;;;;12722:11;12683:7;;;:19;12691:10;12683:19;;;;;;;;;;;;;;;;;:27;;;:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12810:16;12795:12;:31;12748:7;;;:19;12756:10;12748:19;;;;;;;;;;;;;;;;;:37;;;:79;;;;;;;;;;;;;;;;;;12872:10;:19;;:27;12892:6;12872:27;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12872:27:0;12406:504;;12312:604;;;:::o;24267:1229::-;24339:4;25484:3;5873:5;25459:6;25454:12;;:25;;;;;;;;25452:35;;25430:3;25416:8;25410:1;25403:6;:8;25393:19;;;25388:25;;:36;25386:47;;25319:3;25305:8;25299:1;25292:6;:8;25282:19;;;25277:25;;:36;25275:47;;25208:3;25194:8;25188:1;25181:6;:8;25171:19;;;25166:25;;:36;25164:47;;25097:3;25083:8;25077:1;25070:6;:8;25060:19;;;25055:25;;:36;25053:47;;24986:3;24972:8;24966:1;24959:6;:8;24949:19;;;24944:25;;:36;24942:47;;24876:2;24862:8;24856:1;24849:6;:8;24839:19;;;24834:25;;:36;24832:46;;24766:2;24752:8;24746:1;24739:6;:8;24729:19;;;24724:25;;:36;24722:46;;24656:2;24642:8;24636:1;24629:6;:8;24619:19;;;24614:25;;:36;24612:46;;24546:2;24532:8;24526:1;24519:6;:8;24509:19;;;24504:25;;:36;24502:46;;24434:8;24421:6;24411:19;;;24406:25;;:36;24404:146;:256;:366;:476;:587;:698;:809;:920;:1031;:1084;24396:1093;;;;24267:1229;;;;;:::o;406:117::-;458:4;470:6;483:1;479;:5;470:14;;502:1;497;:6;;490:14;;;;;;517:1;510:8;;;;;406:117;;;;;;:::o;4159:22732::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betsize\",\"type\":\"uint256\"}],\"name\":\"LogBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"LogDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlockNumber\",\"type\":\"uint256\"}],\"name\":\"LogLate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"name\":\"LogLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRecordWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bethash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"LogWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sadd\",\"type\":\"uint256\"}],\"name\":\"addHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addHashes128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betBlockNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betHashOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"betOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"betValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeAnimator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"coldStore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coldStoreLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashBetMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashBetSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashFirst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashesSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hotStore\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"houseKeeping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investBalanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"investDirect\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"play\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"playRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"playSystem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"putHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"putHashes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxsum\",\"type\":\"uint256\"}],\"name\":\"setBetMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"setInvestStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletBlockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletPeriodOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"won\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addHashes(uint256)\":{\"details\":\"Create hash data swap space\",\"params\":{\"_sadd\":\"Number of hashes to add (<=256)\"}},\"addHashes128()\":{\"details\":\"Create hash data swap space, add 128 hashes\"},\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens than an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint specifing the amount of tokens still avaible for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"return\":\"An uint representing the amount owned by the passed address.\"},\"betBlockNumberOf(address)\":{\"details\":\"Show block number of lottery run for the bet.\",\"params\":{\"_owner\":\"The address of the player.\"}},\"betHashOf(address)\":{\"details\":\"Show block number of lottery run for the bet.\",\"params\":{\"_owner\":\"The address of the player.\"}},\"betOf(address)\":{\"details\":\"Check if won in lottery\"},\"betValueOf(address)\":{\"details\":\"Show bet size.\",\"params\":{\"_owner\":\"The address of the player.\"}},\"changeAnimator(address)\":{\"details\":\"Change animator.\",\"params\":{\"_who\":\"The address of new animator.\"}},\"changeOwner(address)\":{\"details\":\"Change owner.\",\"params\":{\"_who\":\"The address of new owner.\"}},\"coldStore(uint256)\":{\"details\":\"Move funds to cold storageinvestBalance and walletBalance is protected from withdraw by ownerif funding is > 50% admin can withdraw only 0.25% of balance weakly\",\"params\":{\"_amount\":\"The amount of wei to move to cold storage\"}},\"disinvest()\":{\"details\":\"Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\"},\"dividendsBlocks()\":{\"details\":\"Print number of block till next expected dividend payment\"},\"hashesLength()\":{\"details\":\"Show length of allocated swap space\"},\"hotStore()\":{\"details\":\"Move funds to contract jackpot\"},\"houseKeeping()\":{\"details\":\"Update accounting\"},\"invest(address)\":{\"details\":\"Buy tokens with affiliate partner\",\"params\":{\"_partner\":\"Affiliate partner\"}},\"investDirect()\":{\"details\":\"Buy tokens\"},\"payDividends()\":{\"details\":\"Pay unpaid dividends\"},\"payWallet()\":{\"details\":\"Pay balance from wallet\"},\"play()\":{\"details\":\"Play in lottery\"},\"playRandom(address)\":{\"details\":\"Play in lottery with random numbers\",\"params\":{\"_partner\":\"Affiliate partner\"}},\"playSystem(uint256,address)\":{\"details\":\"Play in lottery with own numbers\",\"params\":{\"_partner\":\"Affiliate partner\"}},\"putHash()\":{\"details\":\"Fill hash data\"},\"putHashes(uint256)\":{\"details\":\"Fill hash data many times\",\"params\":{\"_num\":\"Number of iterations\"}},\"resetBet()\":{\"details\":\"Reset bet size accounting, to increase bet volume above safe limits\"},\"setBetMax(uint256)\":{\"details\":\"Set maximum bet size per block\",\"params\":{\"_maxsum\":\"The maximum bet size in wei.\"}},\"setInvestStart(uint256)\":{\"details\":\"Set ICO Start block.\",\"params\":{\"_when\":\"The block number of the ICO.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint the amout of tokens to be transfered\"}},\"walletBalanceOf(address)\":{\"details\":\"Show balance of wallet\",\"params\":{\"_owner\":\"The address of the account.\"}},\"walletBlockOf(address)\":{\"details\":\"Show block number when withdraw can continue\",\"params\":{\"_owner\":\"The address of the account.\"}},\"walletPeriodOf(address)\":{\"details\":\"Show last dividend period processed\",\"params\":{\"_owner\":\"The address of the account.\"}},\"won()\":{\"details\":\"Check if won in lottery\"}},\"title\":\"SmartBillions contract\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"SmartBillions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\n * Upgraded from Solidity 0.4 to 0.5, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 524,561,701,703,705,707,709,711,713,715,717,719\\n */\\n\\npragma solidity ^0.5.0;\\n\\nlibrary SafeMath {\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n  function add(uint a, uint b) internal pure returns (uint) {\\n    uint c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n}\\n\\ncontract ERC20Basic {\\n  uint public totalSupply;\\n  address public owner; //owner\\n  address public animator; //animator\\n  function balanceOf(address who) public view returns (uint);\\n  function transfer(address to, uint value) public;\\n  event Transfer(address indexed from, address indexed to, uint value);\\n  function commitDividend(address who) internal; // pays remaining dividend\\n}\\n\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view returns (uint);\\n  function transferFrom(address from, address to, uint value) public;\\n  function approve(address spender, uint value) public;\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint;\\n  mapping(address => uint) balances;\\n\\n  modifier onlyPayloadSize(uint size) {\\n     assert(msg.data.length >= size + 4);\\n     _;\\n  }\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n    commitDividend(msg.sender);\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    if(_to == address(this)) {\\n        commitDividend(owner);\\n        balances[owner] = balances[owner].add(_value);\\n        emit Transfer(msg.sender, owner, _value);\\n    }\\n    else {\\n        commitDividend(_to);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n    }\\n  }\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\ncontract StandardToken is BasicToken, ERC20 {\\n  mapping (address => mapping (address => uint)) allowed;\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint the amout of tokens to be transfered\\n   */\\n  function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n    uint _allowance = allowed[_from][msg.sender];\\n    commitDividend(_from);\\n    commitDividend(_to);\\n    balances[_to] = balances[_to].add(_value);\\n    balances[_from] = balances[_from].sub(_value);\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\n    emit Transfer(_from, _to, _value);\\n  }\\n  /**\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint _value) public {\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n  }\\n  /**\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view returns (uint remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title SmartBillions contract\\n */\\ncontract SmartBillions is StandardToken {\\n\\n    // metadata\\n    string public constant name = \\\"SmartBillions Token\\\";\\n    string public constant symbol = \\\"PLAY\\\";\\n    uint public constant decimals = 0;\\n\\n    // contract state\\n    struct Wallet {\\n        uint208 balance; // current balance of user\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\n    }\\n    mapping (address => Wallet) wallets;\\n    struct Bet {\\n        uint192 value; // bet size\\n        uint32 betHash; // selected numbers\\n        uint32 blockNum; // blocknumber when lottery runs\\n    }\\n    mapping (address => Bet) bets;\\n\\n    uint public walletBalance = 0; // sum of funds in wallets\\n\\n    // investment parameters\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\n    uint public investBalance = 0; // funding from investors\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\n    uint public dividendPeriod = 1;\\n    uint[] public dividends; // dividens collected per period, growing array\\n\\n    // betting parameters\\n    uint public maxWin = 0; // maximum prize won\\n    uint public hashFirst = 0; // start time of building hashes database\\n    uint public hashLast = 0; // last saved block of hashes\\n    uint public hashNext = 0; // next available bet block.number\\n    uint public hashBetSum = 0; // used bet volume of next block\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\n    uint[] public hashes; // space for storing lottery results\\n\\n    // constants\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\n\\n    // events\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\n    event LogRecordWin(address indexed player, uint amount);\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\n    event LogDividend(address indexed investor, uint amount, uint period);\\n\\n    modifier onlyOwner() {\\n        assert(msg.sender == owner);\\n        _;\\n    }\\n\\n    modifier onlyAnimator() {\\n        assert(msg.sender == animator);\\n        _;\\n    }\\n\\n    // constructor\\n    constructor() public {\\n        owner = msg.sender;\\n        animator = msg.sender;\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\n        dividends.push(0); // not used\\n        dividends.push(0); // current dividend\\n    }\\n\\n/* getters */\\n\\n    /**\\n     * @dev Show length of allocated swap space\\n     */\\n    function hashesLength() external view returns (uint) {\\n        return uint(hashes.length);\\n    }\\n\\n    /**\\n     * @dev Show balance of wallet\\n     * @param _owner The address of the account.\\n     */\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].balance);\\n    }\\n\\n    /**\\n     * @dev Show last dividend period processed\\n     * @param _owner The address of the account.\\n     */\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].lastDividendPeriod);\\n    }\\n\\n    /**\\n     * @dev Show block number when withdraw can continue\\n     * @param _owner The address of the account.\\n     */\\n    function walletBlockOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].nextWithdrawBlock);\\n    }\\n\\n    /**\\n     * @dev Show bet size.\\n     * @param _owner The address of the player.\\n     */\\n    function betValueOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].value);\\n    }\\n\\n    /**\\n     * @dev Show block number of lottery run for the bet.\\n     * @param _owner The address of the player.\\n     */\\n    function betHashOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].betHash);\\n    }\\n\\n    /**\\n     * @dev Show block number of lottery run for the bet.\\n     * @param _owner The address of the player.\\n     */\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].blockNum);\\n    }\\n\\n    /**\\n     * @dev Print number of block till next expected dividend payment\\n     */\\n    function dividendsBlocks() external view returns (uint) {\\n        if(investStart > 0) {\\n            return(0);\\n        }\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\n        if(period > dividendPeriod) {\\n            return(0);\\n        }\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\n    }\\n\\n/* administrative functions */\\n\\n    /**\\n     * @dev Change owner.\\n     * @param _who The address of new owner.\\n     */\\n    function changeOwner(address _who) external onlyOwner {\\n        assert(_who != address(0));\\n        commitDividend(msg.sender);\\n        commitDividend(_who);\\n        owner = _who;\\n    }\\n\\n    /**\\n     * @dev Change animator.\\n     * @param _who The address of new animator.\\n     */\\n    function changeAnimator(address _who) external onlyAnimator {\\n        assert(_who != address(0));\\n        commitDividend(msg.sender);\\n        commitDividend(_who);\\n        animator = _who;\\n    }\\n\\n    /**\\n     * @dev Set ICO Start block.\\n     * @param _when The block number of the ICO.\\n     */\\n    function setInvestStart(uint _when) external onlyOwner {\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\n        investStart = _when;\\n    }\\n\\n    /**\\n     * @dev Set maximum bet size per block\\n     * @param _maxsum The maximum bet size in wei.\\n     */\\n    function setBetMax(uint _maxsum) external onlyOwner {\\n        hashBetMax = _maxsum;\\n    }\\n\\n    /**\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\n     */\\n    function resetBet() external onlyOwner {\\n        hashNext = block.number + 3;\\n        hashBetSum = 0;\\n    }\\n\\n    /**\\n     * @dev Move funds to cold storage\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\n     * @param _amount The amount of wei to move to cold storage\\n     */\\n    function coldStore(uint _amount) external onlyOwner {\\n        houseKeeping();\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\n        }\\n        msg.sender.transfer(_amount);\\n        coldStoreLast = block.number;\\n    }\\n\\n    /**\\n     * @dev Move funds to contract jackpot\\n     */\\n    function hotStore() payable external {\\n        houseKeeping();\\n    }\\n\\n/* housekeeping functions */\\n\\n    /**\\n     * @dev Update accounting\\n     */\\n    function houseKeeping() public {\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\n            investStart = 0; // start dividend payments\\n        }\\n        else {\\n            if(hashFirst > 0){\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\n                if(period > dividends.length - 2) {\\n                    dividends.push(0);\\n                }\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\n                    dividendPeriod++;\\n                }\\n            }\\n        }\\n    }\\n\\n/* payments */\\n\\n    /**\\n     * @dev Pay balance from wallet\\n     */\\n    function payWallet() public {\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\n            uint balance = wallets[msg.sender].balance;\\n            wallets[msg.sender].balance = 0;\\n            walletBalance -= balance;\\n            pay(balance);\\n        }\\n    }\\n\\n    function pay(uint _amount) private {\\n        uint maxpay = address(this).balance / 2;\\n        if(maxpay >= _amount) {\\n            msg.sender.transfer(_amount);\\n            if(_amount > 1 finney) {\\n                houseKeeping();\\n            }\\n        }\\n        else {\\n            uint keepbalance = _amount - maxpay;\\n            walletBalance += keepbalance;\\n            wallets[msg.sender].balance += uint208(keepbalance);\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\n            msg.sender.transfer(maxpay);\\n        }\\n    }\\n\\n/* investment functions */\\n\\n    /**\\n     * @dev Buy tokens\\n     */\\n    function investDirect() payable external {\\n        invest(owner);\\n    }\\n\\n    /**\\n     * @dev Buy tokens with affiliate partner\\n     * @param _partner Affiliate partner\\n     */\\n    function invest(address _partner) public payable {\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\n        uint investing = msg.value;\\n        if(investing > investBalanceMax - investBalance) {\\n            investing = investBalanceMax - investBalance;\\n            investBalance = investBalanceMax;\\n            investStart = 0; // close investment round\\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\\n        }\\n        else{\\n            investBalance += investing;\\n        }\\n        if(_partner == address(0) || _partner == owner){\\n            walletBalance += investing / 10;\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\n        else{\\n            walletBalance += (investing * 5 / 100) * 2;\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\n        uint senderBalance = investing / 10**15;\\n        uint ownerBalance = investing * 16 / 10**17  ;\\n        uint animatorBalance = investing * 10 / 10**17  ;\\n        balances[msg.sender] += senderBalance;\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\n        emit LogInvestment(msg.sender,_partner,investing);\\n    }\\n\\n    /**\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\n     */\\n    function disinvest() external {\\n        require(investStart == 0);\\n        commitDividend(msg.sender);\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\n        investBalance -= initialInvestment;\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\n        payWallet();\\n    }\\n\\n    /**\\n     * @dev Pay unpaid dividends\\n     */\\n    function payDividends() external {\\n        require(investStart == 0);\\n        commitDividend(msg.sender);\\n        payWallet();\\n    }\\n\\n    /**\\n     * @dev Commit remaining dividends before transfer of tokens\\n     */\\n    function commitDividend(address _who) internal {\\n        uint last = wallets[_who].lastDividendPeriod;\\n        if((balances[_who]==0) || (last==0)){\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\n            return;\\n        }\\n        if(last==dividendPeriod) {\\n            return;\\n        }\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\n        uint balance = 0;\\n        for(;last<dividendPeriod;last++) {\\n            balance += share * dividends[last];\\n        }\\n        balance = (balance / 0xffffffff);\\n        walletBalance += balance;\\n        wallets[_who].balance += uint208(balance);\\n        wallets[_who].lastDividendPeriod = uint16(last);\\n        emit LogDividend(_who,balance,last);\\n    }\\n\\n/* lottery functions */\\n\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\n        uint24 bethash = uint24(_player.betHash);\\n        uint24 hit = bethash ^ _hash;\\n        uint24 matches =\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\n        if(matches == 6){\\n            return(uint(_player.value) * 7000000);\\n        }\\n        if(matches == 5){\\n            return(uint(_player.value) * 20000);\\n        }\\n        if(matches == 4){\\n            return(uint(_player.value) * 500);\\n        }\\n        if(matches == 3){\\n            return(uint(_player.value) * 25);\\n        }\\n        if(matches == 2){\\n            return(uint(_player.value) * 3);\\n        }\\n        return(0);\\n    }\\n\\n    /**\\n     * @dev Check if won in lottery\\n     */\\n    function betOf(address _who) external view returns (uint)  {\\n        Bet memory player = bets[_who];\\n        if( (player.value==0) ||\\n            (player.blockNum<=1) ||\\n            (block.number<player.blockNum) ||\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\n            return(0);\\n        }\\n        if(block.number<player.blockNum+256){\\n            // <yes> <report> BAD_RANDOMNESS\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\n        }\\n        if(hashFirst>0){\\n            uint32 hash = getHash(player.blockNum);\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\n                return(uint(player.value));\\n            }\\n            else{\\n                return(betPrize(player,uint24(hash)));\\n            }\\n\\t}\\n        return(0);\\n    }\\n\\n    /**\\n     * @dev Check if won in lottery\\n     */\\n    function won() public {\\n        Bet memory player = bets[msg.sender];\\n        if(player.blockNum==0){ // create a new player\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n            return;\\n        }\\n        if((player.value==0) || (player.blockNum==1)){\\n            payWallet();\\n            return;\\n        }\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n            return;\\n        }\\n        uint prize = 0;\\n        uint32 hash = 0;\\n        if(block.number<player.blockNum+256){\\n            // <yes> <report> BAD_RANDOMNESS\\n            hash = uint24(uint(blockhash(player.blockNum)));\\n            prize = betPrize(player,uint24(hash));\\n        }\\n        else {\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\n                hash = getHash(player.blockNum);\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\n                    prize = uint(player.value);\\n                }\\n                else{\\n                    prize = betPrize(player,uint24(hash));\\n                }\\n\\t    }\\n            else{\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n                return();\\n            }\\n        }\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n        if(prize>0) {\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\n            if(prize > maxWin){\\n                maxWin = prize;\\n                emit LogRecordWin(msg.sender,prize);\\n            }\\n            pay(prize);\\n        }\\n        else{\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\n        }\\n    }\\n\\n    /**\\n     * @dev Send ether to buy tokens during ICO\\n     * @dev or send less than 1 ether to contract to play\\n     * @dev or send 0 to collect prize\\n     */\\n    function () external payable {\\n        if(msg.value > 0){\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\n                invest(owner);\\n            }\\n            else{ // if not ICO running payment to contract is treated as play\\n                play();\\n            }\\n            return;\\n        }\\n        //check for dividends and other assets\\n        if(investStart == 0 && balances[msg.sender]>0){\\n            commitDividend(msg.sender);}\\n        won(); // will run payWallet() if nothing else available\\n    }\\n\\n    /**\\n     * @dev Play in lottery\\n     */\\n    function play() payable public returns (uint) {\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\n    }\\n\\n    /**\\n     * @dev Play in lottery with random numbers\\n     * @param _partner Affiliate partner\\n     */\\n    function playRandom(address _partner) payable public returns (uint) {\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\n    }\\n\\n    /**\\n     * @dev Play in lottery with own numbers\\n     * @param _partner Affiliate partner\\n     */\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\n        won(); // check if player did not win\\n        uint24 bethash = uint24(_hash);\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\n        if(msg.value > 0){\\n            if(investStart==0) { // dividends only after investment finished\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\n            }\\n            if(_partner != address(0)) {\\n                uint fee = msg.value / 100;\\n                walletBalance += fee;\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\n            }\\n            if(hashNext < block.number + 3) {\\n                hashNext = block.number + 3;\\n                hashBetSum = msg.value;\\n            }\\n            else{\\n                if(hashBetSum > hashBetMax) {\\n                    hashNext++;\\n                    hashBetSum = msg.value;\\n                }\\n                else{\\n                    hashBetSum += msg.value;\\n                }\\n            }\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\n        }\\n        putHash(); // players help collecing data\\n        return(hashNext);\\n    }\\n\\n/* database functions */\\n\\n    /**\\n     * @dev Create hash data swap space\\n     * @param _sadd Number of hashes to add (<=256)\\n     */\\n    function addHashes(uint _sadd) public returns (uint) {\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\n        uint n = hashes.length;\\n        if(n + _sadd > hashesSize){\\n            hashes.length = hashesSize;\\n        }\\n        else{\\n            hashes.length += _sadd;\\n        }\\n        for(;n<hashes.length;n++){ // make sure to burn gas\\n            hashes[n] = 1;\\n        }\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\n            hashFirst = block.number - ( block.number % 10);\\n            hashLast = hashFirst;\\n        }\\n        return(hashes.length);\\n    }\\n\\n    /**\\n     * @dev Create hash data swap space, add 128 hashes\\n     */\\n    function addHashes128() external returns (uint) {\\n        return(addHashes(128));\\n    }\\n\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\n        // <yes> <report> BAD_RANDOMNESS\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\n        // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\n            | ( ( uint(_delta) / hashesSize) << 240));\\n    }\\n\\n    function getHash(uint _block) private view returns (uint32) {\\n        uint delta = (_block - hashFirst) / 10;\\n        uint hash = hashes[delta % hashesSize];\\n        if(delta / hashesSize != hash >> 240) {\\n            return(0x1000000); // load failed, incorrect data in hashes\\n        }\\n        uint slotp = (_block - hashFirst) % 10;\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\n    }\\n\\n    /**\\n     * @dev Fill hash data\\n     */\\n    function putHash() public returns (bool) {\\n        uint lastb = hashLast;\\n        if(lastb == 0 || block.number <= lastb + 10) {\\n            return(false);\\n        }\\n        uint blockn256;\\n        if(block.number<256) { // useless test for testnet :-(\\n            blockn256 = 0;\\n        }\\n        else{\\n            blockn256 = block.number - 256;\\n        }\\n        if(lastb < blockn256) {\\n            uint num = blockn256;\\n            num += num % 10;\\n            lastb = num;\\n        }\\n        uint delta = (lastb - hashFirst) / 10;\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\n        hashLast = lastb + 10;\\n        return(true);\\n    }\\n\\n    /**\\n     * @dev Fill hash data many times\\n     * @param _num Number of iterations\\n     */\\n    function putHashes(uint _num) external {\\n        uint n=0;\\n        for(;n<_num;n++){\\n            if(!putHash()){\\n                return;\\n            }\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x587e66eb81eda2e15c6f15fd49e3c1398a4e904aeaa838671b86414337156fa6\"}},\"version\":1}"},"StandardToken":{"evm":{"deployedBytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"animator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens than an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint specifing the amount of tokens still avaible for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"return\":\"An uint representing the amount owned by the passed address.\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint the amout of tokens to be transfered\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"SmartBillions.sol\":\"StandardToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"SmartBillions.sol\":{\"content\":\"/*\\n * @source: https://etherscan.io/address/0x5ace17f87c7391e5792a7683069a8025b83bbd85#code\\n * Upgraded from Solidity 0.4 to 0.5, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 524,561,701,703,705,707,709,711,713,715,717,719\\n */\\n\\npragma solidity ^0.5.0;\\n\\nlibrary SafeMath {\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n  function add(uint a, uint b) internal pure returns (uint) {\\n    uint c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n}\\n\\ncontract ERC20Basic {\\n  uint public totalSupply;\\n  address public owner; //owner\\n  address public animator; //animator\\n  function balanceOf(address who) public view returns (uint);\\n  function transfer(address to, uint value) public;\\n  event Transfer(address indexed from, address indexed to, uint value);\\n  function commitDividend(address who) internal; // pays remaining dividend\\n}\\n\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public view returns (uint);\\n  function transferFrom(address from, address to, uint value) public;\\n  function approve(address spender, uint value) public;\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\ncontract BasicToken is ERC20Basic {\\n  using SafeMath for uint;\\n  mapping(address => uint) balances;\\n\\n  modifier onlyPayloadSize(uint size) {\\n     assert(msg.data.length >= size + 4);\\n     _;\\n  }\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n    commitDividend(msg.sender);\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    if(_to == address(this)) {\\n        commitDividend(owner);\\n        balances[owner] = balances[owner].add(_value);\\n        emit Transfer(msg.sender, owner, _value);\\n    }\\n    else {\\n        commitDividend(_to);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n    }\\n  }\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public view returns (uint balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\ncontract StandardToken is BasicToken, ERC20 {\\n  mapping (address => mapping (address => uint)) allowed;\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint the amout of tokens to be transfered\\n   */\\n  function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n    uint _allowance = allowed[_from][msg.sender];\\n    commitDividend(_from);\\n    commitDividend(_to);\\n    balances[_to] = balances[_to].add(_value);\\n    balances[_from] = balances[_from].sub(_value);\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\n    emit Transfer(_from, _to, _value);\\n  }\\n  /**\\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint _value) public {\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n    allowed[msg.sender][_spender] = _value;\\n    emit Approval(msg.sender, _spender, _value);\\n  }\\n  /**\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public view returns (uint remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n}\\n\\n/**\\n * @title SmartBillions contract\\n */\\ncontract SmartBillions is StandardToken {\\n\\n    // metadata\\n    string public constant name = \\\"SmartBillions Token\\\";\\n    string public constant symbol = \\\"PLAY\\\";\\n    uint public constant decimals = 0;\\n\\n    // contract state\\n    struct Wallet {\\n        uint208 balance; // current balance of user\\n    \\tuint16 lastDividendPeriod; // last processed dividend period of user's tokens\\n    \\tuint32 nextWithdrawBlock; // next withdrawal possible after this block number\\n    }\\n    mapping (address => Wallet) wallets;\\n    struct Bet {\\n        uint192 value; // bet size\\n        uint32 betHash; // selected numbers\\n        uint32 blockNum; // blocknumber when lottery runs\\n    }\\n    mapping (address => Bet) bets;\\n\\n    uint public walletBalance = 0; // sum of funds in wallets\\n\\n    // investment parameters\\n    uint public investStart = 1; // investment start block, 0: closed, 1: preparation\\n    uint public investBalance = 0; // funding from investors\\n    uint public investBalanceMax = 200000 ether; // maximum funding\\n    uint public dividendPeriod = 1;\\n    uint[] public dividends; // dividens collected per period, growing array\\n\\n    // betting parameters\\n    uint public maxWin = 0; // maximum prize won\\n    uint public hashFirst = 0; // start time of building hashes database\\n    uint public hashLast = 0; // last saved block of hashes\\n    uint public hashNext = 0; // next available bet block.number\\n    uint public hashBetSum = 0; // used bet volume of next block\\n    uint public hashBetMax = 5 ether; // maximum bet size per block\\n    uint[] public hashes; // space for storing lottery results\\n\\n    // constants\\n    //uint public constant hashesSize = 1024 ; // DEBUG ONLY !!!\\n    uint public constant hashesSize = 16384 ; // 30 days of blocks\\n    uint public coldStoreLast = 0 ; // block of last cold store transfer\\n\\n    // events\\n    event LogBet(address indexed player, uint bethash, uint blocknumber, uint betsize);\\n    event LogLoss(address indexed player, uint bethash, uint hash);\\n    event LogWin(address indexed player, uint bethash, uint hash, uint prize);\\n    event LogInvestment(address indexed investor, address indexed partner, uint amount);\\n    event LogRecordWin(address indexed player, uint amount);\\n    event LogLate(address indexed player,uint playerBlockNumber,uint currentBlockNumber);\\n    event LogDividend(address indexed investor, uint amount, uint period);\\n\\n    modifier onlyOwner() {\\n        assert(msg.sender == owner);\\n        _;\\n    }\\n\\n    modifier onlyAnimator() {\\n        assert(msg.sender == animator);\\n        _;\\n    }\\n\\n    // constructor\\n    constructor() public {\\n        owner = msg.sender;\\n        animator = msg.sender;\\n        wallets[owner].lastDividendPeriod = uint16(dividendPeriod);\\n        dividends.push(0); // not used\\n        dividends.push(0); // current dividend\\n    }\\n\\n/* getters */\\n\\n    /**\\n     * @dev Show length of allocated swap space\\n     */\\n    function hashesLength() external view returns (uint) {\\n        return uint(hashes.length);\\n    }\\n\\n    /**\\n     * @dev Show balance of wallet\\n     * @param _owner The address of the account.\\n     */\\n    function walletBalanceOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].balance);\\n    }\\n\\n    /**\\n     * @dev Show last dividend period processed\\n     * @param _owner The address of the account.\\n     */\\n    function walletPeriodOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].lastDividendPeriod);\\n    }\\n\\n    /**\\n     * @dev Show block number when withdraw can continue\\n     * @param _owner The address of the account.\\n     */\\n    function walletBlockOf(address _owner) external view returns (uint) {\\n        return uint(wallets[_owner].nextWithdrawBlock);\\n    }\\n\\n    /**\\n     * @dev Show bet size.\\n     * @param _owner The address of the player.\\n     */\\n    function betValueOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].value);\\n    }\\n\\n    /**\\n     * @dev Show block number of lottery run for the bet.\\n     * @param _owner The address of the player.\\n     */\\n    function betHashOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].betHash);\\n    }\\n\\n    /**\\n     * @dev Show block number of lottery run for the bet.\\n     * @param _owner The address of the player.\\n     */\\n    function betBlockNumberOf(address _owner) external view returns (uint) {\\n        return uint(bets[_owner].blockNum);\\n    }\\n\\n    /**\\n     * @dev Print number of block till next expected dividend payment\\n     */\\n    function dividendsBlocks() external view returns (uint) {\\n        if(investStart > 0) {\\n            return(0);\\n        }\\n        uint period = (block.number - hashFirst) / (10 * hashesSize);\\n        if(period > dividendPeriod) {\\n            return(0);\\n        }\\n        return((10 * hashesSize) - ((block.number - hashFirst) % (10 * hashesSize)));\\n    }\\n\\n/* administrative functions */\\n\\n    /**\\n     * @dev Change owner.\\n     * @param _who The address of new owner.\\n     */\\n    function changeOwner(address _who) external onlyOwner {\\n        assert(_who != address(0));\\n        commitDividend(msg.sender);\\n        commitDividend(_who);\\n        owner = _who;\\n    }\\n\\n    /**\\n     * @dev Change animator.\\n     * @param _who The address of new animator.\\n     */\\n    function changeAnimator(address _who) external onlyAnimator {\\n        assert(_who != address(0));\\n        commitDividend(msg.sender);\\n        commitDividend(_who);\\n        animator = _who;\\n    }\\n\\n    /**\\n     * @dev Set ICO Start block.\\n     * @param _when The block number of the ICO.\\n     */\\n    function setInvestStart(uint _when) external onlyOwner {\\n        require(investStart == 1 && hashFirst > 0 && block.number < _when);\\n        investStart = _when;\\n    }\\n\\n    /**\\n     * @dev Set maximum bet size per block\\n     * @param _maxsum The maximum bet size in wei.\\n     */\\n    function setBetMax(uint _maxsum) external onlyOwner {\\n        hashBetMax = _maxsum;\\n    }\\n\\n    /**\\n     * @dev Reset bet size accounting, to increase bet volume above safe limits\\n     */\\n    function resetBet() external onlyOwner {\\n        hashNext = block.number + 3;\\n        hashBetSum = 0;\\n    }\\n\\n    /**\\n     * @dev Move funds to cold storage\\n     * @dev investBalance and walletBalance is protected from withdraw by owner\\n     * @dev if funding is > 50% admin can withdraw only 0.25% of balance weakly\\n     * @param _amount The amount of wei to move to cold storage\\n     */\\n    function coldStore(uint _amount) external onlyOwner {\\n        houseKeeping();\\n        require(_amount > 0 && address(this).balance >= (investBalance * 9 / 10) + walletBalance + _amount);\\n        if(investBalance >= investBalanceMax / 2){ // additional jackpot protection\\n            require((_amount <= address(this).balance / 400) && coldStoreLast + 4 * 60 * 24 * 7 <= block.number);\\n        }\\n        msg.sender.transfer(_amount);\\n        coldStoreLast = block.number;\\n    }\\n\\n    /**\\n     * @dev Move funds to contract jackpot\\n     */\\n    function hotStore() payable external {\\n        houseKeeping();\\n    }\\n\\n/* housekeeping functions */\\n\\n    /**\\n     * @dev Update accounting\\n     */\\n    function houseKeeping() public {\\n        if(investStart > 1 && block.number >= investStart + (hashesSize * 5)){ // ca. 14 days\\n            investStart = 0; // start dividend payments\\n        }\\n        else {\\n            if(hashFirst > 0){\\n\\t\\t        uint period = (block.number - hashFirst) / (10 * hashesSize );\\n                if(period > dividends.length - 2) {\\n                    dividends.push(0);\\n                }\\n                if(period > dividendPeriod && investStart == 0 && dividendPeriod < dividends.length - 1) {\\n                    dividendPeriod++;\\n                }\\n            }\\n        }\\n    }\\n\\n/* payments */\\n\\n    /**\\n     * @dev Pay balance from wallet\\n     */\\n    function payWallet() public {\\n        if(wallets[msg.sender].balance > 0 && wallets[msg.sender].nextWithdrawBlock <= block.number){\\n            uint balance = wallets[msg.sender].balance;\\n            wallets[msg.sender].balance = 0;\\n            walletBalance -= balance;\\n            pay(balance);\\n        }\\n    }\\n\\n    function pay(uint _amount) private {\\n        uint maxpay = address(this).balance / 2;\\n        if(maxpay >= _amount) {\\n            msg.sender.transfer(_amount);\\n            if(_amount > 1 finney) {\\n                houseKeeping();\\n            }\\n        }\\n        else {\\n            uint keepbalance = _amount - maxpay;\\n            walletBalance += keepbalance;\\n            wallets[msg.sender].balance += uint208(keepbalance);\\n            wallets[msg.sender].nextWithdrawBlock = uint32(block.number + 4 * 60 * 24 * 30); // wait 1 month for more funds\\n            msg.sender.transfer(maxpay);\\n        }\\n    }\\n\\n/* investment functions */\\n\\n    /**\\n     * @dev Buy tokens\\n     */\\n    function investDirect() payable external {\\n        invest(owner);\\n    }\\n\\n    /**\\n     * @dev Buy tokens with affiliate partner\\n     * @param _partner Affiliate partner\\n     */\\n    function invest(address _partner) public payable {\\n        //require(fromUSA()==false); // fromUSA() not yet implemented :-(\\n        require(investStart > 1 && block.number < investStart + (hashesSize * 5) && investBalance < investBalanceMax);\\n        uint investing = msg.value;\\n        if(investing > investBalanceMax - investBalance) {\\n            investing = investBalanceMax - investBalance;\\n            investBalance = investBalanceMax;\\n            investStart = 0; // close investment round\\n            msg.sender.transfer(msg.value.sub(investing)); // send back funds immediately\\n        }\\n        else{\\n            investBalance += investing;\\n        }\\n        if(_partner == address(0) || _partner == owner){\\n            walletBalance += investing / 10;\\n            wallets[owner].balance += uint208(investing / 10);} // 10% for marketing if no affiliates\\n        else{\\n            walletBalance += (investing * 5 / 100) * 2;\\n            wallets[owner].balance += uint208(investing * 5 / 100); // 5% initial marketing funds\\n            wallets[_partner].balance += uint208(investing * 5 / 100);} // 5% for affiliates\\n        wallets[msg.sender].lastDividendPeriod = uint16(dividendPeriod); // assert(dividendPeriod == 1);\\n        uint senderBalance = investing / 10**15;\\n        uint ownerBalance = investing * 16 / 10**17  ;\\n        uint animatorBalance = investing * 10 / 10**17  ;\\n        balances[msg.sender] += senderBalance;\\n        balances[owner] += ownerBalance ; // 13% of shares go to developers\\n        balances[animator] += animatorBalance ; // 8% of shares go to animator\\n        totalSupply += senderBalance + ownerBalance + animatorBalance;\\n        emit Transfer(address(0),msg.sender,senderBalance); // for etherscan\\n        emit Transfer(address(0),owner,ownerBalance); // for etherscan\\n        emit Transfer(address(0),animator,animatorBalance); // for etherscan\\n        emit LogInvestment(msg.sender,_partner,investing);\\n    }\\n\\n    /**\\n     * @dev Delete all tokens owned by sender and return unpaid dividends and 90% of initial investment\\n     */\\n    function disinvest() external {\\n        require(investStart == 0);\\n        commitDividend(msg.sender);\\n        uint initialInvestment = balances[msg.sender] * 10**15;\\n        emit Transfer(msg.sender,address(0),balances[msg.sender]); // for etherscan\\n        delete balances[msg.sender]; // totalSupply stays the same, investBalance is reduced\\n        investBalance -= initialInvestment;\\n        wallets[msg.sender].balance += uint208(initialInvestment * 9 / 10);\\n        payWallet();\\n    }\\n\\n    /**\\n     * @dev Pay unpaid dividends\\n     */\\n    function payDividends() external {\\n        require(investStart == 0);\\n        commitDividend(msg.sender);\\n        payWallet();\\n    }\\n\\n    /**\\n     * @dev Commit remaining dividends before transfer of tokens\\n     */\\n    function commitDividend(address _who) internal {\\n        uint last = wallets[_who].lastDividendPeriod;\\n        if((balances[_who]==0) || (last==0)){\\n            wallets[_who].lastDividendPeriod=uint16(dividendPeriod);\\n            return;\\n        }\\n        if(last==dividendPeriod) {\\n            return;\\n        }\\n        uint share = balances[_who] * 0xffffffff / totalSupply;\\n        uint balance = 0;\\n        for(;last<dividendPeriod;last++) {\\n            balance += share * dividends[last];\\n        }\\n        balance = (balance / 0xffffffff);\\n        walletBalance += balance;\\n        wallets[_who].balance += uint208(balance);\\n        wallets[_who].lastDividendPeriod = uint16(last);\\n        emit LogDividend(_who,balance,last);\\n    }\\n\\n/* lottery functions */\\n\\n    function betPrize(Bet memory _player, uint24 _hash) private pure returns (uint) { // house fee 13.85%\\n        uint24 bethash = uint24(_player.betHash);\\n        uint24 hit = bethash ^ _hash;\\n        uint24 matches =\\n            ((hit & 0xF) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF0) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF00) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF000) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF0000) == 0 ? 1 : 0 ) +\\n            ((hit & 0xF00000) == 0 ? 1 : 0 );\\n        if(matches == 6){\\n            return(uint(_player.value) * 7000000);\\n        }\\n        if(matches == 5){\\n            return(uint(_player.value) * 20000);\\n        }\\n        if(matches == 4){\\n            return(uint(_player.value) * 500);\\n        }\\n        if(matches == 3){\\n            return(uint(_player.value) * 25);\\n        }\\n        if(matches == 2){\\n            return(uint(_player.value) * 3);\\n        }\\n        return(0);\\n    }\\n\\n    /**\\n     * @dev Check if won in lottery\\n     */\\n    function betOf(address _who) external view returns (uint)  {\\n        Bet memory player = bets[_who];\\n        if( (player.value==0) ||\\n            (player.blockNum<=1) ||\\n            (block.number<player.blockNum) ||\\n            (block.number>=player.blockNum + (10 * hashesSize))){\\n            return(0);\\n        }\\n        if(block.number<player.blockNum+256){\\n            // <yes> <report> BAD_RANDOMNESS\\n            return(betPrize(player,uint24(uint(blockhash(player.blockNum)))));\\n        }\\n        if(hashFirst>0){\\n            uint32 hash = getHash(player.blockNum);\\n            if(hash == 0x1000000) { // load hash failed :-(, return funds\\n                return(uint(player.value));\\n            }\\n            else{\\n                return(betPrize(player,uint24(hash)));\\n            }\\n\\t}\\n        return(0);\\n    }\\n\\n    /**\\n     * @dev Check if won in lottery\\n     */\\n    function won() public {\\n        Bet memory player = bets[msg.sender];\\n        if(player.blockNum==0){ // create a new player\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n            return;\\n        }\\n        if((player.value==0) || (player.blockNum==1)){\\n            payWallet();\\n            return;\\n        }\\n        require(block.number>player.blockNum); // if there is an active bet, throw()\\n        if(player.blockNum + (10 * hashesSize) <= block.number){ // last bet too long ago, lost !\\n            emit LogLate(msg.sender,player.blockNum,block.number);\\n            bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n            return;\\n        }\\n        uint prize = 0;\\n        uint32 hash = 0;\\n        if(block.number<player.blockNum+256){\\n            // <yes> <report> BAD_RANDOMNESS\\n            hash = uint24(uint(blockhash(player.blockNum)));\\n            prize = betPrize(player,uint24(hash));\\n        }\\n        else {\\n            if(hashFirst>0){ // lottery is open even before swap space (hashes) is ready, but player must collect results within 256 blocks after run\\n                hash = getHash(player.blockNum);\\n                if(hash == 0x1000000) { // load hash failed :-(, return funds\\n                    prize = uint(player.value);\\n                }\\n                else{\\n                    prize = betPrize(player,uint24(hash));\\n                }\\n\\t    }\\n            else{\\n                emit LogLate(msg.sender,player.blockNum,block.number);\\n                bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n                return();\\n            }\\n        }\\n        bets[msg.sender] = Bet({value: 0, betHash: 0, blockNum: 1});\\n        if(prize>0) {\\n            emit LogWin(msg.sender,uint(player.betHash),uint(hash),prize);\\n            if(prize > maxWin){\\n                maxWin = prize;\\n                emit LogRecordWin(msg.sender,prize);\\n            }\\n            pay(prize);\\n        }\\n        else{\\n            emit LogLoss(msg.sender,uint(player.betHash),uint(hash));\\n        }\\n    }\\n\\n    /**\\n     * @dev Send ether to buy tokens during ICO\\n     * @dev or send less than 1 ether to contract to play\\n     * @dev or send 0 to collect prize\\n     */\\n    function () external payable {\\n        if(msg.value > 0){\\n            if(investStart>1){ // during ICO payment to the contract is treated as investment\\n                invest(owner);\\n            }\\n            else{ // if not ICO running payment to contract is treated as play\\n                play();\\n            }\\n            return;\\n        }\\n        //check for dividends and other assets\\n        if(investStart == 0 && balances[msg.sender]>0){\\n            commitDividend(msg.sender);}\\n        won(); // will run payWallet() if nothing else available\\n    }\\n\\n    /**\\n     * @dev Play in lottery\\n     */\\n    function play() payable public returns (uint) {\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), address(0));\\n    }\\n\\n    /**\\n     * @dev Play in lottery with random numbers\\n     * @param _partner Affiliate partner\\n     */\\n    function playRandom(address _partner) payable public returns (uint) {\\n        return playSystem(uint(keccak256(abi.encodePacked(msg.sender,block.number))), _partner);\\n    }\\n\\n    /**\\n     * @dev Play in lottery with own numbers\\n     * @param _partner Affiliate partner\\n     */\\n    function playSystem(uint _hash, address _partner) public payable returns (uint) {\\n        won(); // check if player did not win\\n        uint24 bethash = uint24(_hash);\\n        require(msg.value <= 1 ether && msg.value < hashBetMax);\\n        if(msg.value > 0){\\n            if(investStart==0) { // dividends only after investment finished\\n                dividends[dividendPeriod] += msg.value / 20; // 5% dividend\\n            }\\n            if(_partner != address(0)) {\\n                uint fee = msg.value / 100;\\n                walletBalance += fee;\\n                wallets[_partner].balance += uint208(fee); // 1% for affiliates\\n            }\\n            if(hashNext < block.number + 3) {\\n                hashNext = block.number + 3;\\n                hashBetSum = msg.value;\\n            }\\n            else{\\n                if(hashBetSum > hashBetMax) {\\n                    hashNext++;\\n                    hashBetSum = msg.value;\\n                }\\n                else{\\n                    hashBetSum += msg.value;\\n                }\\n            }\\n            bets[msg.sender] = Bet({value: uint192(msg.value), betHash: uint32(bethash), blockNum: uint32(hashNext)});\\n            emit LogBet(msg.sender,uint(bethash),hashNext,msg.value);\\n        }\\n        putHash(); // players help collecing data\\n        return(hashNext);\\n    }\\n\\n/* database functions */\\n\\n    /**\\n     * @dev Create hash data swap space\\n     * @param _sadd Number of hashes to add (<=256)\\n     */\\n    function addHashes(uint _sadd) public returns (uint) {\\n        require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);\\n        uint n = hashes.length;\\n        if(n + _sadd > hashesSize){\\n            hashes.length = hashesSize;\\n        }\\n        else{\\n            hashes.length += _sadd;\\n        }\\n        for(;n<hashes.length;n++){ // make sure to burn gas\\n            hashes[n] = 1;\\n        }\\n        if(hashes.length>=hashesSize) { // assume block.number > 10\\n            hashFirst = block.number - ( block.number % 10);\\n            hashLast = hashFirst;\\n        }\\n        return(hashes.length);\\n    }\\n\\n    /**\\n     * @dev Create hash data swap space, add 128 hashes\\n     */\\n    function addHashes128() external returns (uint) {\\n        return(addHashes(128));\\n    }\\n\\n    function calcHashes(uint32 _lastb, uint32 _delta) private view returns (uint) {\\n        // <yes> <report> BAD_RANDOMNESS\\n        return( ( uint(blockhash(_lastb  )) & 0xFFFFFF )\\n        // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+1)) & 0xFFFFFF ) << 24 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+2)) & 0xFFFFFF ) << 48 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+3)) & 0xFFFFFF ) << 72 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+4)) & 0xFFFFFF ) << 96 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+5)) & 0xFFFFFF ) << 120 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+6)) & 0xFFFFFF ) << 144 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+7)) & 0xFFFFFF ) << 168 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+8)) & 0xFFFFFF ) << 192 )\\n            // <yes> <report> BAD_RANDOMNESS\\n            | ( ( uint(blockhash(_lastb+9)) & 0xFFFFFF ) << 216 )\\n            | ( ( uint(_delta) / hashesSize) << 240));\\n    }\\n\\n    function getHash(uint _block) private view returns (uint32) {\\n        uint delta = (_block - hashFirst) / 10;\\n        uint hash = hashes[delta % hashesSize];\\n        if(delta / hashesSize != hash >> 240) {\\n            return(0x1000000); // load failed, incorrect data in hashes\\n        }\\n        uint slotp = (_block - hashFirst) % 10;\\n        return(uint32((hash >> (24 * slotp)) & 0xFFFFFF));\\n    }\\n\\n    /**\\n     * @dev Fill hash data\\n     */\\n    function putHash() public returns (bool) {\\n        uint lastb = hashLast;\\n        if(lastb == 0 || block.number <= lastb + 10) {\\n            return(false);\\n        }\\n        uint blockn256;\\n        if(block.number<256) { // useless test for testnet :-(\\n            blockn256 = 0;\\n        }\\n        else{\\n            blockn256 = block.number - 256;\\n        }\\n        if(lastb < blockn256) {\\n            uint num = blockn256;\\n            num += num % 10;\\n            lastb = num;\\n        }\\n        uint delta = (lastb - hashFirst) / 10;\\n        hashes[delta % hashesSize] = calcHashes(uint32(lastb),uint32(delta));\\n        hashLast = lastb + 10;\\n        return(true);\\n    }\\n\\n    /**\\n     * @dev Fill hash data many times\\n     * @param _num Number of iterations\\n     */\\n    function putHashes(uint _num) external {\\n        uint n=0;\\n        for(;n<_num;n++){\\n            if(!putHash()){\\n                return;\\n            }\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x587e66eb81eda2e15c6f15fd49e3c1398a4e904aeaa838671b86414337156fa6\"}},\"version\":1}"}}},"sources":{"SmartBillions.sol":{"id":0}}}

