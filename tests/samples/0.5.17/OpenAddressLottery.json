{"contracts":{"OpenAddressLottery.sol":{"OpenAddressLottery":{"evm":{"deployedBytecode":{"linkReferences":{},"object":"6080604052600436106100435760003560e01c806337354a68146100c157806341c0e1b51461012857806380ca7aec14610140578063d11711a21461015857610043565b5b67016345785d8a000034101580156100aa5750600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156100be576100bd61016263ffffffff16565b5b5b005b3480156100ce5760006000fd5b50610112600480360360208110156100e65760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061030d565b6040518082815260200191505060405180910390f35b3480156101355760006000fd5b5061013e610387565b005b34801561014d5760006000fd5b506101566103ff565b005b610160610162565b005b67016345785d8a00003410156101775761030b565b60001515600460005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156101da5760006000fd5b6003600050546101ef3361030d63ffffffff16565b14156102b0576001600460005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600734029050478111156102665747905080505b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156102ad573d600060003e3d6000fd5b50505b6103e86002600050544303111561030a5761030960405180608001604052804173ffffffffffffffffffffffffffffffffffffffff168152602001448152602001458152602001428152602001506104eb63ffffffff16565b5b5b565b600060088273ffffffffffffffffffffffffffffffffffffffff16600160005054604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120600060208110151561036957fe5b1a60f81b60f81c60ff1681151561037c57fe5b06905080505b919050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103e45760006000fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561045c5760006000fd5b610464610558565b3373ffffffffffffffffffffffffffffffffffffffff168160000190908181526020015050600143034060001c81602001909081815260200150504173ffffffffffffffffffffffffffffffffffffffff164402816040019090818152602001505060073a0281606001909081815260200150506104e7816104eb63ffffffff16565b505b565b8060000151816020015182604001518360600151604051602001808581526020018481526020018381526020018281526020019450505050506040516020818303038152906040528051906020012060001c60016000508190909055504360026000508190909055505b50565b604051806080016040528060008152602001600081526020016000815260200160008152602001509056fea265627a7a72315820394db9602681a296983cd518bd392e169758cb13cec56d9e1ba253c600cfed4964736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x43 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x37354A68 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x41C0E1B5 EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0x80CA7AEC EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0xD11711A2 EQ PUSH2 0x158 JUMPI PUSH2 0x43 JUMP JUMPDEST JUMPDEST PUSH8 0x16345785D8A0000 CALLVALUE LT ISZERO DUP1 ISZERO PUSH2 0xAA JUMPI POP PUSH1 0x0 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xBE JUMPI PUSH2 0xBD PUSH2 0x162 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCE JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x112 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE6 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x30D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x135 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x13E PUSH2 0x387 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14D JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x156 PUSH2 0x3FF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x160 PUSH2 0x162 JUMP JUMPDEST STOP JUMPDEST PUSH8 0x16345785D8A0000 CALLVALUE LT ISZERO PUSH2 0x177 JUMPI PUSH2 0x30B JUMP JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x4 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO ISZERO PUSH2 0x1DA JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 POP SLOAD PUSH2 0x1EF CALLER PUSH2 0x30D PUSH4 0xFFFFFFFF AND JUMP JUMPDEST EQ ISZERO PUSH2 0x2B0 JUMPI PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x7 CALLVALUE MUL SWAP1 POP SELFBALANCE DUP2 GT ISZERO PUSH2 0x266 JUMPI SELFBALANCE SWAP1 POP DUP1 POP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x2AD JUMPI RETURNDATASIZE PUSH1 0x0 PUSH1 0x0 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMPDEST PUSH2 0x3E8 PUSH1 0x2 PUSH1 0x0 POP SLOAD NUMBER SUB GT ISZERO PUSH2 0x30A JUMPI PUSH2 0x309 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 COINBASE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DIFFICULTY DUP2 MSTORE PUSH1 0x20 ADD GASLIMIT DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD POP PUSH2 0x4EB PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 POP SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 PUSH1 0x20 DUP2 LT ISZERO ISZERO PUSH2 0x369 JUMPI INVALID JUMPDEST BYTE PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND DUP2 ISZERO ISZERO PUSH2 0x37C JUMPI INVALID JUMPDEST MOD SWAP1 POP DUP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x3E4 JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFDESTRUCT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x45C JUMPI PUSH1 0x0 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x464 PUSH2 0x558 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD SWAP1 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD POP POP PUSH1 0x1 NUMBER SUB BLOCKHASH PUSH1 0x0 SHR DUP2 PUSH1 0x20 ADD SWAP1 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD POP POP COINBASE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DIFFICULTY MUL DUP2 PUSH1 0x40 ADD SWAP1 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD POP POP PUSH1 0x7 GASPRICE MUL DUP2 PUSH1 0x60 ADD SWAP1 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD POP POP PUSH2 0x4E7 DUP2 PUSH2 0x4EB PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMPDEST JUMP JUMPDEST DUP1 PUSH1 0x0 ADD MLOAD DUP2 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP NUMBER PUSH1 0x2 PUSH1 0x0 POP DUP2 SWAP1 SWAP1 SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD POP SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 CODECOPY 0x4D 0xB9 PUSH1 0x26 DUP2 LOG2 SWAP7 SWAP9 EXTCODECOPY 0xD5 XOR 0xBD CODECOPY 0x2E AND SWAP8 PC 0xCB SGT 0xCE 0xC5 PUSH14 0x9E1BA253C600CFED4964736F6C63 NUMBER STOP SDIV GT STOP ORIGIN ","sourceMap":"1092:3165:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3992:262;4134:9;4123;:20;;:41;;;;;4159:5;;;;;;;;;;;4147:17;;:10;:17;;;;4123:41;4120:127;;;4234:13;:11;:13;;:::i;:::-;4120:127;3992:262;1092:3165;2768:230;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2768:230:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2768:230:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3403:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3403:109:0;;;:::i;:::-;;3522:460;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3522:460:0;;;:::i;:::-;;1868:890;;;:::i;:::-;;;1929:9;1919;:19;1916:43;;;1952:7;;1916:43;2072:5;2050:27;;:6;;;:18;2057:10;2050:18;;;;;;;;;;;;;;;;;;;;;;;;;:27;;;2042:36;;;;;;;;2136:11;;;;2100:32;2121:10;2100:20;:32;;:::i;:::-;:47;2097:442;;;2206:4;2185:6;;;:18;2192:10;2185:18;;;;;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;2272:8;2291:1;2281:9;:11;2272:20;;2359:21;2355:3;:25;2352:107;;;2438:21;2434:25;;;;2352:107;2504:10;:19;;:24;2524:3;2504:24;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2504:24:0;2097:442;;2584:4;2573:10;;;;2560:12;:23;:28;2557:161;;;2621:97;2628:89;;;;;;;;2650:14;2643:22;;2628:89;;;;2667:16;2628:89;;;;2685:14;2628:89;;;;2701:15;2628:89;;;;;2621:6;:97;;:::i;:::-;2557:161;1868:890;:::o;2768:230::-;2832:6;2990:1;2963:4;2958:10;;2970;;;;2941:40;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2941:40:0;;;2931:51;;;;;;2983:1;2931:54;;;;;;;;;;;;2925:61;;2920:67;;:71;;;;;;;;2916:75;;;;2768:230;;;;:::o;3403:109::-;3456:5;;;;;;;;;;;3444:17;;:10;:17;;;3436:26;;;;;;;;3494:10;3481:24;;;3403:109;:::o;3522:460::-;3637:5;;;;;;;;;;;3625:17;;:10;:17;;;3617:26;;;;;;;;3709:23;;:::i;:::-;3762:10;3757:16;;3742:1;:12;;:31;;;;;;;;;3831:1;3816:12;:16;3806:27;3798:36;;3783:1;:12;;:51;;;;;;;;;3883:14;3876:22;;3859:16;:39;3844:1;:12;;:54;;;;;;;;;3937:1;3923:11;:15;3908:1;:12;;:30;;;;;;;;;3957:9;3964:1;3957:6;:9;;:::i;:::-;3522:460;;:::o;3008:385::-;3138:10;:21;;;3173:10;:21;;;3208:10;:21;;;3243:10;:21;;;3108:166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3108:166:0;;;3098:177;;;;;;3090:186;;3077:10;;:199;;;;;;;3374:12;3361:10;;:25;;;;;;;3008:385;;:::o;1092:3165::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceReseed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"luckyNumberOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"participate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"OpenAddressLottery.sol\":\"OpenAddressLottery\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenAddressLottery.sol\":{\"content\":\"/*\\n * @source: https://etherscan.io/address/0x741f1923974464efd0aa70e77800ba5d9ed18902#code\\n * Upgraded from Solidity 0.4 to 0.5, vulnerability may no longer exist\\n * @vulnerable_at_lines: 92\\n */\\n\\npragma solidity ^0.5.0;\\n/*\\n * This is a distributed lottery that chooses random addresses as lucky addresses. If these\\n * participate, they get the jackpot: 7 times the price of their bet.\\n * Of course one address can only win once. The owner regularly reseeds the secret\\n * seed of the contract (based on which the lucky addresses are chosen), so if you did not win,\\n * just wait for a reseed and try again!\\n *\\n * Jackpot chance:   1 in 8\\n * Ticket price: Anything larger than (or equal to) 0.1 ETH\\n * Jackpot size: 7 times the ticket price\\n *\\n * HOW TO PARTICIPATE: Just send any amount greater than (or equal to) 0.1 ETH to the contract's address\\n * Keep in mind that your address can only win once\\n *\\n * If the contract doesn't have enough ETH to pay the jackpot, it sends the whole balance.\\n\\n https://www.reddit.com/r/ethdev/comments/7wp363/how_does_this_honeypot_work_it_seems_like_a/\\n*/\\n\\ncontract OpenAddressLottery{\\n    struct SeedComponents{\\n        uint component1;\\n        uint component2;\\n        uint component3;\\n        uint component4;\\n    }\\n    \\n    address owner; //address of the owner\\n    uint private secretSeed; //seed used to calculate number of an address\\n    uint private lastReseed; //last reseed - used to automatically reseed the contract every 1000 blocks\\n    uint LuckyNumber = 7; //if the number of an address equals 7, it wins\\n        \\n    mapping (address => bool) winner; //keeping track of addresses that have already won\\n    \\n    constructor() public {\\n        owner = msg.sender;\\n        reseed(SeedComponents((uint)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp)); //generate a quality random seed\\n    }\\n    \\n    function participate() public payable {\\n        if(msg.value<0.1 ether)\\n            return; //verify ticket price\\n        \\n        // make sure he hasn't won already\\n        require(winner[msg.sender] == false);\\n        \\n        if(luckyNumberOfAddress(msg.sender) == LuckyNumber){ //check if it equals 7\\n            winner[msg.sender] = true; // every address can only win once\\n            \\n            uint win=msg.value*7; //win = 7 times the ticket price\\n            \\n            if(win>address(this).balance) //if the balance isnt sufficient...\\n                win=address(this).balance; //...send everything we've got\\n            msg.sender.transfer(win);\\n        }\\n        \\n        if(block.number-lastReseed>1000) //reseed if needed\\n            reseed(SeedComponents((uint)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp)); //generate a quality random seed\\n    }\\n    \\n    function luckyNumberOfAddress(address addr) public view returns(uint n){\\n        // calculate the number of current address - 1 in 8 chance\\n        n = uint(uint8(keccak256(abi.encodePacked(uint(addr), secretSeed))[0])) % 8;\\n    }\\n    \\n    function reseed(SeedComponents memory components) internal {\\n        secretSeed = uint256(keccak256(abi.encodePacked(\\n            components.component1,\\n            components.component2,\\n            components.component3,\\n            components.component4\\n        ))); //hash the incoming parameters and use the hash to (re)initialize the seed\\n        lastReseed = block.number;\\n    }\\n    \\n    function kill() public {\\n        require(msg.sender==owner);\\n        \\n        selfdestruct(msg.sender);\\n    }\\n    \\n    function forceReseed() public { //reseed initiated by the owner - for testing purposes\\n        require(msg.sender==owner);\\n        // <yes> <report> OTHER - uninitialized storage\\n        SeedComponents memory s;\\n        s.component1 = uint(msg.sender);\\n        s.component2 = uint256(blockhash(block.number - 1));\\n        s.component3 = block.difficulty*(uint)(block.coinbase);\\n        s.component4 = tx.gasprice * 7;\\n        \\n        reseed(s); //reseed\\n    }\\n    \\n    function () external payable { //if someone sends money without any function call, just assume he wanted to participate\\n        if(msg.value>=0.1 ether && msg.sender!=owner) //owner can't participate, he can only fund the jackpot\\n            participate();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x568da2a4c952691438f95f05022228777b5aa62ffe0647214975fe1321bf9946\"}},\"version\":1}"}}},"sources":{"OpenAddressLottery.sol":{"id":0}}}

