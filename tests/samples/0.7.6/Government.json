{"contracts":{"Government.sol":{"Government":{"evm":{"deployedBytecode":{"object":"6080604052600436106100e15760003560e01c8063719874da1161007f578063d3edcb5b11610059578063d3edcb5b14610350578063d95a2d42146103be578063f42d1d3014610419578063fc7b9c181461046a576100e2565b8063719874da1461024f57806381064e2d1461027b578063ce43b0c0146102e9576100e2565b806345941a38116100bb57806345941a381461019a5780634a1f0bf6146101c65780634f013184146102195780636831c16914610223576100e2565b806309f32957146100f7578063146ca531146101295780633beea69514610158576100e2565b5b5b6100f3600061049663ffffffff16565b505b005b3480156101045760006000fd5b5061010d610bd7565b604051808263ffffffff16815260200191505060405180910390f35b3480156101365760006000fd5b5061013f610bed565b604051808260ff16815260200191505060405180910390f35b3480156101655760006000fd5b5061016e610c00565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a75760006000fd5b506101b0610c26565b6040518082815260200191505060405180910390f35b3480156101d35760006000fd5b50610217600480360360208110156101eb5760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c2f565b005b610221610ccb565b005b3480156102305760006000fd5b50610239610ce2565b6040518082815260200191505060405180910390f35b34801561025c5760006000fd5b50610265610d46565b6040518082815260200191505060405180910390f35b3480156102885760006000fd5b50610291610d4f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102d55780820151818401525b6020810190506102b9565b505050509050019250505060405180910390f35b3480156102f65760006000fd5b506103246004803603602081101561030e5760006000fd5b8101908080359060200190929190505050610db2565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035d5760006000fd5b50610366610df8565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103aa5780820151818401525b60208101905061038e565b505050509050019250505060405180910390f35b610401600480360360208110156103d55760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610496565b60405180821515815260200191505060405180910390f35b3480156104265760006000fd5b506104546004803603602081101561043e5760006000fd5b8101908080359060200190929190505050610e8e565b6040518082815260200191505060405180910390f35b3480156104775760006000fd5b50610480610eb7565b6040518082815260200191505060405180910390f35b600060003490504261a8c06001600050540110156106fb573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505050600360005060016003600050805490500381548110151561050157fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6002600050549081150290604051600060405180830381858888f1935050505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050506000600060006101000a81548163ffffffff021916908363ffffffff16021790555042600160005081909090555060006002600050819090905550600067ffffffffffffffff811180156106145760006000fd5b506040519080825280602002602001820160405280156106435781602001602082028036833780820191505090505b506003600050908051906020019061065c929190610f22565b50600067ffffffffffffffff811180156106765760006000fd5b506040519080825280602002602001820160405280156106a55781602001602082028036833780820191505090505b50600460005090805190602001906106be929190610fac565b506001600760008282829054906101000a900460ff160192506101000a81548160ff021916908360ff1602179055506000915050610bd256610bd0565b670de0b6b3a764000081101515610b8f57426001600050819090905550600360005033908060018154018082558091505060019003906000526020600020900160005b9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060046000506064606e830281151561079457fe5b04908060018154018082558091505060019003906000526020600020900160005b90919091909150909055600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60646005840281151561080a57fe5b049081150290604051600060405180830381858888f193505050505069021e19e0c9bab240000060026000505410156108615760646005820281151561084c57fe5b04600260008282825054019250508190909055505b80600660005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050541015156108f5578273ffffffffffffffffffffffffffffffffffffffff166108fc6064600584028115156108d857fe5b049081150290604051600060405180830381858888f19350505050505b6064606e820281151561090457fe5b04600660005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082828250540192505081909090555060026000505447036004600050600060009054906101000a900463ffffffff1663ffffffff1681548110151561098a57fe5b906000526020600020900160005b5054111515610b81576003600050600060009054906101000a900463ffffffff1663ffffffff168154811015156109cb57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004600050600060009054906101000a900463ffffffff1663ffffffff16815481101515610a3b57fe5b906000526020600020900160005b50549081150290604051600060405180830381858888f19350505050506004600050600060009054906101000a900463ffffffff1663ffffffff16815481101515610a9057fe5b906000526020600020900160005b5054600660005060006003600050600060009054906101000a900463ffffffff1663ffffffff16815481101515610ad157fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282825054039250508190909055506001600060008282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff1602179055505b6001915050610bd256610bcf565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050506000915050610bd2565b5b505b919050565b600060009054906101000a900463ffffffff1681565b600760009054906101000a900460ff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016000505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610cc75780600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b34600260008282825054019250508190909055505b565b60006000600090505b600060009054906101000a900463ffffffff1663ffffffff16811015610d4157600460005081815481101515610d1d57fe5b906000526020600020900160005b50548201915081505b8080600101915050610ceb565b505b90565b60026000505481565b60606004600050805480602002602001604051908101604052809291908181526020018280548015610da357602002820191906000526020600020905b816000505481526020019060010190808311610d8c575b50505050509050610daf565b90565b60036000508181548110610dc557600080fd5b906000526020600020900160005b9150909054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606003600050805480602002602001604051908101604052809291908181526020018280548015610e7f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e35575b50505050509050610e8b565b90565b60046000508181548110610ea157600080fd5b906000526020600020900160005b915090505481565b60006000600060009054906101000a900463ffffffff1663ffffffff1690505b600460005080549050811015610f1d57600460005081815481101515610ef957fe5b906000526020600020900160005b50548201915081505b8080600101915050610ed7565b505b90565b828054828255906000526020600020908101928215610f9b579160200282015b82811115610f9a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610f42565b5b509050610fa89190610ffe565b5090565b828054828255906000526020600020908101928215610fed579160200282015b82811115610fec5782518260005090905591602001919060010190610fcc565b5b509050610ffa9190610ffe565b5090565b611003565b8082111561101d5760008181506000905550600101611003565b509056fea2646970667358221220a71fe9757d0639ad167f59131a107aff9c5e66ab1aa10c83a0cc71fb4d7dd7c364736f6c63430007060033","sourceMap":"277:4896:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3994:80;4033:33;4061:3;4033:19;:33;;:::i;:::-;;3994:80;277:4896;330:34;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;651:18;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;528:35;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;371:31;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4749:178;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4564:91;;;:::i;:::-;;4275:174;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;409:27;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5063:107;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;443:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4934:122;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;999:2962;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;492:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4081:187;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;999:2962;1075:4;1092:11;1106:9;1092:23;;1351:15;639:5;1314:19;;;;:34;:52;1310:2644;;;1422:10;:15;;:23;1438:6;1422:23;;;;;;;;;;;;;;;;;;;;;;;;1522:17;;;1567:1;1540:17;;;:24;;;;:28;1522:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:52;;:69;1575:15;;;;1522:69;;;;;;;;;;;;;;;;;;;;;;;;1606:12;;;;;;;;;;;:17;;:40;1624:21;1606:40;;;;;;;;;;;;;;;;;;;;;;;;1721:1;1698:20;;:24;;;;;;;;;;;;;;;;;;1759:15;1737:19;;:37;;;;;;;1807:1;1789:15;;:19;;;;;;;1913:1;1891:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1871:17;;:44;;;;;;;;;;;;;:::i;:::-;;2007:1;1996:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1978:15;;:31;;;;;;;;;;;;;:::i;:::-;;2033:1;2024:5;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2056:5;2049:12;;;;;1310:2644;;;2214:8;2204:6;:18;;2200:1743;;;2355:15;2333:19;;:37;;;;;;;2473:17;;;2496:10;2473:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2526:15;;;2562:3;2556;2547:6;:12;:18;;;;;;;;2526:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2698:12;;;;;;;;;;;:17;;:33;2727:3;2725:1;2716:6;:10;:14;;;;;;;;2698:33;;;;;;;;;;;;;;;;;;;;;;;;2893:14;2875:15;;;;:32;2871:114;;;2962:3;2960:1;2951:6;:10;:14;;;;;;;;2932:15;;:33;;;;;;;;;;;;;;;2871:114;3188:6;3170:7;;;:14;3178:5;3170:14;;;;;;;;;;;;;;;;;;:24;;3167:98;;;3219:5;:10;;:26;3241:3;3239:1;3230:6;:10;:14;;;;;;;;3219:26;;;;;;;;;;;;;;;;;;;;;;;;3167:98;3321:3;3315;3306:6;:12;:18;;;;;;;;3283:7;;;:19;3291:10;3283:19;;;;;;;;;;;;;;;;:41;;;;;;;;;;;;;;;3487:15;;;;3463:21;:39;3422:15;;;3438:20;;;;;;;;;;;3422:37;;;;;;;;;;;;;;;;;;;;;;;;:80;;3418:372;;;3527:17;;;3545:20;;;;;;;;;;;3527:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:44;;:83;3572:15;;;3588:20;;;;;;;;;;;3572:37;;;;;;;;;;;;;;;;;;;;;;;;3527:83;;;;;;;;;;;;;;;;;;;;;;;;3685:15;;;3701:20;;;;;;;;;;;3685:37;;;;;;;;;;;;;;;;;;;;;;;;3633:7;;;:48;3641:17;;;3659:20;;;;;;;;;;;3641:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3633:48;;;;;;;;;;;;;;;;:89;;;;;;;;;;;;;;;3769:1;3745:20;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3418:372;3815:4;3808:11;;;;;2200:1743;;;3873:10;:15;;:23;3889:6;3873:23;;;;;;;;;;;;;;;;;;;;;;;;3922:5;3915:12;;;;;2200:1743;1310:2644;999:2962;;;;;:::o;330:34::-;;;;;;;;;;;;;:::o;651:18::-;;;;;;;;;;;;;:::o;528:35::-;;;;;;;;;;;;;:::o;371:31::-;;;;;;:::o;4749:178::-;4850:12;;;;;;;;;;;4836:26;;:10;:26;;;4832:88;;;4894:14;4879:12;;:29;;;;;;;;;;;;;;;;;;4832:88;4749:178;;:::o;4564:91::-;4638:9;4619:15;;:28;;;;;;;;;;;;;;;4564:91;:::o;4275:174::-;4321:11;4349:6;4356:1;4349:8;;4345:97;4361:20;;;;;;;;;;;4359:22;;:1;:22;4345:97;;;4412:15;;;4428:1;4412:18;;;;;;;;;;;;;;;;;;;;;;4402:28;;;;;;4345:97;4383:3;;;;;;;4345:97;;;;4275:174;;:::o;409:27::-;;;;;;:::o;5063:107::-;5114:13;5147:15;;;5140:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5063:107;;:::o;443:42::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4934:122::-;4987:24;5031:17;;;5024:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4934:122;;:::o;492:29::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4081:187::-;4123:9;4149:6;4156:20;;;;;;;;;;;4149:27;;;;4145:116;4180:15;;;:22;;;;4178:1;:24;4145:116;;;4231:15;;;4247:1;4231:18;;;;;;;;;;;;;;;;;;;;;;4223:26;;;;;;4145:116;4204:3;;;;;;;4145:116;;;;4081:187;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"corruptElite\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creditorAddresses\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creditorAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreditorAddresses\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreditorAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"nextGeneration\",\"type\":\"address\"}],\"name\":\"inheritToNextGeneration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investInTheSystem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCreditorPayedOut\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeOfNewCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"buddy\",\"type\":\"address\"}],\"name\":\"lendGovernmentMoney\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFromCrash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayedOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Government.sol\":\"Government\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"Government.sol\":{\"content\":\"/*\\n * @source: https://etherscan.io/address/0xf45717552f12ef7cb65e95476f217ea008167ae3#code\\n * Upgraded from Solidity 0.4 to 0.7, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 47,49\\n */\\n\\n//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\ncontract Government {\\n\\n     // Global Variables\\n     uint32 public lastCreditorPayedOut;\\n     uint public lastTimeOfNewCredit;\\n     uint public profitFromCrash;\\n     address payable[] public creditorAddresses;\\n     uint[] public creditorAmounts;\\n     address payable public corruptElite;\\n     mapping (address => uint) buddies;\\n     uint constant TWELVE_HOURS = 43200;\\n     uint8 public round;\\n\\n     constructor() payable {\\n         // The corrupt elite establishes a new government\\n         // this is the commitment of the corrupt Elite - everything that can not be saved from a crash\\n         profitFromCrash = msg.value;\\n         corruptElite = msg.sender;\\n         lastTimeOfNewCredit = block.timestamp;\\n     }\\n\\n     function lendGovernmentMoney(address payable buddy) public payable returns (bool) {\\n         uint amount = msg.value;\\n         // check if the system already broke down. If for 12h no new creditor gives new credit to the system it will brake down.\\n         // 12h are on average = 60*60*12/12.5 = 3456\\n         if (lastTimeOfNewCredit + TWELVE_HOURS < block.timestamp) {\\n             // Return money to sender\\n             msg.sender.send(amount);\\n             // Sends all contract money to the last creditor\\n             creditorAddresses[creditorAddresses.length - 1].send(profitFromCrash);\\n             corruptElite.send(address(this).balance);\\n             // Reset contract state\\n             lastCreditorPayedOut = 0;\\n             lastTimeOfNewCredit = block.timestamp;\\n             profitFromCrash = 0;\\n            // <yes> <report> DENIAL_OF_SERVICE\\n             creditorAddresses = new address payable[](0);\\n            // <yes> <report> DENIAL_OF_SERVICE\\n             creditorAmounts = new uint[](0);\\n             round += 1;\\n             return false;\\n         }\\n         else {\\n             // the system needs to collect at least 1% of the profit from a crash to stay alive\\n             if (amount >= 10 ** 18) {\\n                 // the System has received fresh money, it will survive at leat 12h more\\n                 lastTimeOfNewCredit = block.timestamp;\\n                 // register the new creditor and his amount with 10% interest rate\\n                 creditorAddresses.push(msg.sender);\\n                 creditorAmounts.push(amount * 110 / 100);\\n                 // now the money is distributed\\n                 // first the corrupt elite grabs 5% - thieves!\\n                 corruptElite.send(amount * 5/100);\\n                 // 5% are going into the economy (they will increase the value for the person seeing the crash comming)\\n                 if (profitFromCrash < 10000 * 10**18) {\\n                     profitFromCrash += amount * 5/100;\\n                 }\\n                 // if you have a buddy in the government (and he is in the creditor list) he can get 5% of your credits.\\n                 // Make a deal with him.\\n                 if(buddies[buddy] >= amount) {\\n                     buddy.send(amount * 5/100);\\n                 }\\n                 buddies[msg.sender] += amount * 110 / 100;\\n                 // 90% of the money will be used to pay out old creditors\\n                 if (creditorAmounts[lastCreditorPayedOut] <= address(this).balance - profitFromCrash) {\\n                     creditorAddresses[lastCreditorPayedOut].send(creditorAmounts[lastCreditorPayedOut]);\\n                     buddies[creditorAddresses[lastCreditorPayedOut]] -= creditorAmounts[lastCreditorPayedOut];\\n                     lastCreditorPayedOut += 1;\\n                 }\\n                 return true;\\n             }\\n             else {\\n                 msg.sender.send(amount);\\n                 return false;\\n             }\\n         }\\n     }\\n\\n     // fallback function\\n     fallback() external payable {\\n         lendGovernmentMoney(address(0x0));\\n     }\\n\\n     function totalDebt() public view returns (uint debt) {\\n         for(uint i=lastCreditorPayedOut; i<creditorAmounts.length; i++){\\n             debt += creditorAmounts[i];\\n         }\\n     }\\n\\n     function totalPayedOut() public view returns (uint payout) {\\n         for(uint i=0; i<lastCreditorPayedOut; i++){\\n             payout += creditorAmounts[i];\\n         }\\n     }\\n\\n     // better don't do it (unless you are the corrupt elite and you want to establish trust in the system)\\n     function investInTheSystem() public payable {\\n         profitFromCrash += msg.value;\\n     }\\n\\n     // From time to time the corrupt elite inherits it's power to the next generation\\n     function inheritToNextGeneration(address payable nextGeneration) public {\\n         if (msg.sender == corruptElite) {\\n             corruptElite = nextGeneration;\\n         }\\n     }\\n\\n     function getCreditorAddresses() public view returns (address payable[] memory) {\\n         return creditorAddresses;\\n     }\\n\\n     function getCreditorAmounts() public view returns (uint[] memory) {\\n         return creditorAmounts;\\n     }\\n }\\n\",\"keccak256\":\"0x364414842833be5ace54e4eb04d5fed314c19c5741e3062ddd4feea2b01ba500\",\"license\":\"UNLICENSED\"}},\"version\":1}"}}},"errors":[{"component":"general","errorCode":"3628","formattedMessage":"Government.sol:11:1: Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.\ncontract Government {\n^ (Relevant source part starts here and spans across multiple lines).\nGovernment.sol:90:6: The payable fallback function is defined here.\n     fallback() external payable {\n     ^ (Relevant source part starts here and spans across multiple lines).\n","message":"This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.","secondarySourceLocations":[{"end":4074,"file":"Government.sol","message":"The payable fallback function is defined here.","start":3994}],"severity":"warning","sourceLocation":{"end":5173,"file":"Government.sol","start":277},"type":"Warning"},{"component":"general","errorCode":"5878","formattedMessage":"Government.sol:38:14: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.\n             msg.sender.send(amount);\n             ^---------------------^\n","message":"Failure condition of 'send' ignored. Consider using 'transfer' instead.","severity":"warning","sourceLocation":{"end":1445,"file":"Government.sol","start":1422},"type":"Warning"},{"component":"general","errorCode":"5878","formattedMessage":"Government.sol:40:14: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.\n             creditorAddresses[creditorAddresses.length - 1].send(profitFromCrash);\n             ^-------------------------------------------------------------------^\n","message":"Failure condition of 'send' ignored. Consider using 'transfer' instead.","severity":"warning","sourceLocation":{"end":1591,"file":"Government.sol","start":1522},"type":"Warning"},{"component":"general","errorCode":"5878","formattedMessage":"Government.sol:41:14: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.\n             corruptElite.send(address(this).balance);\n             ^--------------------------------------^\n","message":"Failure condition of 'send' ignored. Consider using 'transfer' instead.","severity":"warning","sourceLocation":{"end":1646,"file":"Government.sol","start":1606},"type":"Warning"},{"component":"general","errorCode":"5878","formattedMessage":"Government.sol:63:18: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.\n                 corruptElite.send(amount * 5/100);\n                 ^-------------------------------^\n","message":"Failure condition of 'send' ignored. Consider using 'transfer' instead.","severity":"warning","sourceLocation":{"end":2731,"file":"Government.sol","start":2698},"type":"Warning"},{"component":"general","errorCode":"5878","formattedMessage":"Government.sol:71:22: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.\n                     buddy.send(amount * 5/100);\n                     ^------------------------^\n","message":"Failure condition of 'send' ignored. Consider using 'transfer' instead.","severity":"warning","sourceLocation":{"end":3245,"file":"Government.sol","start":3219},"type":"Warning"},{"component":"general","errorCode":"5878","formattedMessage":"Government.sol:76:22: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.\n                     creditorAddresses[lastCreditorPayedOut].send(creditorAmounts[lastCreditorPayedOut]);\n                     ^---------------------------------------------------------------------------------^\n","message":"Failure condition of 'send' ignored. Consider using 'transfer' instead.","severity":"warning","sourceLocation":{"end":3610,"file":"Government.sol","start":3527},"type":"Warning"},{"component":"general","errorCode":"5878","formattedMessage":"Government.sol:83:18: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.\n                 msg.sender.send(amount);\n                 ^---------------------^\n","message":"Failure condition of 'send' ignored. Consider using 'transfer' instead.","severity":"warning","sourceLocation":{"end":3896,"file":"Government.sol","start":3873},"type":"Warning"}],"sources":{"Government.sol":{"id":0}}}

