{"contracts":{"EtherLotto.sol":{"EtherLotto":{"evm":{"deployedBytecode":{"object":"6080604052600436106100385760003560e01c80634ba2363a1461003e57806376cdb03b1461006a57806393e84cd9146100ac57610038565b60006000fd5b34801561004b5760006000fd5b506100546100b6565b6040518082815260200191505060405180910390f35b3480156100775760006000fd5b506100806100bf565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100b46100e5565b005b60016000505481565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a341415156100f157fe5b34600160008282825054019250508190909055506000600242604051602001808281526020019150506040516020818303038152906040528051906020012060001c81151561013c57fe5b069050600081141561021157600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60019081150290604051600060405180830381858888f193505050501580156101b2573d600060003e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff166108fc6001600160005054039081150290604051600060405180830381858888f19350505050158015610202573d600060003e3d6000fd5b50600060016000508190909055505b505b56fea264697066735822122087135c12011860c2e7c73c870d05d62d5e796a1e43d4a2415ec28a109782d19864736f6c63430007060033","sourceMap":"416:1407:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;761:15;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;662:27;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1046:774;;;:::i;:::-;;761:15;;;;;;:::o;662:27::-;;;;;;;;;;;;;:::o;1046:774::-;537:2;1171:9;:26;1164:34;;;;;;1262:9;1255:3;;:16;;;;;;;;;;;;;;;1419:11;1486:1;1465:15;1448:33;;;;;;;;;;;;;;;;;;;;;;;;;1438:44;;;;;;1433:50;;:54;;;;;;;;1419:68;;1574:1;1564:6;:11;1560:254;;;1633:4;;;;;;;;;;;:13;;:25;620:1;1633:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1712:10;:19;;:37;620:1;1732:3;;;;:16;1712:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1802:1;1796:3;;:7;;;;;;;1560:254;1046:774;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Ethereum Lottery Game.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"EtherLotto.sol\":\"EtherLotto\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"EtherLotto.sol\":{\"content\":\"/*\\n * @article: https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620\\n * @source: https://etherscan.io/address/0xa11e4ed59dc94e69612f3111942626ed513cb172#code\\n * Upgraded from Solidity 0.4 to 0.7, vulnerability may no longer exist\\n * @vulnerable_at_lines: 45\\n * @author: -\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\n/// @title Ethereum Lottery Game.\\n\\ncontract EtherLotto {\\n\\n    // Amount of ether needed for participating in the lottery.\\n    uint constant TICKET_AMOUNT = 10;\\n\\n    // Fixed amount fee for each lottery game.\\n    uint constant FEE_AMOUNT = 1;\\n\\n    // Address where fee is sent.\\n    address payable public bank;\\n\\n    // Public jackpot that each participant can win (minus fee).\\n    uint public pot;\\n\\n    // Lottery constructor sets bank account from the smart-contract owner.\\n    constructor() {\\n        bank = msg.sender;\\n    }\\n\\n    // Public function for playing lottery. Each time this function\\n    // is invoked, the sender has an oportunity for winning pot.\\n    function play() public payable {\\n\\n        // Participants must spend some fixed ether before playing lottery.\\n        assert(msg.value == TICKET_AMOUNT);\\n\\n        // Increase pot for each participant.\\n        pot += msg.value;\\n\\n        // Compute some *almost random* value for selecting winner from current transaction.\\n        // <yes> <report> TIME_MANIPULATION\\n        uint random = uint(keccak256(abi.encodePacked(block.timestamp))) % 2;\\n\\n        // Distribution: 50% of participants will be winners.\\n        if (random == 0) {\\n\\n            // Send fee to bank account.\\n            bank.transfer(FEE_AMOUNT);\\n\\n            // Send jackpot to winner.\\n            msg.sender.transfer(pot - FEE_AMOUNT);\\n\\n            // Restart jackpot.\\n            pot = 0;\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdb183c17ccb423756e0fd4d1cef785b40dd6e8ab332a6057a201f1f353941ef1\",\"license\":\"UNLICENSED\"}},\"version\":1}"}}},"sources":{"EtherLotto.sol":{"id":0}}}

