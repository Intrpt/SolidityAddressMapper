{"contracts":{"ERC20.sol":{"ERC20":{"evm":{"deployedBytecode":{"object":"60806040523480156100115760006000fd5b506004361061005c5760003560e01c8063095ea7b31461006257806323b872dd146100c757806370a082311461014c578063a9059cbb146101a5578063dd62ed3e1461020a5761005c565b60006000fd5b6100af600480360360408110156100795760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610283565b60405180821515815260200191505060405180910390f35b610134600480360360608110156100de5760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506103c2565b60405180821515815260200191505060405180910390f35b61018f600480360360208110156101635760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107c9565b6040518082815260200191505060405180910390f35b6101f2600480360360408110156101bc5760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061081d565b60405180821515815260200191505060405180910390f35b61026d600480360360408110156102215760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a6b565b6040518082815260200191505060405180910390f35b6000600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156102c25760006000fd5b81600160005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190506103bc565b92915050565b6000600060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505482111515156104195760006000fd5b600160005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505482111515156104ae5760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156104eb5760006000fd5b61054382600060005060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054610b0090919063ffffffff16565b600060005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055506105e682600060005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054610b2990919063ffffffff16565b600060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055506106c982600160005060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054610b0090919063ffffffff16565b600160005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190506107c2565b9392505050565b6000600060005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050549050610818565b919050565b6000600060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505482111515156108745760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156108b15760006000fd5b61090982600060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054610b0090919063ffffffff16565b600060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055506109ac82600060005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054610b2990919063ffffffff16565b600060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610a65565b92915050565b6000600160005060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050549050610afa565b92915050565b6000828211151515610b125760006000fd5b6000828403905080915050610b2356505b92915050565b600060008284019050838110151515610b425760006000fd5b80915050610b4c56505b9291505056fea2646970667358221220ad3b36f1e39c58295882e1faf140e587bf21d9edfb74d8fbd15681e9c8e361b464736f6c63430007060033","sourceMap":"1979:1718:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3003:256;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3263:432;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;2418:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2650:316;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;2521:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3003:256;3068:4;3107:1;3088:21;;:7;:21;;;;3080:30;;;;;;;;3185:5;3153:8;;;:20;3162:10;3153:20;;;;;;;;;;;;;;;;;:29;3174:7;3153:29;;;;;;;;;;;;;;;;:37;;;;;;;3222:7;3201:36;;3210:10;3201:36;;;3231:5;3201:36;;;;;;;;;;;;;;;;;;3250:4;3243:11;;;;3003:256;;;;;:::o;3263:432::-;3342:4;3371:9;;;:15;3381:4;3371:15;;;;;;;;;;;;;;;;;;3362:5;:24;;3354:33;;;;;;;;3410:8;;;:14;3419:4;3410:14;;;;;;;;;;;;;;;;;:26;3425:10;3410:26;;;;;;;;;;;;;;;;;;3401:5;:35;;3393:44;;;;;;;;3465:1;3451:16;;:2;:16;;;;3443:25;;;;;;;;3493:26;3513:5;3493:9;;;:15;3503:4;3493:15;;;;;;;;;;;;;;;;;;:19;;:26;;;;:::i;:::-;3475:9;;;:15;3485:4;3475:15;;;;;;;;;;;;;;;;:44;;;;;;;3541:24;3559:5;3541:9;;;:13;3551:2;3541:13;;;;;;;;;;;;;;;;;;:17;;:24;;;;:::i;:::-;3525:9;;;:13;3535:2;3525:13;;;;;;;;;;;;;;;;:40;;;;;;;3600:37;3631:5;3600:8;;;:14;3609:4;3600:14;;;;;;;;;;;;;;;;;:26;3615:10;3600:26;;;;;;;;;;;;;;;;;;:30;;:37;;;;:::i;:::-;3571:8;;;:14;3580:4;3571:14;;;;;;;;;;;;;;;;;:26;3586:10;3571:26;;;;;;;;;;;;;;;;:66;;;;;;;3663:2;3648:25;;3657:4;3648:25;;;3667:5;3648:25;;;;;;;;;;;;;;;;;;3686:4;3679:11;;;;3263:432;;;;;;:::o;2418:98::-;2473:7;2495:9;;;:16;2505:5;2495:16;;;;;;;;;;;;;;;;;;2488:23;;;;2418:98;;;;:::o;2650:316::-;2711:4;2740:9;;;:21;2750:10;2740:21;;;;;;;;;;;;;;;;;;2731:5;:30;;2723:39;;;;;;;;2790:1;2776:16;;:2;:16;;;;2768:25;;;;;;;;2824:32;2850:5;2824:9;;;:21;2834:10;2824:21;;;;;;;;;;;;;;;;;;:25;;:32;;;;:::i;:::-;2800:9;;;:21;2810:10;2800:21;;;;;;;;;;;;;;;;:56;;;;;;;2878:24;2896:5;2878:9;;;:13;2888:2;2878:13;;;;;;;;;;;;;;;;;;:17;;:24;;;;:::i;:::-;2862:9;;;:13;2872:2;2862:13;;;;;;;;;;;;;;;;:40;;;;;;;2934:2;2913:31;;2922:10;2913:31;;;2938:5;2913:31;;;;;;;;;;;;;;;;;;2957:4;2950:11;;;;2650:316;;;;;:::o;2521:125::-;2593:7;2617:8;;;:15;2626:5;2617:15;;;;;;;;;;;;;;;;;:24;2633:7;2617:24;;;;;;;;;;;;;;;;;;2610:31;;;;2521:125;;;;;:::o;1406:131::-;1464:7;1492:1;1487;:6;;1479:15;;;;;;;;1500:9;1516:1;1512;:5;1500:17;;1531:1;1524:8;;;;;1406:131;;;;;;:::o;1600:::-;1658:7;1673:9;1689:1;1685;:5;1673:17;;1709:1;1704;:6;;1696:15;;;;;;;;1725:1;1718:8;;;;;1600:131;;;;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20.sol\":{\"content\":\"/*\\n * @source: https://github.com/SmartContractSecurity/SWC-registry/blob/master/test_cases/transaction_order_dependence/ERC20.sol\\n * Upgraded from Solidity 0.4 to 0.7, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 112,115\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\n/** Taken from the OpenZeppelin github\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, reverts on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, reverts on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n  * reverts when dividing by zero.\\n  */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0);\\n    return a % b;\\n  }\\n}\\n\\n\\ncontract ERC20 {\\n\\n  event Transfer( address indexed from, address indexed to, uint256 value );\\n  event Approval( address indexed owner, address indexed spender, uint256 value);\\n  using SafeMath for *;\\n\\n  mapping (address => uint256) private _balances;\\n\\n  mapping (address => mapping (address => uint256)) private _allowed;\\n\\n  uint256 private _totalSupply;\\n\\n  constructor(uint totalSupply) {\\n    _balances[msg.sender] = totalSupply;\\n  }\\n\\n  function balanceOf(address owner) public view returns (uint256) {\\n    return _balances[owner];\\n  }\\n\\n\\n  function allowance(address owner, address spender) public view returns (uint256)\\n  {\\n    return _allowed[owner][spender];\\n  }\\n\\n  function transfer(address to, uint256 value) public returns (bool) {\\n    require(value <= _balances[msg.sender]);\\n    require(to != address(0));\\n\\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\\n    _balances[to] = _balances[to].add(value);\\n    emit Transfer(msg.sender, to, value);\\n    return true;\\n  }\\n  // <yes> <report> FRONT_RUNNING\\n  function approve(address spender, uint256 value) public returns (bool) {\\n    require(spender != address(0));\\n     // <yes> <report> FRONT_RUNNING\\n    _allowed[msg.sender][spender] = value;\\n    emit Approval(msg.sender, spender, value);\\n    return true;\\n  }\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n    require(value <= _balances[from]);\\n    require(value <= _allowed[from][msg.sender]);\\n    require(to != address(0));\\n\\n    _balances[from] = _balances[from].sub(value);\\n    _balances[to] = _balances[to].add(value);\\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n    emit Transfer(from, to, value);\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x76b8fbafff7204d29e52be9495c0273cfbba59f356bd1d178f705a9edbe49439\",\"license\":\"UNLICENSED\"}},\"version\":1}"},"SafeMath":{"evm":{"deployedBytecode":{"object":"73000000000000000000000000000000000000000030146080604052600436106023575b60006000fdfea2646970667358221220c1c6c8c88c0655e17c377bc9d136a48dfe238236e61be811760dcbc480c943c864736f6c63430007060033","sourceMap":"445:1531:0:-:0;;;;;;;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Math operations with safety checks that revert on error\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Taken from the OpenZeppelin github\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC20.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC20.sol\":{\"content\":\"/*\\n * @source: https://github.com/SmartContractSecurity/SWC-registry/blob/master/test_cases/transaction_order_dependence/ERC20.sol\\n * Upgraded from Solidity 0.4 to 0.7, vulnerability may no longer exist\\n * @author: -\\n * @vulnerable_at_lines: 112,115\\n */\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\n/** Taken from the OpenZeppelin github\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, reverts on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, reverts on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n  * reverts when dividing by zero.\\n  */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0);\\n    return a % b;\\n  }\\n}\\n\\n\\ncontract ERC20 {\\n\\n  event Transfer( address indexed from, address indexed to, uint256 value );\\n  event Approval( address indexed owner, address indexed spender, uint256 value);\\n  using SafeMath for *;\\n\\n  mapping (address => uint256) private _balances;\\n\\n  mapping (address => mapping (address => uint256)) private _allowed;\\n\\n  uint256 private _totalSupply;\\n\\n  constructor(uint totalSupply) {\\n    _balances[msg.sender] = totalSupply;\\n  }\\n\\n  function balanceOf(address owner) public view returns (uint256) {\\n    return _balances[owner];\\n  }\\n\\n\\n  function allowance(address owner, address spender) public view returns (uint256)\\n  {\\n    return _allowed[owner][spender];\\n  }\\n\\n  function transfer(address to, uint256 value) public returns (bool) {\\n    require(value <= _balances[msg.sender]);\\n    require(to != address(0));\\n\\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\\n    _balances[to] = _balances[to].add(value);\\n    emit Transfer(msg.sender, to, value);\\n    return true;\\n  }\\n  // <yes> <report> FRONT_RUNNING\\n  function approve(address spender, uint256 value) public returns (bool) {\\n    require(spender != address(0));\\n     // <yes> <report> FRONT_RUNNING\\n    _allowed[msg.sender][spender] = value;\\n    emit Approval(msg.sender, spender, value);\\n    return true;\\n  }\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n    require(value <= _balances[from]);\\n    require(value <= _allowed[from][msg.sender]);\\n    require(to != address(0));\\n\\n    _balances[from] = _balances[from].sub(value);\\n    _balances[to] = _balances[to].add(value);\\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n    emit Transfer(from, to, value);\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x76b8fbafff7204d29e52be9495c0273cfbba59f356bd1d178f705a9edbe49439\",\"license\":\"UNLICENSED\"}},\"version\":1}"}}},"sources":{"ERC20.sol":{"id":0}}}

