id,compiler_output_json,address_hex,contract_name,filename,source_code,source_line,info
BeerBar require,tests/compiler0826/compiled/BeerBar.json,18AB,BeerBar,contracts/BeerBar.sol,"hasRole(OWNER, msg.sender)",54,"Test line 54 ""require(hasRole)"" in the BeerBar contract"
BeerBar PUSH32,tests/compiler0826/compiled/BeerBar.json,193F,BeerBar,contracts/BeerBar.sol,BarkeeperAdded(account),56,"Test line 56 ""emit BarkeeperAdded(account)"" in the BeerBar contract. This conains a PUSH32 instruction."
BeerBar after PUSH32,tests/compiler0826/compiled/BeerBar.json,1940,BeerBar,contracts/BeerBar.sol,BarkeeperAdded(account),56,"Test line 56 ""emit BarkeeperAdded(account)"" in the BeerBar contract. This instruction is one after the PUSH32."
EtherLotto exception_state 0.5.17,tests/compiler0517/compiled/EtherLotto.json,F9,EtherLotto,compiler0517/EtherLotto.sol,assert(msg.value == TICKET_AMOUNT),37,"SWC ID: 110 Severity: Medium Contract: MAIN Function name: play() PC address: 249 Estimated Gas Usage: 154 - 249 An assertion violation was triggered. It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). "
EtherLotto dependence_on_predictable_environment_variable 0.5.17,tests/compiler0517/compiled/EtherLotto.json,14B,EtherLotto,compiler0517/EtherLotto.sol,if (random == 0) {\r\n\r\n            // Send fee to bank account.\r\n            bank.transfer(FEE_AMOUNT);\r\n\r\n            // Send jackpot to winner.\r\n            msg.sender.transfer(pot - FEE_AMOUNT);\r\n\r\n            // Restart jackpot.\r\n            pot = 0;\r\n        },47,"SWC ID: 116 Severity: Low Contract: MAIN Function name: play() PC address: 331 A control flow decision is made based on The block.timestamp environment variable. The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners. "
EtherLotto multiple_calls_in_a_single_transaction 0.5.17,tests/compiler0517/compiled/EtherLotto.json,1E8,EtherLotto,compiler0517/EtherLotto.sol,msg.sender.transfer(pot - FEE_AMOUNT),53,"SWC ID: 113 Severity: Low Contract: MAIN Function name: play() PC address: 488 Multiple calls are executed in the same transaction. This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase). "
EtherLotto exception_state 0.6.12,tests/compiler0612/compiled/EtherLotto.json,271,EtherLotto,compiler0612/contracts/EtherLotto.sol,assert(msg.value == TICKET_AMOUNT),38,"SWC ID: 110 Severity: Medium Contract: MAIN Function name: play() PC address: 625 Estimated Gas Usage: 154 - 249 An assertion violation was triggered. It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). "
EtherLotto dependence_on_predictable_environment_variable 0.6.12,tests/compiler0612/compiled/EtherLotto.json,2C3,EtherLotto,compiler0612/contracts/EtherLotto.sol,if (random == 0) {\n\n            // Send fee to bank account.\n            bank.transfer(FEE_AMOUNT);\n\n            // Send jackpot to winner.\n            msg.sender.transfer(pot - FEE_AMOUNT);\n\n            // Restart jackpot.\n            pot = 0;\n        },48,"SWC ID: 116 Severity: Low Contract: MAIN Function name: play() PC address: 707 Estimated Gas Usage: 6176 - 26835 A control flow decision is made based on The block.timestamp environment variable. The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners."
EtherLotto multiple_calls_in_a_single_transaction 0.6.12,tests/compiler0612/compiled/EtherLotto.json,35F,EtherLotto,compiler0612/contracts/EtherLotto.sol,msg.sender.transfer(pot - FEE_AMOUNT),54,"SWC ID: 113 Severity: Low Contract: MAIN Function name: play() PC address: 863 Estimated Gas Usage: 14458 - 123819 Multiple calls are executed in the same transaction. This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase). "
EtherLotto exception_state 0.7.6,tests/compiler076/compiled/EtherLotto.json,271,EtherLotto,compiler076/EtherLotto.sol,assert(msg.value == TICKET_AMOUNT),38,"SWC ID: 110 Severity: Medium Contract: MAIN Function name: play() PC address: 625 Estimated Gas Usage: 154 - 249 An assertion violation was triggered. It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). "
EtherLotto dependence_on_predictable_environment_variable 0.7.6,tests/compiler076/compiled/EtherLotto.json,2C3,EtherLotto,compiler076/EtherLotto.sol,if (random == 0) {\n\n            // Send fee to bank account.\n            bank.transfer(FEE_AMOUNT);\n\n            // Send jackpot to winner.\n            msg.sender.transfer(pot - FEE_AMOUNT);\n\n            // Restart jackpot.\n            pot = 0;\n        },48,"SWC ID: 116 Severity: Low Contract: MAIN Function name: play() PC address: 707 Estimated Gas Usage: 6176 - 26835 A control flow decision is made based on The block.timestamp environment variable. The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners. "
EtherLotto multiple_calls_in_a_single_transaction 0.7.6,tests/compiler076/compiled/EtherLotto.json,35F,EtherLotto,compiler076/EtherLotto.sol,msg.sender.transfer(pot - FEE_AMOUNT),54,"SWC ID: 113 Severity: Low Contract: MAIN Function name: play() PC address: 863 Estimated Gas Usage: 14458 - 123819 Multiple calls are executed in the same transaction. This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase). "
ArtithmeticTestContract last_instruction_before_return 0.8.26,tests/compiler0826/compiled/ArtithmeticTestContract.json,1C8,ArtithmeticTestContract,ArtithmeticTestContract.sol,uint256 div = b != 0 ? a / b : 0,7,"Test last instruction before the return statement ""div = b != 0 ? a / b : 0"" in the ArtithmeticTestContract contract"
