{
  "language": "Solidity",
  "settings": {
    "optimizer": {
      "enabled": false
    },
    "evmVersion": "istanbul",
    "metadata": {
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "": [
          "*"
        ],
        "*": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "compiler0517/EtherLotto.sol": {
      "content": "/*\r\n * @article: https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620\r\n * @source: https://etherscan.io/address/0xa11e4ed59dc94e69612f3111942626ed513cb172#code\r\n * Upgraded from Solidity 0.4 to 0.5, vulnerability may no longer exist\r\n * @vulnerable_at_lines: 44\r\n * @author: -\r\n */\r\n\r\n pragma solidity ^0.5.0;\r\n\r\n/// @title Ethereum Lottery Game.\r\n\r\ncontract EtherLotto {\r\n\r\n    // Amount of ether needed for participating in the lottery.\r\n    uint constant TICKET_AMOUNT = 10;\r\n\r\n    // Fixed amount fee for each lottery game.\r\n    uint constant FEE_AMOUNT = 1;\r\n\r\n    // Address where fee is sent.\r\n    address payable public bank;\r\n\r\n    // Public jackpot that each participant can win (minus fee).\r\n    uint public pot;\r\n\r\n    // Lottery constructor sets bank account from the smart-contract owner.\r\n    constructor() public {\r\n        bank = msg.sender;\r\n    }\r\n\r\n    // Public function for playing lottery. Each time this function\r\n    // is invoked, the sender has an oportunity for winning pot.\r\n    function play() public payable {\r\n\r\n        // Participants must spend some fixed ether before playing lottery.\r\n        assert(msg.value == TICKET_AMOUNT);\r\n\r\n        // Increase pot for each participant.\r\n        pot += msg.value;\r\n\r\n        // Compute some *almost random* value for selecting winner from current transaction.\r\n        // <yes> <report> TIME_MANIPULATION\r\n        uint random = uint(keccak256(abi.encodePacked(block.timestamp))) % 2;\r\n\r\n        // Distribution: 50% of participants will be winners.\r\n        if (random == 0) {\r\n\r\n            // Send fee to bank account.\r\n            bank.transfer(FEE_AMOUNT);\r\n\r\n            // Send jackpot to winner.\r\n            msg.sender.transfer(pot - FEE_AMOUNT);\r\n\r\n            // Restart jackpot.\r\n            pot = 0;\r\n        }\r\n    }\r\n\r\n}\r\n"
    }
  }
}