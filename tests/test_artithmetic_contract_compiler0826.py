from solidity_address_mapper.mapper import Mapper, MapperResult

opcode_map = {
        # Stop and Arithmetic Operations
        0x00: "STOP",
        0x01: "ADD",
        0x02: "MUL",
        0x03: "SUB",
        0x04: "DIV",
        0x05: "SDIV",
        0x06: "MOD",
        0x07: "SMOD",
        0x08: "ADDMOD",
        0x09: "MULMOD",
        0x0a: "EXP",
        0x0b: "SIGNEXTEND",

        # Comparison & Bitwise Logic
        0x10: "LT",
        0x11: "GT",
        0x12: "SLT",
        0x13: "SGT",
        0x14: "EQ",
        0x15: "ISZERO",
        0x16: "AND",
        0x17: "OR",
        0x18: "XOR",
        0x19: "NOT",
        0x1a: "BYTE",
        0x1b: "SHL",
        0x1c: "SHR",
        0x1d: "SAR",

        # SHA3
        0x20: "SHA3",

        # Environmental Information
        0x30: "ADDRESS",
        0x31: "BALANCE",
        0x32: "ORIGIN",
        0x33: "CALLER",
        0x34: "CALLVALUE",
        0x35: "CALLDATALOAD",
        0x36: "CALLDATASIZE",
        0x37: "CALLDATACOPY",
        0x38: "CODESIZE",
        0x39: "CODECOPY",
        0x3a: "GASPRICE",
        0x3b: "EXTCODESIZE",
        0x3c: "EXTCODECOPY",
        0x3d: "RETURNDATASIZE",
        0x3e: "RETURNDATACOPY",
        0x3f: "EXTCODEHASH",

        # Block Information
        0x40: "BLOCKHASH",
        0x41: "COINBASE",
        0x42: "TIMESTAMP",
        0x43: "NUMBER",
        0x44: "DIFFICULTY",
        0x45: "GASLIMIT",
        0x46: "CHAINID",
        0x47: "SELFBALANCE",
        0x48: "BASEFEE",

        # Stack, Memory, Storage and Flow Operations
        0x50: "POP",
        0x51: "MLOAD",
        0x52: "MSTORE",
        0x53: "MSTORE8",
        0x54: "SLOAD",
        0x55: "SSTORE",
        0x56: "JUMP",
        0x57: "JUMPI",
        0x58: "PC",
        0x59: "MSIZE",
        0x5a: "GAS",
        0x5b: "JUMPDEST",
        0x5c: "TLOAD",
        0x5d: "TSTORE",
        0x5e: "MCOPY",

        # Push Operations
        0x5f: "PUSH0",
        0x60: "PUSH1",
        0x61: "PUSH2",
        # ... up to PUSH32 (0x7f)
        **{i: f"PUSH{i - 0x5f}" for i in range(0x62, 0x80)},

        # Duplication Operations
        0x80: "DUP1",
        0x81: "DUP2",
        # ... up to DUP16 (0x8f)
        **{i: f"DUP{i - 0x7f}" for i in range(0x81, 0x90)},

        # Exchange Operations
        0x90: "SWAP1",
        0x91: "SWAP2",
        # ... up to SWAP16 (0x9f)
        **{i: f"SWAP{i - 0x8f}" for i in range(0x91, 0xa0)},

        # Logging
        0xa0: "LOG0",
        0xa1: "LOG1",
        0xa2: "LOG2",
        0xa3: "LOG3",
        0xa4: "LOG4",

        # System Operations
        0xf0: "CREATE",
        0xf1: "CALL",
        0xf2: "CALLCODE",
        0xf3: "RETURN",
        0xf4: "DELEGATECALL",
        0xf5: "CREATE2",
        0xfa: "STATICCALL",
        0xfd: "REVERT",
        0xfe: "INVALID",
        0xff: "SELFDESTRUCT"
    }

class TestClass:
    bin_runtime = "608060405234801561009c57604051807f08c379a000000000000000000000000000000000000000000000000000000000815260048101905060208152602081019050602281526020810190507f45746865722073656e7420746f206e6f6e2d70617961626c652066756e6374695f8201527f6f6e0000000000000000000000000000000000000000000000000000000000006020820152608482fd5b50600436106100b6575f3560e01c80630c3b0cc414610147575b604051807f08c379a000000000000000000000000000000000000000000000000000000000815260048101905060208152602081019050603581526020810190507f436f6e747261637420646f6573206e6f7420686176652066616c6c6261636b205f8201527f6e6f7220726563656976652066756e6374696f6e7300000000000000000000006020820152608482fd5b610161600480360381019061015c91906102b3565b61017a565b6040516101719493929190610300565b60405180910390f35b5f805f805f858761018b9190610370565b90505f868861019a91906103a3565b90505f87896101a991906103d6565b90505f8089036101b9575f6101c6565b888a6101c59190610444565b5b90508383838397509750975097505050505092959194509250565b5f604051905090565b6101f26101e1565b807f08c379a000000000000000000000000000000000000000000000000000000000815260048101905060208152602081019050602281526020810190507f414249206465636f64696e673a207475706c65206461746120746f6f2073686f5f8201527f72740000000000000000000000000000000000000000000000000000000000006020820152608482fd5b5f819050919050565b61029281610280565b811461029c575f80fd5b50565b5f813590506102ad81610289565b92915050565b5f80604083850312156102c9576102c86101ea565b5b5f6102d68582860161029f565b92505060206102e78582860161029f565b9150509250929050565b6102fa81610280565b82525050565b5f6080820190506103135f8301876102f1565b61032060208301866102f1565b61032d60408301856102f1565b61033a60608301846102f1565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61037a82610280565b915061038583610280565b925082820190508082111561039d5761039c610343565b5b92915050565b5f6103ad82610280565b91506103b883610280565b92508282039050818111156103d0576103cf610343565b5b92915050565b5f6103e082610280565b91506103eb83610280565b92508282026103f981610280565b915082820484148315176104105761040f610343565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61044e82610280565b915061045983610280565b92508261046957610468610417565b5b82820490509291505056fea164736f6c634300081a000a"
    opcodes = "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x9C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH32 0x45746865722073656E7420746F206E6F6E2D70617961626C652066756E637469 PUSH0 DUP3 ADD MSTORE PUSH32 0x6F6E000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x84 DUP3 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB6 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC3B0CC4 EQ PUSH2 0x147 JUMPI JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x35 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH32 0x436F6E747261637420646F6573206E6F7420686176652066616C6C6261636B20 PUSH0 DUP3 ADD MSTORE PUSH32 0x6E6F7220726563656976652066756E6374696F6E730000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x84 DUP3 REVERT JUMPDEST PUSH2 0x161 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x17A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x300 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP6 DUP8 PUSH2 0x18B SWAP2 SWAP1 PUSH2 0x370 JUMP JUMPDEST SWAP1 POP PUSH0 DUP7 DUP9 PUSH2 0x19A SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 POP PUSH0 DUP8 DUP10 PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x3D6 JUMP JUMPDEST SWAP1 POP PUSH0 DUP1 DUP10 SUB PUSH2 0x1B9 JUMPI PUSH0 PUSH2 0x1C6 JUMP JUMPDEST DUP9 DUP11 PUSH2 0x1C5 SWAP2 SWAP1 PUSH2 0x444 JUMP JUMPDEST JUMPDEST SWAP1 POP DUP4 DUP4 DUP4 DUP4 SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x1E1 JUMP JUMPDEST DUP1 PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH32 0x414249206465636F64696E673A207475706C65206461746120746F6F2073686F PUSH0 DUP3 ADD MSTORE PUSH32 0x7274000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x84 DUP3 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x292 DUP2 PUSH2 0x280 JUMP JUMPDEST DUP2 EQ PUSH2 0x29C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2AD DUP2 PUSH2 0x289 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C9 JUMPI PUSH2 0x2C8 PUSH2 0x1EA JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2D6 DUP6 DUP3 DUP7 ADD PUSH2 0x29F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2E7 DUP6 DUP3 DUP7 ADD PUSH2 0x29F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2FA DUP2 PUSH2 0x280 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x313 PUSH0 DUP4 ADD DUP8 PUSH2 0x2F1 JUMP JUMPDEST PUSH2 0x320 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2F1 JUMP JUMPDEST PUSH2 0x32D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2F1 JUMP JUMPDEST PUSH2 0x33A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2F1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x37A DUP3 PUSH2 0x280 JUMP JUMPDEST SWAP2 POP PUSH2 0x385 DUP4 PUSH2 0x280 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x39D JUMPI PUSH2 0x39C PUSH2 0x343 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x3AD DUP3 PUSH2 0x280 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B8 DUP4 PUSH2 0x280 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3D0 JUMPI PUSH2 0x3CF PUSH2 0x343 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x3E0 DUP3 PUSH2 0x280 JUMP JUMPDEST SWAP2 POP PUSH2 0x3EB DUP4 PUSH2 0x280 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x3F9 DUP2 PUSH2 0x280 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x410 JUMPI PUSH2 0x40F PUSH2 0x343 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x44E DUP3 PUSH2 0x280 JUMP JUMPDEST SWAP2 POP PUSH2 0x459 DUP4 PUSH2 0x280 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x469 JUMPI PUSH2 0x468 PUSH2 0x417 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP EXP "
    srcmap = "25:326:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;65:283;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;133:7;142;151;160;180:11;198:1;194;:5;;;;:::i;:::-;180:19;;210:11;228:1;224;:5;;;;:::i;:::-;210:19;;240:11;258:1;254;:5;;;;:::i;:::-;240:19;;270:11;289:1;284;:6;:18;;301:1;284:18;;;297:1;293;:5;;;;:::i;:::-;284:18;270:32;;321:3;326;331;336;313:27;;;;;;;;;;;;65:283;;;;;;;:::o;7:75:1:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:529::-;201:20;;:::i;:::-;241:5;267:76;262:3;255:89;369:1;364:3;360:11;353:18;;392:4;387:3;380:17;422:4;417:3;413:14;406:21;;448:2;443:3;436:15;476:4;471:3;467:14;460:21;;511:34;507:1;502:3;498:11;491:55;577:4;572:2;567:3;563:12;556:26;606:3;599:5;592:18;1158:77;1195:7;1224:5;1213:16;;1158:77;;;:::o;1241:122::-;1314:24;1332:5;1314:24;:::i;:::-;1307:5;1304:35;1294:63;;1353:1;1350;1343:12;1294:63;1241:122;:::o;1369:139::-;1415:5;1453:6;1440:20;1431:29;;1469:33;1496:5;1469:33;:::i;:::-;1369:139;;;;:::o;1514:474::-;1582:6;1590;1639:2;1627:9;1618:7;1614:23;1610:32;1607:119;;;1645:79;;:::i;:::-;1607:119;1765:1;1790:53;1835:7;1826:6;1815:9;1811:22;1790:53;:::i;:::-;1780:63;;1736:117;1892:2;1918:53;1963:7;1954:6;1943:9;1939:22;1918:53;:::i;:::-;1908:63;;1863:118;1514:474;;;;;:::o;1994:118::-;2081:24;2099:5;2081:24;:::i;:::-;2076:3;2069:37;1994:118;;:::o;2118:553::-;2295:4;2333:3;2322:9;2318:19;2310:27;;2347:71;2415:1;2404:9;2400:17;2391:6;2347:71;:::i;:::-;2428:72;2496:2;2485:9;2481:18;2472:6;2428:72;:::i;:::-;2510;2578:2;2567:9;2563:18;2554:6;2510:72;:::i;:::-;2592;2660:2;2649:9;2645:18;2636:6;2592:72;:::i;:::-;2118:553;;;;;;;:::o;2677:180::-;2725:77;2722:1;2715:88;2822:4;2819:1;2812:15;2846:4;2843:1;2836:15;2863:191;2903:3;2922:20;2940:1;2922:20;:::i;:::-;2917:25;;2956:20;2974:1;2956:20;:::i;:::-;2951:25;;2999:1;2996;2992:9;2985:16;;3020:3;3017:1;3014:10;3011:36;;;3027:18;;:::i;:::-;3011:36;2863:191;;;;:::o;3060:194::-;3100:4;3120:20;3138:1;3120:20;:::i;:::-;3115:25;;3154:20;3172:1;3154:20;:::i;:::-;3149:25;;3198:1;3195;3191:9;3183:17;;3222:1;3216:4;3213:11;3210:37;;;3227:18;;:::i;:::-;3210:37;3060:194;;;;:::o;3260:410::-;3300:7;3323:20;3341:1;3323:20;:::i;:::-;3318:25;;3357:20;3375:1;3357:20;:::i;:::-;3352:25;;3412:1;3409;3405:9;3434:30;3452:11;3434:30;:::i;:::-;3423:41;;3613:1;3604:7;3600:15;3597:1;3594:22;3574:1;3567:9;3547:83;3524:139;;3643:18;;:::i;:::-;3524:139;3308:362;3260:410;;;;:::o;3676:180::-;3724:77;3721:1;3714:88;3821:4;3818:1;3811:15;3845:4;3842:1;3835:15;3862:185;3902:1;3919:20;3937:1;3919:20;:::i;:::-;3914:25;;3953:20;3971:1;3953:20;:::i;:::-;3948:25;;3992:1;3982:35;;3997:18;;:::i;:::-;3982:35;4039:1;4036;4032:9;4027:14;;3862:185;;;;:::o;"

    def test_instruction_index(self):
        """Test that the instruction index is correctly calculated."""
        # Create a mapping from 'opcode' to 'index', for each index in the bin_runtime.
        # i.e. the first two bytes 0x60 and 0x80 belong to the PUSH1 instruction.
        # Verifies that the mapping is correct by comparing our instructions with the given opccodes.
        instruction_map = self.create_instruction_mapping(self.bin_runtime, self.opcodes)

        # Test the Mapper
        for idx, (start, end) in instruction_map:
            for i in range(start, end + 1):
                # For each position in bin_runtime we get the instruction index from the mapper
                # The instruction index should be equal to the idx from instruction_map
                # i.e. for the first two bytes (0,1) we should get instruction index 0 (PUSH1) and so on.
                instruction_index = Mapper._instruction_index_from_hex_address(i, self.bin_runtime)
                assert instruction_index == idx, f"expected {idx} but got {instruction_index}"

    def test_last_instruction_before_return(self):
        ''' Test last instruction before the return statement "div = b != 0 ? a / b : 0" in the ArtithmeticTestContract contract '''
        result: MapperResult = Mapper.map_hex_address(
            compiler_output_json="tests/compiler0826/compiled/ArtithmeticTestContract.json",
            address_hex=hex(456),
            contract_name="ArtithmeticTestContract")
        self._assert_code_in_line(result, 'uint256 div = b != 0 ? a / b : 0', 7)




    def create_instruction_mapping(self, bin_runtime_hex: str, opcodes: str) -> list[tuple[int, tuple[int, int]]]:
        """Maps instruction indices to byte ranges in the binary runtime."""

        # Create a mapping from 'opcode' to 'index', for each index in the bin_runtime.
        # i.e. the first two bytes 0x60 and 0x80 belong to the PUSH1 instruction.
        # Verifies that the mapping is correct by comparing our instructions with the given opccodes.

        def format_push_data(data_bytes: bytes) -> str:
            """Converts data bytes to a hex string without leading zeros."""
            value = int.from_bytes(data_bytes, byteorder="big")
            hex_str = hex(value)[2:]  # Strip '0x'
            return f"0x{hex_str.upper()}" if value != 0 else "0x0"

        bytecode = bytes.fromhex(bin_runtime_hex)
        mapping = []
        i = 0
        instruction_idx = 0
        instructions = ""
        bin_runtime_bytes = bytes.fromhex(self.bin_runtime)

        while i < len(bytecode):
            op = bytecode[i]

            if 0x60 <= op <= 0x7f:  # PUSH1-PUSH32
                data_size = op - 0x5f
                start = i
                end = i + data_size  # inclusive range
                mapping.append((instruction_idx, (start, end)))

                data_bytes = bin_runtime_bytes[i + 1:i + 1 + data_size]
                formatted_data = format_push_data(data_bytes)
                instructions += f"{opcode_map[op]} {formatted_data} "

                i += 1 + data_size
            else:
                mapping.append((instruction_idx, (i, i)))
                instructions += f"{opcode_map.get(op, f'DATA (0x{op:02x})')} "
                i += 1

            instruction_idx += 1

        # Verify we got the correct instructions
        assert (instructions == opcodes)

        return mapping
   


    def _assert_code_in_line(self, result: any, MapperResult: str, line: int):
        assert (result != None)
        assert (MapperResult == result.code)
        assert (result.file == "ArtithmeticTestContract.sol")
        assert (result.line == line)